/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>

#include <stdio.h>
#include <assert.h>
#include <string>
#include <sstream>
#include <iostream>
#include <sstream>
#include <algorithm>
#include <regex>

#include "epparser.h"
#include "generator/pygen.h"
#include "generator/closure.h"
#include "parser.h"
#include "tokenAdapter.h"
#include "parserUtilities.h"

struct ParserStruct {
   PyGenerator gen;
    ClosureManager closure;
};

int currentTokenizingLine;
int lambdaIndex;
std::string currentFunction;
std::string currentModule;
std::string currentFile;
bool PARSER_DEBUG = false;
bool MAP_DEBUG = false;

/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    ParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is ParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    ParseARG_SDECL     A static variable declaration for the %extra_argument
**    ParseARG_PDECL     A parameter declaration for the %extra_argument
**    ParseARG_STORE     Code to store %extra_argument into yypParser
**    ParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 165
#define YYACTIONTYPE unsigned short int
#define ParseTOKENTYPE Token*
typedef union {
  int yyinit;
  ParseTOKENTYPE yy0;
  int yy329;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define ParseARG_SDECL  ParserStruct* ps ;
#define ParseARG_PDECL , ParserStruct* ps 
#define ParseARG_FETCH  ParserStruct* ps  = yypParser->ps 
#define ParseARG_STORE yypParser->ps  = ps 
#define YYNSTATE 405
#define YYNRULE 205
#define YYERRORSYMBOL 82
#define YYERRSYMDT yy329
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
#define YY_ACTTAB_COUNT (10766)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   432,   40,  432,  351,  432,  432,  432,  432,  432,  432,
 /*    10 */   432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
 /*    20 */   432,  432,  432,  432,  432,  461,  432,  432,  432,  432,
 /*    30 */   432,  432,  432,  256,  432,  432,  432,  432,  432,  432,
 /*    40 */   432,  432,  432,  194,  432,  196,  375,   11,  432,  432,
 /*    50 */   432,  432,  432,  432,  432,  432,  432,  432,  432,  229,
 /*    60 */    95,  196,  391,   11,  306,  305,  318,    2,  263,  432,
 /*    70 */   432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
 /*    80 */   432,  432,  433,  374,  433,  530,  433,  433,  433,  433,
 /*    90 */   433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
 /*   100 */   433,  433,  433,  433,  433,  433,  433,  462,  433,  433,
 /*   110 */   433,  433,  433,  433,  433,  252,  433,  433,  433,  433,
 /*   120 */   433,  433,  433,  433,  433,  230,  433,  196,   48,   11,
 /*   130 */   433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
 /*   140 */   433,  229,   95,  196,  462,   11,  306,  305,  319,  611,
 /*   150 */    17,  433,  433,  433,  433,  433,  433,  433,  433,  433,
 /*   160 */   433,  433,  433,  433,  435,  497,  435,  531,  435,  435,
 /*   170 */   435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
 /*   180 */   435,  435,  435,  435,  435,  435,  435,  435,  435,  251,
 /*   190 */   435,  435,  435,  435,  435,  435,  435,  250,  435,  435,
 /*   200 */   435,  435,  435,  435,  435,  435,  435,  227,  435,  196,
 /*   210 */   419,   11,  435,  435,  435,  435,  435,  435,  435,  435,
 /*   220 */   435,  435,  435,  229,   39,  196,  351,   11,  306,  305,
 /*   230 */   320,  276,  398,  435,  435,  435,  435,  435,  435,  435,
 /*   240 */   435,  435,  435,  435,  435,  435,  436,   37,  436,   38,
 /*   250 */   436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
 /*   260 */   436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
 /*   270 */   436,  396,  436,  436,  436,  436,  436,  436,  436,   95,
 /*   280 */   436,  436,  436,  436,  436,  436,  436,  436,  436,  225,
 /*   290 */   436,  196,   98,   11,  436,  436,  436,  436,  436,  436,
 /*   300 */   436,  436,  436,  436,  436,  229,   95,  196,  199,   11,
 /*   310 */   306,  305,  353,  104,  393,  436,  436,  436,  436,  436,
 /*   320 */   436,  436,  436,  436,  436,  436,  436,  436,  437,  282,
 /*   330 */   437,  533,  437,  437,  437,  437,  437,  437,  437,  437,
 /*   340 */   437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
 /*   350 */   437,  437,  437,  267,  437,  437,  437,  437,  437,  437,
 /*   360 */   437,  392,  437,  437,  437,  437,  437,  437,  437,  437,
 /*   370 */   437,  240,  437,  196,  391,   11,  437,  437,  437,  437,
 /*   380 */   437,  437,  437,  437,  437,  437,  437,  229,  539,  196,
 /*   390 */   539,   11,  306,  305,  354,  195,  193,  437,  437,  437,
 /*   400 */   437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
 /*   410 */   440,   31,  440,  351,  440,  440,  440,  440,  440,  440,
 /*   420 */   440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
 /*   430 */   440,  440,  440,  440,  440,  148,  440,  440,  440,  440,
 /*   440 */   440,  440,  440,  351,  440,  440,  440,  440,  440,  440,
 /*   450 */   440,  440,  440,  189,  440,  196,   97,   11,  440,  440,
 /*   460 */   440,  440,  440,  440,  440,  440,  440,  440,  440,  229,
 /*   470 */   584,  196,   33,   11,  306,  305,  325,  144,  141,  440,
 /*   480 */   440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
 /*   490 */   440,  440,  441,  315,  441,  584,  441,  441,  441,  441,
 /*   500 */   441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
 /*   510 */   441,  441,  441,  441,  441,  441,  441,  267,  441,  441,
 /*   520 */   441,  441,  441,  441,  441,  572,  441,  441,  441,  441,
 /*   530 */   441,  441,  441,  441,  441,  188,  441,  196,  140,   11,
 /*   540 */   441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
 /*   550 */   441,   34,   13,  269,  466,   15,  323,  572,  572,  139,
 /*   560 */   466,  441,  441,  441,  441,  441,  441,  441,  441,  441,
 /*   570 */   441,  441,  441,  441,  442,  138,  442,  137,  442,  442,
 /*   580 */   442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
 /*   590 */   442,  442,  442,  442,  442,  442,  442,  442,  442,  136,
 /*   600 */   442,  442,  442,  442,  442,  442,  442,  283,  442,  442,
 /*   610 */   442,  442,  442,  442,  442,  442,  442,  187,  442,  196,
 /*   620 */   128,   11,  442,  442,  442,  442,  442,  442,  442,  442,
 /*   630 */   442,  442,  442,   34,   13,  268,   29,  174,  127,  175,
 /*   640 */   327,   11,  126,  442,  442,  442,  442,  442,  442,  442,
 /*   650 */   442,  442,  442,  442,  442,  442,  443,  201,  443,  114,
 /*   660 */   443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
 /*   670 */   443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
 /*   680 */   443,  308,  443,  443,  443,  443,  443,  443,  443,  207,
 /*   690 */   443,  443,  443,  443,  443,  443,  443,  443,  443,  186,
 /*   700 */   443,  196,  197,   11,  443,  443,  443,  443,  443,  443,
 /*   710 */   443,  443,  443,  443,  443,   69,  417,  417,  371,  174,
 /*   720 */   417,  175,  370,   11,  368,  443,  443,  443,  443,  443,
 /*   730 */   443,  443,  443,  443,  443,  443,  443,  443,  444,  172,
 /*   740 */   444,  367,  444,  444,  444,  444,  444,  444,  444,  444,
 /*   750 */   444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
 /*   760 */   444,  444,  444,  171,  444,  444,  444,  444,  444,  444,
 /*   770 */   444,  107,  444,  444,  444,  444,  444,  444,  444,  444,
 /*   780 */   444,  185,  444,  196,  170,   11,  444,  444,  444,  444,
 /*   790 */   444,  444,  444,  444,  444,  444,  444,  365,  400,  420,
 /*   800 */   364,  174,  399,  175,  362,   11,  361,  444,  444,  444,
 /*   810 */   444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
 /*   820 */   445,  169,  445,   43,  445,  445,  445,  445,  445,  445,
 /*   830 */   445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
 /*   840 */   445,  445,  445,  445,  445,  168,  445,  445,  445,  445,
 /*   850 */   445,  445,  445,  106,  445,  445,  445,  445,  445,  445,
 /*   860 */   445,  445,  445,  184,  445,  196,  167,   11,  445,  445,
 /*   870 */   445,  445,  445,  445,  445,  445,  445,  445,  445,   42,
 /*   880 */   418,  418,   24,  174,  418,  175,   23,   11,  160,  445,
 /*   890 */   445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
 /*   900 */   445,  445,  446,  162,  446,  161,  446,  446,  446,  446,
 /*   910 */   446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
 /*   920 */   446,  446,  446,  446,  446,  446,  446,  259,  446,  446,
 /*   930 */   446,  446,  446,  446,  446,  105,  446,  446,  446,  446,
 /*   940 */   446,  446,  446,  446,  446,  183,  446,  196,  112,   11,
 /*   950 */   446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
 /*   960 */   446,  558,  182,  261,  196,  174,   11,  175,  467,   11,
 /*   970 */    53,  446,  446,  446,  446,  446,  446,  446,  446,  446,
 /*   980 */   446,  446,  446,  446,  447,    9,  447,  561,  447,  447,
 /*   990 */   447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
 /*  1000 */   447,  447,  447,  447,  447,  447,  447,  447,  447,   52,
 /*  1010 */   447,  447,  447,  447,  447,  447,  447,  303,  447,  447,
 /*  1020 */   447,  447,  447,  447,  447,  447,  447,  181,  447,  196,
 /*  1030 */     8,   11,  447,  447,  447,  447,  447,  447,  447,  447,
 /*  1040 */   447,  447,  447,   51,  180,  341,  196,  174,   11,  175,
 /*  1050 */    46,   11,  580,  447,  447,  447,  447,  447,  447,  447,
 /*  1060 */   447,  447,  447,  447,  447,  447,  448,  122,  448,   50,
 /*  1070 */   448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
 /*  1080 */   448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
 /*  1090 */   448,    7,  448,  448,  448,  448,  448,  448,  448,  301,
 /*  1100 */   448,  448,  448,  448,  448,  448,  448,  448,  448,  179,
 /*  1110 */   448,  196,  598,   11,  448,  448,  448,  448,  448,  448,
 /*  1120 */   448,  448,  448,  448,  448,  228,  154,  243,  196,  174,
 /*  1130 */    11,  175,    6,   11,  331,  448,  448,  448,  448,  448,
 /*  1140 */   448,  448,  448,  448,  448,  448,  448,  448,  449,  600,
 /*  1150 */   449,    5,  449,  449,  449,  449,  449,  449,  449,  449,
 /*  1160 */   449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
 /*  1170 */   449,  449,  449,  603,  449,  449,  449,  449,  449,  449,
 /*  1180 */   449,  299,  449,  449,  449,  449,  449,  449,  449,  449,
 /*  1190 */   449,  153,  449,  196,   22,   11,  449,  449,  449,  449,
 /*  1200 */   449,  449,  449,  449,  449,  449,  449,  604,  152,  605,
 /*  1210 */   196,  174,   11,  175,  231,   11,  205,  449,  449,  449,
 /*  1220 */   449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
 /*  1230 */   450,  577,  450,  468,  450,  450,  450,  450,  450,  450,
 /*  1240 */   450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
 /*  1250 */   450,  450,  450,  450,  450,  103,  450,  450,  450,  450,
 /*  1260 */   450,  450,  450,  158,  450,  450,  450,  450,  450,  450,
 /*  1270 */   450,  450,  450,  151,  450,  196,  157,   11,  450,  450,
 /*  1280 */   450,  450,  450,  450,  450,  450,  450,  450,  450,  242,
 /*  1290 */   229,  196,  196,   11,   11,  304,  156,  316,  297,  450,
 /*  1300 */   450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
 /*  1310 */   450,  450,  451,  266,  451,  265,  451,  451,  451,  451,
 /*  1320 */   451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
 /*  1330 */   451,  451,  451,  451,  451,  451,  451,  313,  451,  451,
 /*  1340 */   451,  451,  451,  451,  451,  272,  451,  451,  451,  451,
 /*  1350 */   451,  451,  451,  451,  451,  150,  451,  196,   96,   11,
 /*  1360 */   451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
 /*  1370 */   451,  102,  149,  246,  196,  174,   11,  175,  277,   11,
 /*  1380 */   278,  451,  451,  451,  451,  451,  451,  451,  451,  451,
 /*  1390 */   451,  451,  451,  451,  452,  145,  452,  146,  452,  452,
 /*  1400 */   452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
 /*  1410 */   452,  452,  452,  452,  452,  452,  452,  452,  452,  309,
 /*  1420 */   452,  452,  452,  452,  452,  452,  452,  573,  452,  452,
 /*  1430 */   452,  452,  452,  452,  452,  452,  452,  178,  452,  196,
 /*  1440 */   310,   11,  452,  452,  452,  452,  452,  452,  452,  452,
 /*  1450 */   452,  452,  452,  242,  177,  196,  196,   11,   11,  573,
 /*  1460 */   573,  275,  271,  452,  452,  452,  452,  452,  452,  452,
 /*  1470 */   452,  452,  452,  452,  452,  452,  453,  260,  453,  302,
 /*  1480 */   453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
 /*  1490 */   453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
 /*  1500 */   453,  300,  453,  453,  453,  453,  453,  453,  453,  285,
 /*  1510 */   453,  453,  453,  453,  453,  453,  453,  453,  453,  239,
 /*  1520 */   453,  196,  262,   11,  453,  453,  453,  453,  453,  453,
 /*  1530 */   453,  453,  453,  453,  453,  242,  426,  196,  427,   11,
 /*  1540 */   426,  426,  427,  427,  270,  453,  453,  453,  453,  453,
 /*  1550 */   453,  453,  453,  453,  453,  453,  453,  453,  454,  280,
 /*  1560 */   454,  352,  454,  454,  454,  454,  454,  454,  454,  454,
 /*  1570 */   454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
 /*  1580 */   454,  454,  454,  359,  454,  454,  454,  454,  454,  454,
 /*  1590 */   454,  296,  454,  454,  454,  454,  454,  454,  454,  454,
 /*  1600 */   454,  238,  454,  196,  357,   11,  454,  454,  454,  454,
 /*  1610 */   454,  454,  454,  454,  454,  454,  454,  209,  237,  210,
 /*  1620 */   196,  174,   11,  175,  208,   11,  261,  454,  454,  454,
 /*  1630 */   454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
 /*  1640 */   455,  244,  455,  612,  455,  455,  455,  455,  455,  455,
 /*  1650 */   455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
 /*  1660 */   455,  455,  455,  455,  455,  612,  455,  455,  455,  455,
 /*  1670 */   455,  455,  455,  284,  455,  455,  455,  455,  455,  455,
 /*  1680 */   455,  455,  455,  166,  455,  196,  612,   11,  455,  455,
 /*  1690 */   455,  455,  455,  455,  455,  455,  455,  455,  455,  612,
 /*  1700 */   165,  612,  196,  174,   11,  175,  612,   11,  612,  455,
 /*  1710 */   455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
 /*  1720 */   455,  455,  456,  612,  456,  612,  456,  456,  456,  456,
 /*  1730 */   456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
 /*  1740 */   456,  456,  456,  456,  456,  456,  456,  612,  456,  456,
 /*  1750 */   456,  456,  456,  456,  456,  281,  456,  456,  456,  456,
 /*  1760 */   456,  456,  456,  456,  456,  164,  456,  196,  612,   11,
 /*  1770 */   456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
 /*  1780 */   456,  612,  163,  612,  196,  174,   11,  175,  612,   11,
 /*  1790 */   612,  456,  456,  456,  456,  456,  456,  456,  456,  456,
 /*  1800 */   456,  456,  456,  456,  457,  612,  457,  612,  457,  457,
 /*  1810 */   457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
 /*  1820 */   457,  457,  457,  457,  457,  457,  457,  457,  457,  612,
 /*  1830 */   457,  457,  457,  457,  457,  457,  457,  279,  457,  457,
 /*  1840 */   457,  457,  457,  457,  457,  457,  457,  223,  457,  196,
 /*  1850 */   612,   11,  457,  457,  457,  457,  457,  457,  457,  457,
 /*  1860 */   457,  457,  457,  612,  222,  612,  196,  174,   11,  175,
 /*  1870 */   612,   11,  612,  457,  457,  457,  457,  457,  457,  457,
 /*  1880 */   457,  457,  457,  457,  457,  457,  557,  612,  557,  612,
 /*  1890 */   557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
 /*  1900 */   557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
 /*  1910 */   557,  612,  557,  557,  557,  557,  557,  557,  557,  612,
 /*  1920 */   557,  557,  557,  557,  557,  557,  557,  557,  557,  221,
 /*  1930 */   557,  196,  612,   11,  557,  557,  557,  557,  557,  557,
 /*  1940 */   557,  557,  557,  557,  557,  429,  585,  612,  430,  429,
 /*  1950 */   429,  612,  430,  430,  612,  557,  557,  557,  557,  557,
 /*  1960 */   557,  557,  557,  557,  557,  557,  557,  557,  560,  612,
 /*  1970 */   560,  585,  560,  560,  560,  560,  560,  560,  560,  560,
 /*  1980 */   560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
 /*  1990 */   560,  560,  560,  612,  560,  560,  560,  560,  560,  560,
 /*  2000 */   560,  578,  560,  560,  560,  560,  560,  560,  560,  560,
 /*  2010 */   560,  220,  560,  196,  612,   11,  560,  560,  560,  560,
 /*  2020 */   560,  560,  560,  560,  560,  560,  560,  314,  345,  344,
 /*  2030 */     4,  100,  311,  244,  324,  612,  612,  560,  560,  560,
 /*  2040 */   560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
 /*  2050 */   563,  612,  563,  612,  563,  563,  563,  563,  563,  563,
 /*  2060 */   563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
 /*  2070 */   563,  563,  563,  563,  563,  612,  563,  563,  563,  563,
 /*  2080 */   563,  563,  563,  612,  563,  563,  563,  563,  563,  563,
 /*  2090 */   563,  563,  563,  219,  563,  196,  612,   11,  563,  563,
 /*  2100 */   563,  563,  563,  563,  563,  563,  563,  563,  563,  218,
 /*  2110 */   217,  196,  196,   11,   11,  612,  612,  612,  612,  563,
 /*  2120 */   563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
 /*  2130 */   563,  563,  579,  612,  579,  612,  579,  579,  579,  579,
 /*  2140 */   579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
 /*  2150 */   579,  579,  579,  579,  579,  579,  579,  612,  579,  579,
 /*  2160 */   579,  579,  579,  579,  579,  612,  579,  579,  579,  579,
 /*  2170 */   579,  579,  579,  579,  579,  216,  579,  196,  612,   11,
 /*  2180 */   579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
 /*  2190 */   579,  215,  214,  196,  196,   11,   11,  612,  612,  612,
 /*  2200 */   612,  579,  579,  579,  579,  579,  579,  579,  579,  579,
 /*  2210 */   579,  579,  579,  579,  582,  612,  582,  612,  582,  582,
 /*  2220 */   582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
 /*  2230 */   582,  582,  582,  582,  582,  582,  582,  582,  582,  612,
 /*  2240 */   582,  582,  582,  582,  582,  582,  582,  612,  582,  582,
 /*  2250 */   582,  582,  582,  582,  582,  582,  582,  213,  582,  196,
 /*  2260 */   612,   11,  582,  582,  582,  582,  582,  582,  582,  582,
 /*  2270 */   582,  582,  582,  236,  235,  196,  196,   11,   11,  612,
 /*  2280 */   612,  612,  612,  582,  582,  582,  582,  582,  582,  582,
 /*  2290 */   582,  582,  582,  582,  582,  582,  599,  612,  599,  612,
 /*  2300 */   599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
 /*  2310 */   599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
 /*  2320 */   599,  612,  599,  599,  599,  599,  599,  599,  599,  612,
 /*  2330 */   599,  599,  599,  599,  599,  599,  599,  599,  599,  234,
 /*  2340 */   599,  196,  612,   11,  599,  599,  599,  599,  599,  599,
 /*  2350 */   599,  599,  599,  599,  599,  233,  232,  196,  196,   11,
 /*  2360 */    11,  612,  612,  612,  612,  599,  599,  599,  599,  599,
 /*  2370 */   599,  599,  599,  599,  599,  599,  599,  599,  602,  612,
 /*  2380 */   602,  612,  602,  602,  602,  602,  602,  602,  602,  602,
 /*  2390 */   602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
 /*  2400 */   602,  602,  602,  612,  602,  602,  602,  602,  602,  602,
 /*  2410 */   602,  485,  602,  602,  602,  602,  602,  602,  602,  602,
 /*  2420 */   602,  586,  602,  612,  612,  612,  602,  602,  602,  602,
 /*  2430 */   602,  602,  602,  602,  602,  602,  602,  612,  587,  612,
 /*  2440 */   612,  612,  485,  612,  612,  612,  586,  602,  602,  602,
 /*  2450 */   602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
 /*  2460 */   608,  612,  608,  587,  608,  608,  608,  608,  608,  608,
 /*  2470 */   608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
 /*  2480 */   608,  608,  608,  608,  608,  612,  608,  608,  608,  608,
 /*  2490 */   608,  608,  608,  487,  608,  608,  608,  608,  608,  608,
 /*  2500 */   608,  608,  608,   19,  608,  612,  612,  612,  608,  608,
 /*  2510 */   608,  608,  608,  608,  608,  608,  608,  608,  608,  612,
 /*  2520 */   588,  612,  612,  612,  487,  612,  612,  612,  589,  608,
 /*  2530 */   608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
 /*  2540 */   608,  608,  566,  612,  566,  588,  566,  566,  566,  566,
 /*  2550 */   566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
 /*  2560 */   566,  566,  566,  566,  566,  566,  566,  612,  566,  566,
 /*  2570 */   566,  566,  566,  566,  566,   30,  566,  566,  566,  566,
 /*  2580 */   566,  566,  566,  566,  566,   95,  566,  612,  612,  612,
 /*  2590 */   566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
 /*  2600 */   566,  612,   95,  612,  612,  612,  490,  612,  612,  612,
 /*  2610 */   476,  566,  566,  566,  566,  566,  566,  566,  566,  566,
 /*  2620 */   566,  566,  566,  566,  565,  612,  211,  532,  565,  565,
 /*  2630 */   565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
 /*  2640 */   565,  565,  565,  565,  565,  565,  565,  565,  565,  612,
 /*  2650 */   565,  565,  565,  565,  565,  565,  565,  488,  565,  565,
 /*  2660 */   565,  565,  565,  565,  565,  565,  565,   95,  565,  612,
 /*  2670 */   612,  612,  565,  565,  565,  565,  565,  565,  565,  565,
 /*  2680 */   565,  565,  565,  612,  612,  612,  612,  612,  488,  612,
 /*  2690 */   612,  612,  534,  565,  565,  565,  565,  565,  565,  565,
 /*  2700 */   565,  565,  565,  565,  565,  565,  520,  520,  520,  520,
 /*  2710 */   520,  520,  520,  520,  520,  520,  520,   81,   80,   82,
 /*  2720 */    84,   83,   89,   88,   86,   87,   85,  612,  520,   25,
 /*  2730 */    94,  390,  520,  520,  591,  592,  520,  520,  520,  463,
 /*  2740 */   520,  520,  395,  520,  520,  322,  520,   41,  612,  351,
 /*  2750 */   520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
 /*  2760 */   520,  612,  612,  612,  463,  591,  592,  612,   92,  267,
 /*  2770 */   463,  520,  520,  520,  529,  612,  520,  520,  520,  520,
 /*  2780 */   520,  520,  520,  520,  521,  521,  521,  521,  521,  521,
 /*  2790 */   521,  521,  521,  521,  521,   81,   80,   82,   84,   83,
 /*  2800 */    89,   88,   86,   87,   85,  612,  521,   25,   94,  390,
 /*  2810 */   521,  521,   21,  593,  521,  521,  521,  543,  521,  521,
 /*  2820 */   321,  521,  521,  322,  521,   32,  612,  351,  521,  521,
 /*  2830 */   521,  521,  521,  521,  521,  521,  521,  521,  521,  612,
 /*  2840 */   612,  612,  543,  595,  593,  612,  612,  267,  543,  521,
 /*  2850 */   521,  521,  529,  612,  521,  521,  521,  521,  521,  521,
 /*  2860 */   521,  521,  522,  522,  522,  522,  522,  522,  522,  522,
 /*  2870 */   522,  522,  522,   81,   80,   82,   84,   83,   89,   88,
 /*  2880 */    86,   87,   85,  612,  522,   25,   94,  390,  522,  522,
 /*  2890 */    95,   48,  522,  522,  522,  545,  522,  522,  312,  522,
 /*  2900 */   522,  322,  522,  612,  612,  612,  522,  522,  522,  522,
 /*  2910 */   522,  522,  522,  522,  522,  522,  522,  612,  612,  612,
 /*  2920 */   545,  601,  497,  612,  612,  267,  545,  522,  522,  522,
 /*  2930 */   612,  612,  522,  522,  522,  522,  522,  522,  522,  522,
 /*  2940 */   523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
 /*  2950 */   523,   81,   80,   82,   84,   83,   89,   88,   86,   87,
 /*  2960 */    85,  612,  523,   25,   94,  390,  523,  523,  612,  612,
 /*  2970 */   523,  523,  523,   95,  523,  523,  612,  523,  523,  612,
 /*  2980 */   523,  612,  612,  612,  523,  523,  523,  523,  523,  523,
 /*  2990 */   523,  523,  523,  523,  523,  612,  612,  612,  541,  612,
 /*  3000 */   612,  612,  612,  612,  541,  523,  523,  523,  612,  612,
 /*  3010 */   523,  523,  523,  523,  523,  523,  523,  523,  524,  524,
 /*  3020 */   524,  524,  524,  524,  524,  524,  524,  524,  524,   81,
 /*  3030 */    80,   82,   84,   83,   89,   88,   86,   87,   85,  612,
 /*  3040 */   524,   25,   94,  390,  524,  524,  612,  612,  524,  524,
 /*  3050 */   524,  542,  524,  524,  612,  524,  524,  612,  524,  612,
 /*  3060 */   612,  612,  524,  524,  524,  524,  524,  524,  524,  524,
 /*  3070 */   524,  524,  524,  612,  612,  612,  542,  612,  612,  612,
 /*  3080 */   612,  612,  542,  524,  524,  524,  612,  612,  524,  524,
 /*  3090 */   524,  524,  524,  524,  524,  524,  525,  525,  525,  525,
 /*  3100 */   525,  525,  525,  525,  525,  525,  525,   81,   80,   82,
 /*  3110 */    84,   83,   89,   88,   86,   87,   85,  612,  525,   25,
 /*  3120 */    94,  390,  525,  525,  612,  612,  525,  525,  525,  544,
 /*  3130 */   525,  525,  612,  525,  525,  612,  525,  612,  612,  612,
 /*  3140 */   525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
 /*  3150 */   525,  612,  612,  612,  544,  612,  612,  612,  612,  612,
 /*  3160 */   544,  525,  525,  525,  612,  612,  525,  525,  525,  525,
 /*  3170 */   525,  525,  525,  525,  494,  494,  494,  494,  494,  494,
 /*  3180 */   494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
 /*  3190 */   494,  494,  494,  494,  494,  612,  494,  494,  394,  494,
 /*  3200 */   494,  494,  612,  612,  494,  494,  494,  101,  494,  494,
 /*  3210 */   612,  494,  494,  612,  494,  612,  612,  612,  494,  494,
 /*  3220 */   494,  494,  494,  494,  494,  494,  494,  494,  494,  612,
 /*  3230 */   612,  612,  465,  612,  612,  612,  612,  612,  465,  494,
 /*  3240 */   494,  494,  612,  612,  494,  494,  494,  494,  494,  494,
 /*  3250 */   494,  494,  472,  472,  472,  472,  472,  472,  472,  472,
 /*  3260 */   472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
 /*  3270 */   472,  472,  472,  612,  472,  472,  472,  472,  472,  472,
 /*  3280 */   612,  612,  472,  472,  472,  612,  472,  472,  612,  472,
 /*  3290 */   472,  612,  472,  612,  612,  612,  472,  472,  472,  472,
 /*  3300 */   472,  472,  472,  472,  472,  472,  472,  612,  612,  612,
 /*  3310 */   612,  612,  612,  612,  612,  612,  612,  472,  472,  472,
 /*  3320 */   612,  612,  472,  472,  472,  472,  472,  472,  472,  472,
 /*  3330 */    91,  474,   72,   73,  474,   79,   77,   75,   76,   74,
 /*  3340 */    78,   81,   80,   82,   84,   83,   89,   88,   86,   87,
 /*  3350 */    85,  612,  474,   25,   94,  390,  474,  474,  612,  612,
 /*  3360 */   474,  474,  474,  612,  474,  474,  612,  474,  474,  612,
 /*  3370 */   474,  612,  612,  612,  474,  474,  474,  474,  474,  474,
 /*  3380 */   474,  474,  474,  474,  474,  612,  612,  612,  612,  612,
 /*  3390 */   612,  612,  612,  612,  612,  474,  474,  474,  612,  612,
 /*  3400 */   474,  474,  474,  474,  474,  474,  474,  474,  480,  480,
 /*  3410 */   480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
 /*  3420 */   480,  480,  480,  480,  480,  480,  480,  480,  480,  612,
 /*  3430 */   480,  480,  480,  480,  480,  480,  612,  612,  480,  480,
 /*  3440 */   480,  612,  480,  480,  612,  480,  480,  612,  480,  612,
 /*  3450 */   612,  612,  480,  480,  480,  480,  480,  480,  480,  480,
 /*  3460 */   480,  480,  480,  612,  612,  612,  612,  612,  612,  612,
 /*  3470 */   612,  612,  612,  480,  480,  480,  612,  612,  480,  480,
 /*  3480 */   480,  480,  480,  480,  480,  480,  477,  477,  477,  477,
 /*  3490 */   477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
 /*  3500 */   477,  477,  477,  477,  477,  477,  477,  612,  477,  477,
 /*  3510 */   477,  477,  477,  477,  612,  612,  477,  477,  477,  612,
 /*  3520 */   477,  477,  612,  477,  477,  612,  477,  612,  612,  612,
 /*  3530 */   477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
 /*  3540 */   477,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  3550 */   612,  477,  477,  477,  612,  612,  477,  477,  477,  477,
 /*  3560 */   477,  477,  477,  477,  478,  478,  478,  478,  478,  478,
 /*  3570 */   478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
 /*  3580 */   478,  478,  478,  478,  478,  612,  478,   27,  478,  478,
 /*  3590 */   478,  478,  612,  612,  478,  478,  478,  612,  478,  478,
 /*  3600 */   612,  478,  478,  612,  478,  612,  612,  612,  478,  478,
 /*  3610 */   478,  478,  478,  478,  478,  478,  478,  478,  478,  612,
 /*  3620 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  478,
 /*  3630 */   478,  478,  612,  612,  478,  478,  478,  478,  478,  478,
 /*  3640 */   478,  478,  479,  479,  479,  479,  479,  479,  479,  479,
 /*  3650 */   479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
 /*  3660 */   479,  479,  479,  612,  479,   26,  479,  479,  479,  479,
 /*  3670 */   612,  612,  479,  479,  479,  612,  479,  479,  612,  479,
 /*  3680 */   479,  612,  479,  612,  612,  612,  479,  479,  479,  479,
 /*  3690 */   479,  479,  479,  479,  479,  479,  479,  612,  612,  612,
 /*  3700 */   612,  612,  612,  612,  612,  612,  612,  479,  479,  479,
 /*  3710 */   612,  612,  479,  479,  479,  479,  479,  479,  479,  479,
 /*  3720 */    91,  506,   72,   73,  506,   79,   77,   75,   76,   74,
 /*  3730 */    78,   81,   80,   82,   84,   83,   89,   88,   86,   87,
 /*  3740 */    85,  612,  506,   25,   94,  390,  506,  506,  612,  612,
 /*  3750 */   506,  506,  506,  612,  506,  506,  612,  506,  506,  612,
 /*  3760 */   506,  612,  612,  612,  506,  506,  506,  506,  506,  506,
 /*  3770 */   506,  506,  506,  506,  506,  612,  612,  612,  612,  612,
 /*  3780 */   612,  612,  612,  612,  612,  506,  506,  506,  612,  612,
 /*  3790 */   506,  506,  506,  506,  506,  506,  506,  506,  507,  507,
 /*  3800 */   507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
 /*  3810 */   507,  507,  507,  507,  507,  507,   86,   87,   85,  612,
 /*  3820 */   507,   25,   94,  390,  507,  507,  612,  612,  507,  507,
 /*  3830 */   507,  612,  507,  507,  612,  507,  507,  612,  507,  612,
 /*  3840 */   612,  612,  507,  507,  507,  507,  507,  507,  507,  507,
 /*  3850 */   507,  507,  507,  612,  612,  612,  612,  612,  612,  612,
 /*  3860 */   612,  612,  612,  507,  507,  507,  612,  612,  507,  507,
 /*  3870 */   507,  507,  507,  507,  507,  507,  508,  508,  508,  508,
 /*  3880 */   508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
 /*  3890 */   508,  508,  508,  508,   86,   87,   85,  612,  508,   25,
 /*  3900 */    94,  390,  508,  508,  612,  612,  508,  508,  508,  612,
 /*  3910 */   508,  508,  612,  508,  508,  612,  508,  612,  612,  612,
 /*  3920 */   508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
 /*  3930 */   508,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  3940 */   612,  508,  508,  508,  612,  612,  508,  508,  508,  508,
 /*  3950 */   508,  508,  508,  508,  509,  509,  509,  509,  509,  509,
 /*  3960 */   509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
 /*  3970 */   509,  509,  509,  509,  509,  612,  509,   25,   94,  390,
 /*  3980 */   509,  509,  612,  612,  509,  509,  509,  612,  509,  509,
 /*  3990 */   612,  509,  509,  612,  509,  612,  612,  612,  509,  509,
 /*  4000 */   509,  509,  509,  509,  509,  509,  509,  509,  509,  612,
 /*  4010 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  509,
 /*  4020 */   509,  509,  612,  612,  509,  509,  509,  509,  509,  509,
 /*  4030 */   509,  509,  510,  510,  510,  510,  510,  510,  510,  510,
 /*  4040 */   510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
 /*  4050 */   510,  510,  510,  612,  510,   25,   94,  390,  510,  510,
 /*  4060 */   612,  612,  510,  510,  510,  612,  510,  510,  612,  510,
 /*  4070 */   510,  612,  510,  612,  612,  612,  510,  510,  510,  510,
 /*  4080 */   510,  510,  510,  510,  510,  510,  510,  612,  612,  612,
 /*  4090 */   612,  612,  612,  612,  612,  612,  612,  510,  510,  510,
 /*  4100 */   612,  612,  510,  510,  510,  510,  510,  510,  510,  510,
 /*  4110 */   511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
 /*  4120 */   511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
 /*  4130 */   511,  612,  511,   25,   94,  390,  511,  511,  612,  612,
 /*  4140 */   511,  511,  511,  612,  511,  511,  612,  511,  511,  612,
 /*  4150 */   511,  612,  612,  612,  511,  511,  511,  511,  511,  511,
 /*  4160 */   511,  511,  511,  511,  511,  612,  612,  612,  612,  612,
 /*  4170 */   612,  612,  612,  612,  612,  511,  511,  511,  612,  612,
 /*  4180 */   511,  511,  511,  511,  511,  511,  511,  511,  512,  512,
 /*  4190 */   512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
 /*  4200 */   512,  512,  512,  512,   89,   88,   86,   87,   85,  612,
 /*  4210 */   512,   25,   94,  390,  512,  512,  612,  612,  512,  512,
 /*  4220 */   512,  612,  512,  512,  612,  512,  512,  612,  512,  612,
 /*  4230 */   612,  612,  512,  512,  512,  512,  512,  512,  512,  512,
 /*  4240 */   512,  512,  512,  612,  612,  612,  612,  612,  612,  612,
 /*  4250 */   612,  612,  612,  512,  512,  512,  612,  612,  512,  512,
 /*  4260 */   512,  512,  512,  512,  512,  512,  513,  513,  513,  513,
 /*  4270 */   513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
 /*  4280 */   513,  513,   89,   88,   86,   87,   85,  612,  513,   25,
 /*  4290 */    94,  390,  513,  513,  612,  612,  513,  513,  513,  612,
 /*  4300 */   513,  513,  612,  513,  513,  612,  513,  612,  612,  612,
 /*  4310 */   513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
 /*  4320 */   513,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  4330 */   612,  513,  513,  513,  612,  612,  513,  513,  513,  513,
 /*  4340 */   513,  513,  513,  513,  514,  514,  514,  514,  514,  514,
 /*  4350 */   514,  514,  514,  514,  514,  514,  514,  514,   84,   83,
 /*  4360 */    89,   88,   86,   87,   85,  612,  514,   25,   94,  390,
 /*  4370 */   514,  514,  612,  612,  514,  514,  514,  612,  514,  514,
 /*  4380 */   612,  514,  514,  612,  514,  612,  612,  612,  514,  514,
 /*  4390 */   514,  514,  514,  514,  514,  514,  514,  514,  514,  612,
 /*  4400 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  514,
 /*  4410 */   514,  514,  612,  612,  514,  514,  514,  514,  514,  514,
 /*  4420 */   514,  514,  515,  515,  515,  515,  515,  515,  515,  515,
 /*  4430 */   515,  515,  515,  515,   80,   82,   84,   83,   89,   88,
 /*  4440 */    86,   87,   85,  612,  515,   25,   94,  390,  515,  515,
 /*  4450 */   612,  612,  515,  515,  515,  612,  515,  515,  612,  515,
 /*  4460 */   515,  612,  515,  612,  612,  612,  515,  515,  515,  515,
 /*  4470 */   515,  515,  515,  515,  515,  515,  515,  612,  612,  612,
 /*  4480 */   612,  612,  612,  612,  612,  612,  612,  515,  515,  515,
 /*  4490 */   612,  612,  515,  515,  515,  515,  515,  515,  515,  515,
 /*  4500 */   516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
 /*  4510 */   516,  516,  516,   82,   84,   83,   89,   88,   86,   87,
 /*  4520 */    85,  612,  516,   25,   94,  390,  516,  516,  612,  612,
 /*  4530 */   516,  516,  516,  612,  516,  516,  612,  516,  516,  612,
 /*  4540 */   516,  612,  612,  612,  516,  516,  516,  516,  516,  516,
 /*  4550 */   516,  516,  516,  516,  516,  612,  612,  612,  612,  612,
 /*  4560 */   612,  612,  612,  612,  612,  516,  516,  516,  612,  612,
 /*  4570 */   516,  516,  516,  516,  516,  516,  516,  516,  526,  526,
 /*  4580 */   526,  526,  526,   79,   77,   75,   76,   74,   78,   81,
 /*  4590 */    80,   82,   84,   83,   89,   88,   86,   87,   85,  612,
 /*  4600 */   526,   25,   94,  390,  526,  526,  612,  612,  526,  526,
 /*  4610 */   526,  612,  526,  526,  612,  526,  526,  612,  526,  612,
 /*  4620 */   612,  612,  526,  526,  526,  526,  526,  526,  526,  526,
 /*  4630 */   526,  526,  526,  612,  612,  612,  612,  612,  612,  612,
 /*  4640 */   612,  612,  612,  526,  526,  526,  612,  612,  526,  526,
 /*  4650 */   526,  526,  526,  526,  526,  526,  527,  527,  527,   73,
 /*  4660 */   527,   79,   77,   75,   76,   74,   78,   81,   80,   82,
 /*  4670 */    84,   83,   89,   88,   86,   87,   85,  612,  527,   25,
 /*  4680 */    94,  390,  527,  527,  612,  612,  527,  527,  527,  612,
 /*  4690 */   527,  527,  612,  527,  527,  612,  527,  612,  612,  612,
 /*  4700 */   527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
 /*  4710 */   527,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  4720 */   612,  527,  527,  527,  612,  612,  527,  527,  527,  527,
 /*  4730 */   527,  527,  527,  527,  495,  495,  495,  495,  495,  495,
 /*  4740 */   495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
 /*  4750 */   495,  495,  495,  495,  495,  612,  495,  495,  495,  495,
 /*  4760 */   495,  495,  612,  612,  495,  495,  495,  612,  495,  495,
 /*  4770 */   612,  495,  495,  612,  495,  612,  612,  612,  495,  495,
 /*  4780 */   495,  495,  495,  495,  495,  495,  495,  495,  495,  612,
 /*  4790 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  495,
 /*  4800 */   495,  495,  612,  612,  495,  495,  495,  495,  495,  495,
 /*  4810 */   495,  495,  494,  494,  494,  494,  494,  494,  494,  494,
 /*  4820 */   494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
 /*  4830 */   494,  494,  494,  612,  494,  494,  376,  494,  494,  494,
 /*  4840 */   612,  612,  494,  494,  494,  612,  494,  494,  612,  494,
 /*  4850 */   494,  612,  494,  612,  612,  612,  494,  494,  494,  494,
 /*  4860 */   494,  494,  494,  494,  494,  494,  494,  612,  612,  612,
 /*  4870 */   612,  612,  612,  612,  612,  612,  612,  494,  494,  494,
 /*  4880 */   612,  612,  494,  494,  494,  494,  494,  494,  494,  494,
 /*  4890 */    91,  473,   72,   73,  473,   79,   77,   75,   76,   74,
 /*  4900 */    78,   81,   80,   82,   84,   83,   89,   88,   86,   87,
 /*  4910 */    85,  612,  473,   25,   94,  390,  473,  473,  612,  612,
 /*  4920 */   473,  473,  473,  612,  473,  473,  612,  473,  473,  612,
 /*  4930 */   473,  612,  612,  612,  473,  473,  473,  473,  473,  473,
 /*  4940 */   473,  473,  473,  473,  473,  612,  612,  612,  612,  612,
 /*  4950 */   612,  612,  612,  612,  612,  473,  473,  473,  612,  612,
 /*  4960 */   473,  473,  473,  473,  473,  473,  473,  473,  499,  499,
 /*  4970 */   499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
 /*  4980 */   499,  499,  499,  499,  499,  499,  499,  499,  499,  612,
 /*  4990 */   499,  499,  499,  499,  499,  499,  612,  612,  499,  499,
 /*  5000 */   499,  612,  499,  499,  612,  499,  499,  612,  499,  612,
 /*  5010 */   612,  612,  499,  499,  499,  499,  499,  499,  499,  499,
 /*  5020 */   499,  499,  499,  612,  612,  612,  612,  612,  612,  612,
 /*  5030 */   612,  612,  612,  499,  499,  499,  612,  612,  499,  499,
 /*  5040 */   499,  499,  499,  499,  499,  499,  500,  500,  500,  500,
 /*  5050 */   500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
 /*  5060 */   500,  500,  500,  500,  500,  500,  500,  612,  500,  500,
 /*  5070 */   500,  500,  500,  500,  612,  612,  500,  500,  500,  612,
 /*  5080 */   500,  500,  612,  500,  500,  612,  500,  612,  612,  612,
 /*  5090 */   500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
 /*  5100 */   500,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  5110 */   612,  500,  500,  500,  612,  612,  500,  500,  500,  500,
 /*  5120 */   500,  500,  500,  500,  501,  501,  501,  501,  501,  501,
 /*  5130 */   501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
 /*  5140 */   501,  501,  501,  501,  501,  612,  501,  501,  501,  501,
 /*  5150 */   501,  501,  612,  612,  501,  501,  501,  612,  501,  501,
 /*  5160 */   612,  501,  501,  612,  501,  612,  612,  612,  501,  501,
 /*  5170 */   501,  501,  501,  501,  501,  501,  501,  501,  501,  612,
 /*  5180 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  501,
 /*  5190 */   501,  501,  612,  612,  501,  501,  501,  501,  501,  501,
 /*  5200 */   501,  501,  502,  502,  502,  502,  502,  502,  502,  502,
 /*  5210 */   502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
 /*  5220 */   502,  502,  502,  612,  502,  502,  502,  502,  502,  502,
 /*  5230 */   612,  612,  502,  502,  502,  612,  502,  502,  612,  502,
 /*  5240 */   502,  612,  502,  612,  612,  612,  502,  502,  502,  502,
 /*  5250 */   502,  502,  502,  502,  502,  502,  502,  612,  612,  612,
 /*  5260 */   612,  612,  612,  612,  612,  612,  612,  502,  502,  502,
 /*  5270 */   612,  612,  502,  502,  502,  502,  502,  502,  502,  502,
 /*  5280 */   503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
 /*  5290 */   503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
 /*  5300 */   503,  612,  503,  503,  503,  503,  503,  503,  612,  612,
 /*  5310 */   503,  503,  503,  612,  503,  503,  612,  503,  503,  612,
 /*  5320 */   503,  612,  612,  612,  503,  503,  503,  503,  503,  503,
 /*  5330 */   503,  503,  503,  503,  503,  612,  612,  612,  612,  612,
 /*  5340 */   612,  612,  612,  612,  612,  503,  503,  503,  612,  612,
 /*  5350 */   503,  503,  503,  503,  503,  503,  503,  503,  504,  504,
 /*  5360 */   504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
 /*  5370 */   504,  504,  504,  504,  504,  504,  504,  504,  504,  612,
 /*  5380 */   504,  504,  504,  504,  504,  504,  612,  612,  504,  504,
 /*  5390 */   504,  612,  504,  504,  612,  504,  504,  612,  504,  612,
 /*  5400 */   612,  612,  504,  504,  504,  504,  504,  504,  504,  504,
 /*  5410 */   504,  504,  504,  612,  612,  612,  612,  612,  612,  612,
 /*  5420 */   612,  612,  612,  504,  504,  504,  612,  612,  504,  504,
 /*  5430 */   504,  504,  504,  504,  504,  504,  505,  505,  505,  505,
 /*  5440 */   505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
 /*  5450 */   505,  505,  505,  505,  505,  505,  505,  612,  505,  505,
 /*  5460 */   505,  505,  505,  505,  612,  612,  505,  505,  505,  612,
 /*  5470 */   505,  505,  612,  505,  505,  612,  505,  612,  612,  612,
 /*  5480 */   505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
 /*  5490 */   505,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  5500 */   612,  505,  505,  505,  612,  612,  505,  505,  505,  505,
 /*  5510 */   505,  505,  505,  505,  517,  517,  517,  517,  517,  517,
 /*  5520 */   517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
 /*  5530 */   517,  517,  517,  517,  517,  612,  517,   25,   94,  390,
 /*  5540 */   517,  517,  612,  612,  517,  517,  517,  612,  517,  517,
 /*  5550 */   612,  517,  517,  612,  517,  612,  612,  612,  517,  517,
 /*  5560 */   517,  517,  517,  517,  517,  517,  517,  517,  517,  612,
 /*  5570 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  517,
 /*  5580 */   517,  517,  612,  612,  517,  517,  517,  517,  517,  517,
 /*  5590 */   517,  517,  518,  518,  518,  518,  518,  518,  518,  518,
 /*  5600 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*  5610 */   518,  518,  518,  612,  518,   25,   94,  390,  518,  518,
 /*  5620 */   612,  612,  518,  518,  518,  612,  518,  518,  612,  518,
 /*  5630 */   518,  612,  518,  612,  612,  612,  518,  518,  518,  518,
 /*  5640 */   518,  518,  518,  518,  518,  518,  518,  612,  612,  612,
 /*  5650 */   612,  612,  612,  612,  612,  612,  612,  518,  518,  518,
 /*  5660 */   612,  612,  518,  518,  518,  518,  518,  518,  518,  518,
 /*  5670 */   519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
 /*  5680 */   519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
 /*  5690 */   519,  612,  519,   25,   94,  390,  519,  519,  612,  612,
 /*  5700 */   519,  519,  519,  612,  519,  519,  612,  519,  519,  612,
 /*  5710 */   519,  612,  612,  612,  519,  519,  519,  519,  519,  519,
 /*  5720 */   519,  519,  519,  519,  519,  612,  612,  612,  612,  612,
 /*  5730 */   612,  612,  612,  612,  612,  519,  519,  519,  612,  612,
 /*  5740 */   519,  519,  519,  519,  519,  519,  519,  519,  528,  528,
 /*  5750 */   528,  528,  528,   79,   77,   75,   76,   74,   78,   81,
 /*  5760 */    80,   82,   84,   83,   89,   88,   86,   87,   85,  612,
 /*  5770 */   528,   25,   94,  390,  528,  528,  612,  612,  528,  528,
 /*  5780 */   528,  612,  528,  528,  612,  528,  528,  612,  528,  612,
 /*  5790 */   612,  612,  528,  528,  528,  528,  528,  528,  528,  528,
 /*  5800 */   528,  528,  528,  612,  612,  612,  612,  612,  612,  612,
 /*  5810 */   612,  612,  612,  528,  528,  528,  612,  612,  528,  528,
 /*  5820 */   528,  528,  528,  528,  528,  528,  609,  609,  609,  609,
 /*  5830 */   609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
 /*  5840 */   609,  609,  609,  609,  609,  609,  609,  612,  609,  609,
 /*  5850 */   609,  609,  609,  609,  612,  612,  609,  609,  609,  612,
 /*  5860 */   609,  609,  612,  609,  609,  612,  609,  612,  612,  612,
 /*  5870 */   609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
 /*  5880 */   609,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  5890 */   612,  609,  609,  609,  612,  612,  609,  609,  609,  609,
 /*  5900 */   609,  609,  609,  609,  606,  606,  606,  606,  606,  606,
 /*  5910 */   606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
 /*  5920 */   606,  606,  606,  606,  606,  612,  606,  606,  606,  606,
 /*  5930 */   606,  606,  612,  612,  606,  606,  606,  612,  606,  606,
 /*  5940 */   612,  606,  606,  612,  606,  612,  612,  612,  606,  606,
 /*  5950 */   606,  606,  606,  606,  606,  606,  606,  606,  606,  612,
 /*  5960 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  606,
 /*  5970 */   606,  606,  612,  612,  606,  606,  606,  606,  606,  606,
 /*  5980 */   606,  606,  498,  498,  498,  498,  498,  498,  498,  498,
 /*  5990 */   498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
 /*  6000 */   498,  498,  498,  612,  498,  498,  498,  498,  498,  498,
 /*  6010 */   612,  612,  498,  498,  498,  612,  498,  498,  612,  498,
 /*  6020 */   498,  612,  498,  612,  612,  612,  498,  498,  498,  498,
 /*  6030 */   498,  498,  498,  498,  498,  498,  498,  612,  612,  612,
 /*  6040 */   612,  612,  612,  612,  612,  612,  612,  498,  498,  498,
 /*  6050 */   612,  612,  498,  498,  498,  498,  498,  498,  498,  498,
 /*  6060 */   483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
 /*  6070 */   483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
 /*  6080 */   483,  612,  483,  483,  483,  483,  483,  483,  612,  612,
 /*  6090 */   483,  483,  483,  612,  483,  483,  612,  483,  483,  612,
 /*  6100 */   483,  612,  612,  612,  483,  483,  483,  483,  483,  483,
 /*  6110 */   483,  483,  483,  483,  483,  612,  612,  612,  612,  612,
 /*  6120 */   612,  612,  612,  612,  612,  483,  483,  483,  612,  612,
 /*  6130 */   483,  483,  483,  483,  483,  483,  483,  483,  493,  493,
 /*  6140 */   493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
 /*  6150 */   493,  493,  493,  493,  493,  493,  493,  493,  493,  612,
 /*  6160 */   493,  493,  493,  493,  493,  493,  612,  612,  493,  493,
 /*  6170 */   493,  612,  493,  493,  612,  493,  493,  612,  493,  612,
 /*  6180 */   612,  612,  493,  493,  493,  493,  493,  493,  493,  493,
 /*  6190 */   493,  493,  493,  612,  612,  612,  612,  612,  612,  612,
 /*  6200 */   612,  612,  612,  493,  493,  493,  612,  612,  493,  493,
 /*  6210 */   493,  493,  493,  493,  493,  493,  492,  492,  492,  492,
 /*  6220 */   492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
 /*  6230 */   492,  492,  492,  492,  492,  492,  492,  612,  492,  492,
 /*  6240 */   492,  492,  492,  492,  612,  612,  492,  492,  492,  612,
 /*  6250 */   492,  492,  612,  492,  492,  612,  492,  612,  612,  612,
 /*  6260 */   492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
 /*  6270 */   492,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  6280 */   612,  492,  492,  492,  612,  612,  492,  492,  492,  492,
 /*  6290 */   492,  492,  492,  492,  607,  607,  607,  607,  607,  607,
 /*  6300 */   607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
 /*  6310 */   607,  607,  607,  607,  607,  612,  607,  607,  607,  607,
 /*  6320 */   607,  607,  612,  612,  607,  607,  607,  612,  607,  607,
 /*  6330 */   612,  607,  607,  612,  607,  612,  612,  612,  607,  607,
 /*  6340 */   607,  607,  607,  607,  607,  607,  607,  607,  607,  612,
 /*  6350 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  607,
 /*  6360 */   607,  607,  612,  612,  607,  607,  607,  607,  607,  607,
 /*  6370 */   607,  607,  481,  481,  481,  481,  481,  481,  481,  481,
 /*  6380 */   481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
 /*  6390 */   481,  481,  481,  612,  481,  481,  481,  481,  481,  481,
 /*  6400 */   612,  612,  481,  481,  481,  612,  481,  481,  612,  481,
 /*  6410 */   481,  612,  481,  612,  612,  612,  481,  481,  481,  481,
 /*  6420 */   481,  481,  481,  481,  481,  481,  481,  469,  612,  469,
 /*  6430 */   470,  612,  470,  612,  612,  612,  612,  481,  481,  481,
 /*  6440 */   612,  612,  481,  481,  481,  481,  481,  481,  481,  481,
 /*  6450 */   612,  388,  612,  612,  469,  612,  612,  470,  469,  386,
 /*  6460 */   612,  470,  143,  612,  612,  612,  612,  612,  159,  612,
 /*  6470 */   612,  612,  612,  147,    1,  612,  115,  612,  385,  384,
 /*  6480 */   383,  382,  381,  135,  134,  133,  132,  131,  130,  129,
 /*  6490 */   380,  379,  378,  612,  612,  242,  612,  224,  612,   11,
 /*  6500 */   612,  612,  612,  612,  245,  298,   10,  348,  347,   47,
 /*  6510 */   612,  612,  612,  342,  612,  612,  612,  612,  612,  612,
 /*  6520 */   340,  338,  337,   18,  612,  388,  612,  612,   49,   20,
 /*  6530 */   333,  110,  330,  386,  612,  612,  143,  612,  612,  612,
 /*  6540 */   612,  612,  125,  612,  612,  612,  612,  147,    1,  612,
 /*  6550 */   115,  612,  385,  384,  383,  382,  381,  135,  134,  133,
 /*  6560 */   132,  131,  130,  129,  380,  379,  378,  612,  612,  242,
 /*  6570 */   612,  224,  612,   11,  612,  612,  612,  612,  245,  298,
 /*  6580 */    10,  348,  347,   47,  612,  612,  612,  342,  612,  612,
 /*  6590 */   388,  612,  612,  612,  340,  338,  337,   18,  386,  612,
 /*  6600 */   612,  143,   49,   20,  333,  110,  330,  124,  612,  612,
 /*  6610 */   612,  612,  147,    1,  612,  115,  612,  385,  384,  383,
 /*  6620 */   382,  381,  135,  134,  133,  132,  131,  130,  129,  380,
 /*  6630 */   379,  378,  612,  612,  242,  612,  224,  612,   11,  612,
 /*  6640 */   612,  612,  612,  245,  298,   10,  348,  347,   47,  612,
 /*  6650 */   612,  612,  342,  612,  612,  612,  612,  612,  612,  340,
 /*  6660 */   338,  337,   18,  612,  388,  612,  612,   49,   20,  333,
 /*  6670 */   110,  330,  386,  612,  612,  143,  612,  612,  612,  612,
 /*  6680 */   612,  123,  612,  612,  612,  612,  147,    1,  612,  115,
 /*  6690 */   612,  385,  384,  383,  382,  381,  135,  134,  133,  132,
 /*  6700 */   131,  130,  129,  380,  379,  378,  612,  612,  242,  612,
 /*  6710 */   224,  612,   11,  612,  612,  612,  612,  245,  298,   10,
 /*  6720 */   348,  347,   47,  612,  612,  612,  342,  612,  612,  388,
 /*  6730 */   612,  612,  612,  340,  338,  337,   18,  386,  612,  612,
 /*  6740 */   143,   49,   20,  333,  110,  330,  121,  612,  612,  612,
 /*  6750 */   612,  147,    1,  612,  115,  612,  385,  384,  383,  382,
 /*  6760 */   381,  135,  134,  133,  132,  131,  130,  129,  380,  379,
 /*  6770 */   378,  612,  612,  242,  612,  224,  612,   11,  612,  612,
 /*  6780 */   612,  612,  245,  298,   10,  348,  347,   47,  612,  612,
 /*  6790 */   612,  342,  612,  612,  612,  612,  612,  612,  340,  338,
 /*  6800 */   337,   18,  612,  388,  612,  612,   49,   20,  333,  110,
 /*  6810 */   330,  386,  612,  612,  143,  612,  612,  612,  612,  612,
 /*  6820 */   120,  612,  612,  612,  612,  147,    1,  612,  115,  612,
 /*  6830 */   385,  384,  383,  382,  381,  135,  134,  133,  132,  131,
 /*  6840 */   130,  129,  380,  379,  378,  612,  612,  242,  612,  224,
 /*  6850 */   612,   11,  612,  612,  612,  612,  245,  298,   10,  348,
 /*  6860 */   347,   47,  612,  612,  612,  342,  612,  612,  388,  612,
 /*  6870 */   612,  612,  340,  338,  337,   18,  386,  612,  612,  143,
 /*  6880 */    49,   20,  333,  110,  330,  119,  612,  612,  612,  612,
 /*  6890 */   147,    1,  612,  115,  612,  385,  384,  383,  382,  381,
 /*  6900 */   135,  134,  133,  132,  131,  130,  129,  380,  379,  378,
 /*  6910 */   612,  612,  242,  612,  224,  612,   11,  612,  612,  612,
 /*  6920 */   612,  245,  298,   10,  348,  347,   47,  612,  612,  612,
 /*  6930 */   342,  612,  612,  612,  612,  612,  612,  340,  338,  337,
 /*  6940 */    18,  612,  388,  612,  612,   49,   20,  333,  110,  330,
 /*  6950 */   386,  612,  612,  143,  612,  612,  612,  612,  612,  117,
 /*  6960 */   612,  612,  612,  612,  147,    1,  612,  115,  612,  385,
 /*  6970 */   384,  383,  382,  381,  135,  134,  133,  132,  131,  130,
 /*  6980 */   129,  380,  379,  378,  612,  612,  242,  612,  224,  612,
 /*  6990 */    11,  612,  612,  612,  612,  245,  298,   10,  348,  347,
 /*  7000 */    47,  612,  612,  612,  342,  612,  612,  388,  612,  612,
 /*  7010 */   612,  340,  338,  337,   18,  386,  612,  612,  143,   49,
 /*  7020 */    20,  333,  110,  330,  247,  612,  612,  612,  612,  147,
 /*  7030 */     1,  612,  115,  612,  385,  384,  383,  382,  381,  135,
 /*  7040 */   134,  133,  132,  131,  130,  129,  380,  379,  378,  612,
 /*  7050 */   612,  242,  612,  224,  612,   11,  612,  612,  612,  612,
 /*  7060 */   245,  298,   10,  348,  347,   47,  612,  612,  612,  342,
 /*  7070 */   612,  612,  612,  612,  612,  612,  340,  338,  337,   18,
 /*  7080 */   612,  388,  612,  612,   49,   20,  333,  110,  330,  386,
 /*  7090 */   612,  612,  143,  612,  612,  612,  612,  612,  264,  612,
 /*  7100 */   612,  612,  612,  147,    1,  612,  115,  612,  385,  384,
 /*  7110 */   383,  382,  381,  135,  134,  133,  132,  131,  130,  129,
 /*  7120 */   380,  379,  378,  612,  612,  242,  612,  224,  612,   11,
 /*  7130 */   612,  612,  612,  612,  245,  298,   10,  348,  347,   47,
 /*  7140 */   612,  612,  612,  342,  612,  612,  387,  612,  612,  612,
 /*  7150 */   340,  338,  337,   18,  386,  612,  612,  143,   49,   20,
 /*  7160 */   333,  110,  330,  612,  612,  612,  612,  612,  198,    1,
 /*  7170 */   612,  115,   16,  385,  384,  383,  382,  381,  135,  134,
 /*  7180 */   133,  132,  131,  130,  129,  380,  379,  378,  612,  612,
 /*  7190 */   242,  612,  224,  612,   11,  612,  612,  612,  612,  245,
 /*  7200 */   298,   10,  348,  347,   47,  612,  612,  612,  342,  612,
 /*  7210 */   612,  612,  612,  612,  612,  340,  338,  337,   18,  612,
 /*  7220 */   203,  612,  612,   49,   20,  333,  110,  330,  386,  612,
 /*  7230 */   612,  143,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  7240 */   612,  612,  204,    1,  612,  115,  612,  385,  384,  383,
 /*  7250 */   382,  381,  135,  134,  133,  132,  131,  130,  129,  380,
 /*  7260 */   379,  378,  612,  612,  242,  612,  224,  612,   11,  612,
 /*  7270 */   612,  612,  612,  245,  298,   10,  348,  347,   47,  612,
 /*  7280 */   612,  612,  342,  612,  612,  612,  612,  612,  612,  340,
 /*  7290 */   338,  337,   18,  386,  612,  612,  143,   49,   20,  333,
 /*  7300 */   110,  330,  612,  612,  612,  612,  612,  198,    1,  612,
 /*  7310 */   115,   14,  385,  384,  383,  382,  381,  135,  134,  133,
 /*  7320 */   132,  131,  130,  129,  380,  379,  378,  612,  612,  242,
 /*  7330 */   612,  224,  612,   11,  612,  612,  612,  612,  245,  298,
 /*  7340 */    10,  348,  347,   47,  612,  612,  612,  342,  612,  612,
 /*  7350 */   612,  612,  612,  612,  340,  338,  337,   18,  612,  612,
 /*  7360 */   612,  612,   49,   20,  333,  110,  330,  386,  612,  612,
 /*  7370 */   143,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  7380 */   612,  198,    1,  612,  115,   12,  385,  384,  383,  382,
 /*  7390 */   381,  135,  134,  133,  132,  131,  130,  129,  380,  379,
 /*  7400 */   378,  612,  612,  242,  612,  224,  612,   11,  612,  288,
 /*  7410 */   289,  612,  245,  298,   10,  348,  347,   47,  612,  612,
 /*  7420 */   612,  342,  612,  242,  612,  224,  612,   11,  340,  338,
 /*  7430 */   337,   18,  245,  298,  612,  612,   49,   20,  333,  110,
 /*  7440 */   330,  612,  471,  612,  612,  471,  612,  612,  612,  612,
 /*  7450 */   612,  612,  612,  612,  287,  334,  612,  471,  471,  612,
 /*  7460 */   612,  612,  612,  471,  471,  471,  612,  471,  471,  612,
 /*  7470 */   612,  471,  471,  471,  612,  471,  471,  612,  471,  471,
 /*  7480 */   612,  471,  612,  295,  612,  471,  471,  471,  471,  471,
 /*  7490 */   471,  471,  471,  471,  471,  471,  612,  612,  612,  612,
 /*  7500 */   612,  612,  612,  294,  293,  292,  471,  471,  471,  612,
 /*  7510 */   612,  471,  471,  471,  471,  471,  471,  471,  471,  242,
 /*  7520 */   459,  196,  612,   11,  612,  612,  612,  612,  245,  298,
 /*  7530 */   612,  612,  459,  459,  612,  612,  612,  612,  459,  459,
 /*  7540 */   459,  407,  459,  459,  612,  612,  612,  459,  291,  335,
 /*  7550 */   459,  459,  459,  459,  612,  612,  459,  612,  612,  612,
 /*  7560 */   459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
 /*  7570 */   459,  612,  612,  407,  612,  612,  407,  612,  407,  407,
 /*  7580 */   407,  459,  459,  459,  459,  459,  459,  459,  459,  459,
 /*  7590 */   459,  459,  459,  459,  460,  612,  612,  407,  612,  612,
 /*  7600 */   612,  612,  612,  612,  612,  612,  460,  460,  612,  612,
 /*  7610 */   612,  612,  460,  460,  460,  612,  460,  460,  612,  612,
 /*  7620 */   612,  460,  612,  612,  460,  460,  460,  460,  612,  612,
 /*  7630 */   460,  612,  612,  612,  460,  460,  460,  460,  460,  460,
 /*  7640 */   460,  460,  460,  460,  460,  612,  612,  612,   64,  612,
 /*  7650 */   538,  612,  612,  612,  612,  460,  460,  460,  460,  460,
 /*  7660 */   460,  460,  460,  460,  460,  460,  460,  460,  535,  479,
 /*  7670 */   535,  479,  479,  612,  479,  479,  479,  479,  479,  479,
 /*  7680 */   479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
 /*  7690 */   612,  612,   26,  479,  479,  535,  612,  612,  612,  612,
 /*  7700 */   612,  535,  274,  273,   63,   62,   61,   60,   59,   58,
 /*  7710 */    57,   56,   55,   54,  612,  612,  612,  612,  612,  612,
 /*  7720 */   612,  612,  535,  535,  535,  535,  535,  535,  535,  535,
 /*  7730 */   535,  535,  535,  535,  537,  480,  537,  480,  480,  612,
 /*  7740 */   480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
 /*  7750 */   480,  480,  480,  480,  480,  480,  612,  612,  480,  480,
 /*  7760 */   480,  537,  612,  612,  612,  612,  612,  537,  612,  612,
 /*  7770 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  7780 */   612,  612,  612,  612,  612,  612,  612,  612,  537,  537,
 /*  7790 */   537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
 /*  7800 */   536,  481,  536,  481,  481,  612,  481,  481,  481,  481,
 /*  7810 */   481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
 /*  7820 */   481,  481,  288,  289,  481,  481,  481,  536,  612,  612,
 /*  7830 */   612,  612,  612,  536,  612,  612,  242,  612,  224,  612,
 /*  7840 */    11,  612,  612,  612,  612,  245,  298,  612,  612,  612,
 /*  7850 */   612,  612,  612,  612,  536,  536,  536,  536,  536,  536,
 /*  7860 */   536,  536,  536,  536,  536,  536,  569,  286,  612,  612,
 /*  7870 */   612,  612,  612,  612,  612,  612,  612,  612,  569,  569,
 /*  7880 */   612,  612,  612,  612,  569,  569,  569,  408,  569,  569,
 /*  7890 */   612,  612,  612,  569,  612,  612,  569,  569,  569,  569,
 /*  7900 */   612,  612,  569,  612,  612,  612,  569,  569,  569,  569,
 /*  7910 */   569,  569,  569,  569,  569,  569,  569,  612,  612,  408,
 /*  7920 */   612,  612,  408,  612,  408,  408,  408,  569,  569,  569,
 /*  7930 */   569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
 /*  7940 */   458,  612,  612,  408,  612,  612,  612,  612,  612,  612,
 /*  7950 */   612,  612,  458,  458,  612,  612,  612,  612,  458,  458,
 /*  7960 */   458,  409,  458,  458,  612,  612,  612,  458,  612,  612,
 /*  7970 */   458,  458,  458,  458,  612,  612,  458,  612,  612,  612,
 /*  7980 */   458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
 /*  7990 */   458,  612,  612,  409,  612,  612,  409,  612,  409,  409,
 /*  8000 */   409,  458,  458,  458,  458,  458,  458,  458,  458,  458,
 /*  8010 */   458,  458,  458,  458,   65,  612,  612,  409,  612,  612,
 /*  8020 */   612,  612,  612,  612,  612,  612,   68,   67,  612,  612,
 /*  8030 */   612,  612,   66,   70,   44,  410,  142,  202,  612,  612,
 /*  8040 */   612,  389,  612,  612,  206,  113,  570,  192,  612,  612,
 /*  8050 */   191,  612,  612,  612,  373,  372,  369,  366,  363,  360,
 /*  8060 */   358,  350,  111,   36,   35,  612,  612,  410,  612,  612,
 /*  8070 */   410,  612,  410,  410,  410,  212,  349,  343,  570,  570,
 /*  8080 */   339,  336,  332,  329,  328,   28,  356,  326,   65,  612,
 /*  8090 */   612,  410,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  8100 */    68,   67,  612,  612,  612,  612,   66,   70,   44,  612,
 /*  8110 */   142,  202,  612,  612,  612,  389,  612,  612,  206,  113,
 /*  8120 */   571,  192,  612,  612,  191,  612,  612,  612,  373,  372,
 /*  8130 */   369,  366,  363,  360,  358,  350,  111,   36,   35,  612,
 /*  8140 */   612,  612,  612,  612,  612,  612,  612,  612,  612,  212,
 /*  8150 */   349,  343,  571,  571,  339,  336,  332,  329,  328,   28,
 /*  8160 */   356,  326,   95,  612,  612,  422,  612,  612,  612,  612,
 /*  8170 */   612,  612,  612,  612,  612,  612,  612,  422,  422,  612,
 /*  8180 */   612,  612,  612,  422,  422,  422,  411,  422,  422,  612,
 /*  8190 */   612,  612,  422,  612,  612,  422,  422,  612,  422,  612,
 /*  8200 */   612,  422,  612,  612,  612,  422,  422,  422,  422,  422,
 /*  8210 */   422,  422,  422,  422,  422,  422,  612,  612,  411,  612,
 /*  8220 */   612,  411,  612,  411,  411,  411,  422,  422,  422,  612,
 /*  8230 */   612,  422,  422,  422,  422,  422,  422,  422,  422,  612,
 /*  8240 */   434,  612,  411,  612,  612,  612,  612,  612,  612,  612,
 /*  8250 */   612,  612,  434,  434,  612,  612,  612,  612,  434,  434,
 /*  8260 */   434,  612,  434,  434,  612,  612,  612,  434,  612,  612,
 /*  8270 */   434,  434,  434,  434,  612,  612,  434,  612,  295,  612,
 /*  8280 */   434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
 /*  8290 */   434,  612,  612,  612,  612,  612,  612,  612,  294,  293,
 /*  8300 */   292,  434,  434,  434,  612,  612,  434,  434,  434,  434,
 /*  8310 */   434,  434,  434,  434,  242,  574,  196,  612,   11,  612,
 /*  8320 */   612,  612,  612,  245,  298,  612,  612,  574,  574,  612,
 /*  8330 */   612,  612,  612,  574,  574,  574,  412,  574,  574,  612,
 /*  8340 */   612,  612,  574,  290,  612,  574,  574,  574,  574,  612,
 /*  8350 */   612,  574,  612,  612,  612,  574,  574,  574,  574,  574,
 /*  8360 */   574,  574,  574,  574,  574,  574,  612,  612,  412,  612,
 /*  8370 */   612,  412,  612,  412,  412,  412,  574,  574,  574,  612,
 /*  8380 */   612,  574,  574,  574,  574,  574,  574,  574,  574,  612,
 /*  8390 */   421,  612,  412,  612,  612,  612,  612,  612,  612,  612,
 /*  8400 */   612,  612,  421,  421,  612,  612,  612,  612,  421,  421,
 /*  8410 */   421,  413,  248,  421,  612,  612,   45,  421,  612,  612,
 /*  8420 */   421,  421,  612,  421,  612,  612,  421,  612,  612,  612,
 /*  8430 */   421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
 /*  8440 */   421,  612,  612,  413,  612,  612,  413,  612,  413,  413,
 /*  8450 */   413,  421,  421,  421,  612,  612,  421,  421,  421,  421,
 /*  8460 */   421,  421,  421,  421,  612,  421,  612,  413,  612,  612,
 /*  8470 */   612,  612,  612,  612,  612,  612,  612,  421,  421,  612,
 /*  8480 */   612,  612,  612,  421,  421,  421,  414,  421,  421,  612,
 /*  8490 */   612,   45,  421,  612,  612,  421,  421,  612,  421,  612,
 /*  8500 */   612,  421,  612,  612,  612,  421,  421,  421,  421,  421,
 /*  8510 */   421,  421,  421,  421,  421,  421,  612,  612,  414,  612,
 /*  8520 */   612,  414,  612,  414,  414,  414,  421,  421,  421,  612,
 /*  8530 */   612,  421,  421,  421,  421,  421,  421,  421,  421,  612,
 /*  8540 */    65,  612,  414,  612,  612,  612,  612,  612,  612,  612,
 /*  8550 */   612,  612,   68,   67,  612,  612,  612,  612,   66,   70,
 /*  8560 */    44,  415,  142,  202,  612,  612,  612,  389,  612,  612,
 /*  8570 */   206,  113,  439,  192,  612,  612,  191,  612,  612,  612,
 /*  8580 */   373,  372,  369,  366,  363,  360,  358,  350,  111,   36,
 /*  8590 */    35,  612,  612,  415,  612,  612,  415,  612,  415,  415,
 /*  8600 */   415,  212,  349,  343,  612,  612,  339,  336,  332,  329,
 /*  8610 */   328,   28,  356,  326,  612,   65,  612,  415,  612,  612,
 /*  8620 */   612,  612,  612,  612,  612,  612,  612,   68,   67,  612,
 /*  8630 */   612,  612,  612,   66,   70,   44,  416,  142,  202,  612,
 /*  8640 */   612,  612,  389,  612,  612,  206,  113,  575,  192,  612,
 /*  8650 */   612,  191,  612,  612,  612,  373,  372,  369,  366,  363,
 /*  8660 */   360,  358,  350,  111,   36,   35,  612,  612,  416,  612,
 /*  8670 */   612,  416,  612,  416,  416,  416,  212,  349,  343,  612,
 /*  8680 */   612,  339,  336,  332,  329,  328,   28,  356,  326,  612,
 /*  8690 */    65,  612,  416,  612,  612,  612,  612,  612,  612,  612,
 /*  8700 */   612,  612,   68,   67,  612,  612,  612,  612,   66,   70,
 /*  8710 */    44,  425,  142,  202,  612,  612,  612,  389,  612,  612,
 /*  8720 */   206,  113,  576,  192,  612,  612,  191,  612,  612,  612,
 /*  8730 */   373,  372,  369,  366,  363,  360,  358,  350,  111,   36,
 /*  8740 */    35,  612,  612,  425,  612,  612,  425,  612,  425,  425,
 /*  8750 */   425,  212,  349,  343,  612,  612,  339,  336,  332,  329,
 /*  8760 */   328,   28,  356,  326,  612,   65,  612,  425,  612,  612,
 /*  8770 */   612,  612,  612,  612,  612,  612,  612,   68,   67,  612,
 /*  8780 */   612,  612,  612,   66,   70,   44,  424,  142,  202,  612,
 /*  8790 */   612,  612,  389,  612,  612,  206,  113,  438,  192,  612,
 /*  8800 */   612,  191,  612,  612,  612,  373,  372,  369,  366,  363,
 /*  8810 */   360,  358,  350,  111,   36,   35,  612,  612,  424,  612,
 /*  8820 */   612,  424,  612,  424,  424,  424,  212,  349,  343,  612,
 /*  8830 */   612,  339,  336,  332,  329,  328,   28,  356,  326,  612,
 /*  8840 */   556,  612,  424,  612,  612,  612,  612,  612,  612,  612,
 /*  8850 */   612,  612,  556,  556,  612,  612,  612,  612,  556,  556,
 /*  8860 */   556,  431,  556,  556,  612,  612,  612,  556,  612,  612,
 /*  8870 */   556,  556,  612,  556,  612,  612,  556,  612,  612,  612,
 /*  8880 */   556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
 /*  8890 */   556,  612,  612,  431,  612,  612,  431,  612,  431,  431,
 /*  8900 */   431,  556,  556,  556,  612,  612,  556,  556,  556,  556,
 /*  8910 */   556,  556,  556,  556,  612,  564,  612,  431,  612,  612,
 /*  8920 */   612,  612,  612,  612,  612,  612,  612,  564,  564,  612,
 /*  8930 */   612,  612,  612,  564,  564,  564,  405,  564,  564,  612,
 /*  8940 */   612,  612,  564,  612,  612,  564,  564,  612,  564,  612,
 /*  8950 */   612,  564,  612,  612,  612,  564,  564,  564,  564,  564,
 /*  8960 */   564,  564,  564,  564,  564,  564,  612,  612,  116,  612,
 /*  8970 */   612,  397,  612,  317,  206,  109,  564,  346,  564,  612,
 /*  8980 */   612,  564,  564,  564,  564,  564,  564,  564,  564,  612,
 /*  8990 */   482,  612,  108,  612,  612,  612,  612,  612,  612,  612,
 /*  9000 */   612,  612,  482,  482,  612,  612,  612,  612,  482,  482,
 /*  9010 */   482,  406,  482,  482,  612,  612,  612,  482,  612,  612,
 /*  9020 */   482,  482,  612,  482,  612,  612,  482,  612,  612,  612,
 /*  9030 */   482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
 /*  9040 */   482,  612,  612,  406,  612,  612,  406,  612,  406,  406,
 /*  9050 */   406,  482,  482,  482,  612,  612,  482,  482,  482,  482,
 /*  9060 */   482,  482,  482,  482,  612,  423,  612,  406,  612,  612,
 /*  9070 */   612,  612,  612,  612,  612,  612,  612,  423,  423,  612,
 /*  9080 */   612,  612,  612,  423,  423,  423,  612,  423,  423,  612,
 /*  9090 */   612,  612,  423,  612,  612,  423,  423,  612,  423,  612,
 /*  9100 */   612,  423,  612,  612,  612,  423,  423,  423,  423,  423,
 /*  9110 */   423,  423,  423,  423,  423,  423,  612,  612,  612,  612,
 /*  9120 */   612,  612,  612,  612,  612,  612,  423,  423,  423,  612,
 /*  9130 */   612,  423,  423,  423,  423,  423,  423,  423,  423,  612,
 /*  9140 */   428,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  9150 */   612,  612,  428,  428,  612,  612,  612,  612,  428,  428,
 /*  9160 */   428,  612,  428,  428,  612,  612,  612,  428,  612,  612,
 /*  9170 */   428,  428,  612,  428,  612,  612,  428,  612,  612,  612,
 /*  9180 */   428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
 /*  9190 */   428,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /*  9200 */   612,  428,  428,  428,  612,  612,  428,  428,  428,  428,
 /*  9210 */   428,  428,  428,  428,  612,   65,  612,  612,  612,  612,
 /*  9220 */   612,  612,  612,  612,  612,  612,  612,   68,   67,  612,
 /*  9230 */   612,  612,  612,   66,   70,   44,  612,  142,  202,  612,
 /*  9240 */   612,  612,  389,  612,  612,  206,  113,  612,  192,  612,
 /*  9250 */   612,  191,  612,  612,  612,  373,  372,  369,  366,  363,
 /*  9260 */   360,  358,  350,  111,   36,   35,  612,  612,  612,  612,
 /*  9270 */   612,  612,  612,  612,  612,  612,  212,  349,  343,  612,
 /*  9280 */   612,  339,  336,  332,  329,  328,   28,  356,  326,   93,
 /*  9290 */   479,  479,  479,  479,  612,  479,  479,  479,  479,  479,
 /*  9300 */   479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
 /*  9310 */   479,  612,  612,   26,  479,  479,  612,  612,   91,  464,
 /*  9320 */    72,   73,  479,   79,   77,   75,   76,   74,   78,   81,
 /*  9330 */    80,   82,   84,   83,   89,   88,   86,   87,   85,  612,
 /*  9340 */   612,   25,   94,  390,  464,  612,  494,  491,  494,  494,
 /*  9350 */   464,  494,  494,  494,  494,  494,  494,  494,  494,  494,
 /*  9360 */   494,  494,  494,  494,  494,  494,  494,  612,  612,  494,
 /*  9370 */   394,  494,  491,  612,   91,  540,   72,   73,  491,   79,
 /*  9380 */    77,   75,   76,   74,   78,   81,   80,   82,   84,   83,
 /*  9390 */    89,   88,   86,   87,   85,  612,  612,   25,   94,  390,
 /*  9400 */   540,  612,   91,  546,   72,   73,  540,   79,   77,   75,
 /*  9410 */    76,   74,   78,   81,   80,   82,   84,   83,   89,   88,
 /*  9420 */    86,   87,   85,  612,  612,   25,   94,  390,  546,  612,
 /*  9430 */    91,  547,   72,   73,  546,   79,   77,   75,   76,   74,
 /*  9440 */    78,   81,   80,   82,   84,   83,   89,   88,   86,   87,
 /*  9450 */    85,  612,  612,   25,   94,  390,  547,  612,   91,  548,
 /*  9460 */    72,   73,  547,   79,   77,   75,   76,   74,   78,   81,
 /*  9470 */    80,   82,   84,   83,   89,   88,   86,   87,   85,  612,
 /*  9480 */   612,   25,   94,  390,  548,  612,   91,  549,   72,   73,
 /*  9490 */   548,   79,   77,   75,   76,   74,   78,   81,   80,   82,
 /*  9500 */    84,   83,   89,   88,   86,   87,   85,  612,  612,   25,
 /*  9510 */    94,  390,  549,  612,   91,  550,   72,   73,  549,   79,
 /*  9520 */    77,   75,   76,   74,   78,   81,   80,   82,   84,   83,
 /*  9530 */    89,   88,   86,   87,   85,  612,  612,   25,   94,  390,
 /*  9540 */   550,  612,   91,  551,   72,   73,  550,   79,   77,   75,
 /*  9550 */    76,   74,   78,   81,   80,   82,   84,   83,   89,   88,
 /*  9560 */    86,   87,   85,  612,  612,   25,   94,  390,  551,  612,
 /*  9570 */    91,  552,   72,   73,  551,   79,   77,   75,   76,   74,
 /*  9580 */    78,   81,   80,   82,   84,   83,   89,   88,   86,   87,
 /*  9590 */    85,  612,  612,   25,   94,  390,  552,  612,   91,  553,
 /*  9600 */    72,   73,  552,   79,   77,   75,   76,   74,   78,   81,
 /*  9610 */    80,   82,   84,   83,   89,   88,   86,   87,   85,  612,
 /*  9620 */   612,   25,   94,  390,  553,  612,   91,  554,   72,   73,
 /*  9630 */   553,   79,   77,   75,   76,   74,   78,   81,   80,   82,
 /*  9640 */    84,   83,   89,   88,   86,   87,   85,  612,  612,   25,
 /*  9650 */    94,  390,  554,  612,   91,  555,   72,   73,  554,   79,
 /*  9660 */    77,   75,   76,   74,   78,   81,   80,   82,   84,   83,
 /*  9670 */    89,   88,   86,   87,   85,  612,  612,   25,   94,  390,
 /*  9680 */   555,  612,   91,  484,   72,   73,  555,   79,   77,   75,
 /*  9690 */    76,   74,   78,   81,   80,   82,   84,   83,   89,   88,
 /*  9700 */    86,   87,   85,  583,  612,   25,   94,  390,  612,  612,
 /*  9710 */   612,  612,  612,  612,  484,  583,  583,  612,  612,  612,
 /*  9720 */   612,  583,  583,  583,  612,  583,  583,  612,  612,  612,
 /*  9730 */   583,  612,  612,  612,  583,  612,  583,  612,  612,  583,
 /*  9740 */   612,  612,  612,  583,  583,  583,  583,  583,  583,  583,
 /*  9750 */   612,  583,  583,  583,   91,  486,   72,   73,  612,   79,
 /*  9760 */    77,   75,   76,   74,   78,   81,   80,   82,   84,   83,
 /*  9770 */    89,   88,   86,   87,   85,  583,  583,   25,   94,  390,
 /*  9780 */    65,  612,  612,  612,  612,  612,  486,  612,  612,  612,
 /*  9790 */   612,  612,   68,   67,  612,  612,  612,  612,   66,   70,
 /*  9800 */    44,  612,  590,  202,  612,  612,  612,  389,  612,  612,
 /*  9810 */   612,  113,  612,  192,  612,  612,  191,  612,  612,  612,
 /*  9820 */   373,  372,  369,  366,  363,  360,  358,  612,  111,   36,
 /*  9830 */    35,   91,  612,   72,   73,  612,   79,   77,   75,   76,
 /*  9840 */    74,   78,   81,   80,   82,   84,   83,   89,   88,   86,
 /*  9850 */    87,   85,  356,  355,   25,   94,  390,   91,  612,   72,
 /*  9860 */    73,   90,   79,   77,   75,   76,   74,   78,   81,   80,
 /*  9870 */    82,   84,   83,   89,   88,   86,   87,   85,  612,  612,
 /*  9880 */    25,   94,  390,  612,  612,  612,  612,  612,  612,  612,
 /*  9890 */   612,  612,  612,  612,  612,  200,  612,  612,  612,  612,
 /*  9900 */    91,  612,   72,   73,  612,   79,   77,   75,   76,   74,
 /*  9910 */    78,   81,   80,   82,   84,   83,   89,   88,   86,   87,
 /*  9920 */    85,  612,  612,   25,   94,  390,  612,  612,   91,  612,
 /*  9930 */    72,   73,  176,   79,   77,   75,   76,   74,   78,   81,
 /*  9940 */    80,   82,   84,   83,   89,   88,   86,   87,   85,  612,
 /*  9950 */   612,   25,   94,  390,  612,  612,   91,  612,   72,   73,
 /*  9960 */   173,   79,   77,   75,   76,   74,   78,   81,   80,   82,
 /*  9970 */    84,   83,   89,   88,   86,   87,   85,  612,  612,   25,
 /*  9980 */    94,  390,  612,  612,   91,  612,   72,   73,  559,   79,
 /*  9990 */    77,   75,   76,   74,   78,   81,   80,   82,   84,   83,
 /* 10000 */    89,   88,   86,   87,   85,  612,  612,   25,   94,  390,
 /* 10010 */   612,  612,   91,  612,   72,   73,  562,   79,   77,   75,
 /* 10020 */    76,   74,   78,   81,   80,   82,   84,   83,   89,   88,
 /* 10030 */    86,   87,   85,  612,  612,   25,   94,  390,  612,  612,
 /* 10040 */    91,  612,   72,   73,  567,   79,   77,   75,   76,   74,
 /* 10050 */    78,   81,   80,   82,   84,   83,   89,   88,   86,   87,
 /* 10060 */    85,  612,  612,   25,   94,  390,  612,  612,   91,  612,
 /* 10070 */    72,   73,  581,   79,   77,   75,   76,   74,   78,   81,
 /* 10080 */    80,   82,   84,   83,   89,   88,   86,   87,   85,  612,
 /* 10090 */   612,   25,   94,  390,  241,  612,  609,  612,  609,  609,
 /* 10100 */   612,  609,  609,  609,  609,  609,  609,  609,  609,  609,
 /* 10110 */   609,  609,  609,  609,  609,  609,  609,  612,  612,  609,
 /* 10120 */   609,  609,  118,  612,   91,  612,   72,   73,  612,   79,
 /* 10130 */    77,   75,   76,   74,   78,   81,   80,   82,   84,   83,
 /* 10140 */    89,   88,   86,   87,   85,   65,  612,   25,   94,  390,
 /* 10150 */   612,  612,  612,  612,  612,  612,  612,   68,   67,  612,
 /* 10160 */   612,  612,  155,   66,   70,   44,  612,  612,  202,  612,
 /* 10170 */   612,  612,  389,  612,  612,  612,  113,  612,  192,  612,
 /* 10180 */   612,  191,  612,  612,  612,  373,  372,  369,  366,  363,
 /* 10190 */   360,  358,  612,  111,   36,   35,   91,  612,   72,   73,
 /* 10200 */   612,   79,   77,   75,   76,   74,   78,   81,   80,   82,
 /* 10210 */    84,   83,   89,   88,   86,   87,   85,  356,  355,   25,
 /* 10220 */    71,  377,  597,  612,  612,  612,  612,  612,  612,  612,
 /* 10230 */   612,  612,  612,  612,  597,  597,  612,  612,  612,  612,
 /* 10240 */   597,  597,  597,  612,  612,  597,  612,  612,  612,  597,
 /* 10250 */   597,  612,  612,  612,  612,  597,  612,  612,  597,  612,
 /* 10260 */   612,  612,  597,  597,  597,  597,  597,  597,  597,  612,
 /* 10270 */   612,  597,  597,   65,  612,  612,  612,  612,  612,  612,
 /* 10280 */   612,  612,  612,  612,  612,   68,   67,  612,  612,  612,
 /* 10290 */   612,   66,   70,   44,  597,  597,  202,  612,  612,  612,
 /* 10300 */   389,  594,  612,  612,  612,  612,  192,  612,  612,  191,
 /* 10310 */   612,  612,  612,  373,  372,  369,  366,  363,  360,  358,
 /* 10320 */   612,  612,   36,   35,   65,  612,  612,  612,  612,  612,
 /* 10330 */   612,  612,  612,  612,  612,  612,   68,   67,  612,  612,
 /* 10340 */   612,  612,   66,   70,   44,  356,  355,  190,  612,  612,
 /* 10350 */   612,  389,  496,  612,  612,  612,  612,  192,  496,  612,
 /* 10360 */   191,  612,  612,  612,  373,  372,  369,  366,  363,  360,
 /* 10370 */   358,  612,  612,  612,  612,   65,  612,  612,  612,  612,
 /* 10380 */   612,  612,  612,  612,  612,  612,  612,   68,   67,  612,
 /* 10390 */   612,  612,  612,   66,   70,   44,  356,  355,  226,  612,
 /* 10400 */   612,  612,  389,  489,  612,  612,  612,  612,  192,  612,
 /* 10410 */   612,  191,  612,  307,  612,  373,  372,  369,  366,  363,
 /* 10420 */   360,  358,   65,  612,  612,  612,  612,  612,  612,  612,
 /* 10430 */   612,  612,  612,  612,   68,   67,  612,  612,  612,  612,
 /* 10440 */    66,   70,   44,  612,  612,  202,  612,  356,  355,  389,
 /* 10450 */   612,  612,  612,  612,  612,  192,  612,  612,  191,  612,
 /* 10460 */   612,  612,  373,  372,  369,  366,  363,  360,  358,  612,
 /* 10470 */   612,   36,   35,   65,  612,  612,  612,  612,  612,  612,
 /* 10480 */   612,  612,  612,  612,  612,   68,   67,  612,  612,  612,
 /* 10490 */   612,   66,   70,   44,  356,  355,  226,  612,  612,  612,
 /* 10500 */   389,  612,  612,  612,  612,  612,  192,  612,  612,  191,
 /* 10510 */   612,  307,  612,  373,  372,  369,  366,  363,  360,  358,
 /* 10520 */    65,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 10530 */   612,  612,   68,   67,  612,  612,  612,  612,   66,   70,
 /* 10540 */    44,  612,  475,  190,  612,  356,  355,  389,  612,  612,
 /* 10550 */   612,  612,  612,  192,  612,  568,  191,  612,  612,  612,
 /* 10560 */   373,  372,  369,  366,  363,  360,  358,  568,  568,  612,
 /* 10570 */   612,  612,  612,  568,  568,  568,  612,  612,  568,  612,
 /* 10580 */   612,  612,  568,  612,  612,  612,  612,  612,  568,  612,
 /* 10590 */   612,  568,  356,  355,  612,  568,  568,  568,  568,  568,
 /* 10600 */   568,  568,  596,  612,  612,  612,  612,  612,  612,  612,
 /* 10610 */   612,  612,  612,  612,  596,  596,  612,  612,  612,  612,
 /* 10620 */   596,  596,  596,  612,  612,  596,  612,  568,  568,  596,
 /* 10630 */   612,  612,  612,  612,  612,  596,  612,   65,  596,  612,
 /* 10640 */   612,  612,  596,  596,  596,  596,  596,  596,  596,   68,
 /* 10650 */    67,  612,  612,  612,  612,   66,   70,   44,  612,  612,
 /* 10660 */   190,  612,  612,  612,  389,  612,  612,  612,  612,  612,
 /* 10670 */   192,  612,  612,  191,  596,  596,  612,  373,  372,  369,
 /* 10680 */   366,  363,  360,  358,   65,  612,  612,  612,  612,  612,
 /* 10690 */   612,  612,  612,  612,  612,  612,   68,   67,  612,  612,
 /* 10700 */   612,  612,   66,   70,   44,  612,  612,  202,  612,  356,
 /* 10710 */   355,  389,  612,  612,  612,  612,  612,  192,  612,  612,
 /* 10720 */   191,  612,  612,  612,  373,  372,  369,  366,  363,  360,
 /* 10730 */   358,  612,  612,  612,  612,  612,  612,  612,  612,  612,
 /* 10740 */   257,  612,  612,  258,  404,  255,  254,  253,  403,  402,
 /* 10750 */   401,  249,  612,  612,  612,    3,  356,  355,   99,  612,
 /* 10760 */   612,  612,  612,    1,  612,  115,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     0,    3,    2,    5,    4,    5,    6,    7,    8,    9,
 /*    10 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*    20 */    20,   21,   22,   23,   24,    5,   26,   27,   28,   29,
 /*    30 */    30,   31,   32,   30,   34,   35,   36,   37,   38,   39,
 /*    40 */    40,   41,   42,  126,   44,  128,    5,  130,   48,   49,
 /*    50 */    50,   51,   52,   53,   54,   55,   56,   57,   58,  126,
 /*    60 */     5,  128,   42,  130,  131,  132,  133,  102,  103,   69,
 /*    70 */    70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
 /*    80 */    80,   81,    0,   42,    2,   30,    4,    5,    6,    7,
 /*    90 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*   100 */    18,   19,   20,   21,   22,   23,   24,    5,   26,   27,
 /*   110 */    28,   29,   30,   31,   32,   30,   34,   35,   36,   37,
 /*   120 */    38,   39,   40,   41,   42,  126,   44,  128,    5,  130,
 /*   130 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*   140 */    58,  126,    5,  128,   42,  130,  131,  132,  133,   83,
 /*   150 */    84,   69,   70,   71,   72,   73,   74,   75,   76,   77,
 /*   160 */    78,   79,   80,   81,    0,   42,    2,   30,    4,    5,
 /*   170 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*   180 */    16,   17,   18,   19,   20,   21,   22,   23,   24,   30,
 /*   190 */    26,   27,   28,   29,   30,   31,   32,   30,   34,   35,
 /*   200 */    36,   37,   38,   39,   40,   41,   42,  126,   44,  128,
 /*   210 */    30,  130,   48,   49,   50,   51,   52,   53,   54,   55,
 /*   220 */    56,   57,   58,  126,    3,  128,    5,  130,  131,  132,
 /*   230 */   133,   31,   31,   69,   70,   71,   72,   73,   74,   75,
 /*   240 */    76,   77,   78,   79,   80,   81,    0,    3,    2,    5,
 /*   250 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*   260 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*   270 */    24,   31,   26,   27,   28,   29,   30,   31,   32,    5,
 /*   280 */    34,   35,   36,   37,   38,   39,   40,   41,   42,  126,
 /*   290 */    44,  128,   27,  130,   48,   49,   50,   51,   52,   53,
 /*   300 */    54,   55,   56,   57,   58,  126,    5,  128,   34,  130,
 /*   310 */   131,  132,  133,   36,   28,   69,   70,   71,   72,   73,
 /*   320 */    74,   75,   76,   77,   78,   79,   80,   81,    0,  101,
 /*   330 */     2,   30,    4,    5,    6,    7,    8,    9,   10,   11,
 /*   340 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*   350 */    22,   23,   24,  125,   26,   27,   28,   29,   30,   31,
 /*   360 */    32,   41,   34,   35,   36,   37,   38,   39,   40,   41,
 /*   370 */    42,  126,   44,  128,   42,  130,   48,   49,   50,   51,
 /*   380 */    52,   53,   54,   55,   56,   57,   58,  126,    3,  128,
 /*   390 */     5,  130,  131,  132,  133,   42,   31,   69,   70,   71,
 /*   400 */    72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
 /*   410 */     0,    3,    2,    5,    4,    5,    6,    7,    8,    9,
 /*   420 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*   430 */    20,   21,   22,   23,   24,   30,   26,   27,   28,   29,
 /*   440 */    30,   31,   32,    5,   34,   35,   36,   37,   38,   39,
 /*   450 */    40,   41,   42,  126,   44,  128,   27,  130,   48,   49,
 /*   460 */    50,   51,   52,   53,   54,   55,   56,   57,   58,  126,
 /*   470 */     5,  128,   34,  130,  131,  132,  133,   40,   30,   69,
 /*   480 */    70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
 /*   490 */    80,   81,    0,  101,    2,   30,    4,    5,    6,    7,
 /*   500 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*   510 */    18,   19,   20,   21,   22,   23,   24,  125,   26,   27,
 /*   520 */    28,   29,   30,   31,   32,   40,   34,   35,   36,   37,
 /*   530 */    38,   39,   40,   41,   42,  126,   44,  128,   30,  130,
 /*   540 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*   550 */    58,  145,  146,  147,   30,  149,  150,   72,   73,   30,
 /*   560 */    36,   69,   70,   71,   72,   73,   74,   75,   76,   77,
 /*   570 */    78,   79,   80,   81,    0,   30,    2,   30,    4,    5,
 /*   580 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*   590 */    16,   17,   18,   19,   20,   21,   22,   23,   24,   30,
 /*   600 */    26,   27,   28,   29,   30,   31,   32,   96,   34,   35,
 /*   610 */    36,   37,   38,   39,   40,   41,   42,  126,   44,  128,
 /*   620 */    30,  130,   48,   49,   50,   51,   52,   53,   54,   55,
 /*   630 */    56,   57,   58,  145,  146,  147,  148,  126,   30,  128,
 /*   640 */   129,  130,   30,   69,   70,   71,   72,   73,   74,   75,
 /*   650 */    76,   77,   78,   79,   80,   81,    0,   31,    2,   28,
 /*   660 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*   670 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*   680 */    24,   41,   26,   27,   28,   29,   30,   31,   32,   96,
 /*   690 */    34,   35,   36,   37,   38,   39,   40,   41,   42,  126,
 /*   700 */    44,  128,   42,  130,   48,   49,   50,   51,   52,   53,
 /*   710 */    54,   55,   56,   57,   58,   27,   29,   30,   27,  126,
 /*   720 */    33,  128,   46,  130,   27,   69,   70,   71,   72,   73,
 /*   730 */    74,   75,   76,   77,   78,   79,   80,   81,    0,   36,
 /*   740 */     2,   46,    4,    5,    6,    7,    8,    9,   10,   11,
 /*   750 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*   760 */    22,   23,   24,   36,   26,   27,   28,   29,   30,   31,
 /*   770 */    32,   96,   34,   35,   36,   37,   38,   39,   40,   41,
 /*   780 */    42,  126,   44,  128,   36,  130,   48,   49,   50,   51,
 /*   790 */    52,   53,   54,   55,   56,   57,   58,   27,   29,   30,
 /*   800 */    46,  126,   33,  128,   27,  130,   46,   69,   70,   71,
 /*   810 */    72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
 /*   820 */     0,   36,    2,   27,    4,    5,    6,    7,    8,    9,
 /*   830 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*   840 */    20,   21,   22,   23,   24,   36,   26,   27,   28,   29,
 /*   850 */    30,   31,   32,   96,   34,   35,   36,   37,   38,   39,
 /*   860 */    40,   41,   42,  126,   44,  128,   36,  130,   48,   49,
 /*   870 */    50,   51,   52,   53,   54,   55,   56,   57,   58,   27,
 /*   880 */    29,   30,   27,  126,   33,  128,   27,  130,   42,   69,
 /*   890 */    70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
 /*   900 */    80,   81,    0,   36,    2,   36,    4,    5,    6,    7,
 /*   910 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*   920 */    18,   19,   20,   21,   22,   23,   24,   31,   26,   27,
 /*   930 */    28,   29,   30,   31,   32,   96,   34,   35,   36,   37,
 /*   940 */    38,   39,   40,   41,   42,  126,   44,  128,   39,  130,
 /*   950 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*   960 */    58,   27,  126,   31,  128,  126,  130,  128,   36,  130,
 /*   970 */    27,   69,   70,   71,   72,   73,   74,   75,   76,   77,
 /*   980 */    78,   79,   80,   81,    0,   36,    2,   27,    4,    5,
 /*   990 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*  1000 */    16,   17,   18,   19,   20,   21,   22,   23,   24,   27,
 /*  1010 */    26,   27,   28,   29,   30,   31,   32,   96,   34,   35,
 /*  1020 */    36,   37,   38,   39,   40,   41,   42,  126,   44,  128,
 /*  1030 */    36,  130,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  1040 */    56,   57,   58,   27,  126,   36,  128,  126,  130,  128,
 /*  1050 */    38,  130,   27,   69,   70,   71,   72,   73,   74,   75,
 /*  1060 */    76,   77,   78,   79,   80,   81,    0,   40,    2,   27,
 /*  1070 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*  1080 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  1090 */    24,   36,   26,   27,   28,   29,   30,   31,   32,   96,
 /*  1100 */    34,   35,   36,   37,   38,   39,   40,   41,   42,  126,
 /*  1110 */    44,  128,   36,  130,   48,   49,   50,   51,   52,   53,
 /*  1120 */    54,   55,   56,   57,   58,   27,  126,   30,  128,  126,
 /*  1130 */   130,  128,   36,  130,   27,   69,   70,   71,   72,   73,
 /*  1140 */    74,   75,   76,   77,   78,   79,   80,   81,    0,   31,
 /*  1150 */     2,   36,    4,    5,    6,    7,    8,    9,   10,   11,
 /*  1160 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  1170 */    22,   23,   24,   30,   26,   27,   28,   29,   30,   31,
 /*  1180 */    32,   96,   34,   35,   36,   37,   38,   39,   40,   41,
 /*  1190 */    42,  126,   44,  128,   27,  130,   48,   49,   50,   51,
 /*  1200 */    52,   53,   54,   55,   56,   57,   58,   30,  126,   30,
 /*  1210 */   128,  126,  130,  128,   36,  130,   34,   69,   70,   71,
 /*  1220 */    72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
 /*  1230 */     0,   40,    2,   36,    4,    5,    6,    7,    8,    9,
 /*  1240 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  1250 */    20,   21,   22,   23,   24,   36,   26,   27,   28,   29,
 /*  1260 */    30,   31,   32,   36,   34,   35,   36,   37,   38,   39,
 /*  1270 */    40,   41,   42,  126,   44,  128,   36,  130,   48,   49,
 /*  1280 */    50,   51,   52,   53,   54,   55,   56,   57,   58,  126,
 /*  1290 */   126,  128,  128,  130,  130,  131,   36,   31,  135,   69,
 /*  1300 */    70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
 /*  1310 */    80,   81,    0,   38,    2,   30,    4,    5,    6,    7,
 /*  1320 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  1330 */    18,   19,   20,   21,   22,   23,   24,   31,   26,   27,
 /*  1340 */    28,   29,   30,   31,   32,   96,   34,   35,   36,   37,
 /*  1350 */    38,   39,   40,   41,   42,  126,   44,  128,   27,  130,
 /*  1360 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  1370 */    58,   36,  126,   30,  128,  126,  130,  128,   94,  130,
 /*  1380 */    31,   69,   70,   71,   72,   73,   74,   75,   76,   77,
 /*  1390 */    78,   79,   80,   81,    0,  106,    2,   40,    4,    5,
 /*  1400 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*  1410 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  124,
 /*  1420 */    26,   27,   28,   29,   30,   31,   32,   40,   34,   35,
 /*  1430 */    36,   37,   38,   39,   40,   41,   42,  126,   44,  128,
 /*  1440 */    41,  130,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  1450 */    56,   57,   58,  126,  126,  128,  128,  130,  130,   72,
 /*  1460 */    73,  127,  135,   69,   70,   71,   72,   73,   74,   75,
 /*  1470 */    76,   77,   78,   79,   80,   81,    0,   31,    2,  127,
 /*  1480 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*  1490 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  1500 */    24,  127,   26,   27,   28,   29,   30,   31,   32,  127,
 /*  1510 */    34,   35,   36,   37,   38,   39,   40,   41,   42,  126,
 /*  1520 */    44,  128,  127,  130,   48,   49,   50,   51,   52,   53,
 /*  1530 */    54,   55,   56,   57,   58,  126,   35,  128,   35,  130,
 /*  1540 */    39,   40,   39,   40,  135,   69,   70,   71,   72,   73,
 /*  1550 */    74,   75,   76,   77,   78,   79,   80,   81,    0,  127,
 /*  1560 */     2,  134,    4,    5,    6,    7,    8,    9,   10,   11,
 /*  1570 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  1580 */    22,   23,   24,  134,   26,   27,   28,   29,   30,   31,
 /*  1590 */    32,   96,   34,   35,   36,   37,   38,   39,   40,   41,
 /*  1600 */    42,  126,   44,  128,  134,  130,   48,   49,   50,   51,
 /*  1610 */    52,   53,   54,   55,   56,   57,   58,   95,  126,   95,
 /*  1620 */   128,  126,  130,  128,   95,  130,   31,   69,   70,   71,
 /*  1630 */    72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
 /*  1640 */     0,   72,    2,  164,    4,    5,    6,    7,    8,    9,
 /*  1650 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  1660 */    20,   21,   22,   23,   24,  164,   26,   27,   28,   29,
 /*  1670 */    30,   31,   32,   96,   34,   35,   36,   37,   38,   39,
 /*  1680 */    40,   41,   42,  126,   44,  128,  164,  130,   48,   49,
 /*  1690 */    50,   51,   52,   53,   54,   55,   56,   57,   58,  164,
 /*  1700 */   126,  164,  128,  126,  130,  128,  164,  130,  164,   69,
 /*  1710 */    70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
 /*  1720 */    80,   81,    0,  164,    2,  164,    4,    5,    6,    7,
 /*  1730 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  1740 */    18,   19,   20,   21,   22,   23,   24,  164,   26,   27,
 /*  1750 */    28,   29,   30,   31,   32,   96,   34,   35,   36,   37,
 /*  1760 */    38,   39,   40,   41,   42,  126,   44,  128,  164,  130,
 /*  1770 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  1780 */    58,  164,  126,  164,  128,  126,  130,  128,  164,  130,
 /*  1790 */   164,   69,   70,   71,   72,   73,   74,   75,   76,   77,
 /*  1800 */    78,   79,   80,   81,    0,  164,    2,  164,    4,    5,
 /*  1810 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*  1820 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  164,
 /*  1830 */    26,   27,   28,   29,   30,   31,   32,   96,   34,   35,
 /*  1840 */    36,   37,   38,   39,   40,   41,   42,  126,   44,  128,
 /*  1850 */   164,  130,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  1860 */    56,   57,   58,  164,  126,  164,  128,  126,  130,  128,
 /*  1870 */   164,  130,  164,   69,   70,   71,   72,   73,   74,   75,
 /*  1880 */    76,   77,   78,   79,   80,   81,    0,  164,    2,  164,
 /*  1890 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*  1900 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  1910 */    24,  164,   26,   27,   28,   29,   30,   31,   32,  164,
 /*  1920 */    34,   35,   36,   37,   38,   39,   40,   41,   42,  126,
 /*  1930 */    44,  128,  164,  130,   48,   49,   50,   51,   52,   53,
 /*  1940 */    54,   55,   56,   57,   58,   35,    5,  164,   35,   39,
 /*  1950 */    40,  164,   39,   40,  164,   69,   70,   71,   72,   73,
 /*  1960 */    74,   75,   76,   77,   78,   79,   80,   81,    0,  164,
 /*  1970 */     2,   30,    4,    5,    6,    7,    8,    9,   10,   11,
 /*  1980 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  1990 */    22,   23,   24,  164,   26,   27,   28,   29,   30,   31,
 /*  2000 */    32,   40,   34,   35,   36,   37,   38,   39,   40,   41,
 /*  2010 */    42,  126,   44,  128,  164,  130,   48,   49,   50,   51,
 /*  2020 */    52,   53,   54,   55,   56,   57,   58,   35,  141,  142,
 /*  2030 */   143,   39,   40,   72,   73,  164,  164,   69,   70,   71,
 /*  2040 */    72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
 /*  2050 */     0,  164,    2,  164,    4,    5,    6,    7,    8,    9,
 /*  2060 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  2070 */    20,   21,   22,   23,   24,  164,   26,   27,   28,   29,
 /*  2080 */    30,   31,   32,  164,   34,   35,   36,   37,   38,   39,
 /*  2090 */    40,   41,   42,  126,   44,  128,  164,  130,   48,   49,
 /*  2100 */    50,   51,   52,   53,   54,   55,   56,   57,   58,  126,
 /*  2110 */   126,  128,  128,  130,  130,  164,  164,  164,  164,   69,
 /*  2120 */    70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
 /*  2130 */    80,   81,    0,  164,    2,  164,    4,    5,    6,    7,
 /*  2140 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  2150 */    18,   19,   20,   21,   22,   23,   24,  164,   26,   27,
 /*  2160 */    28,   29,   30,   31,   32,  164,   34,   35,   36,   37,
 /*  2170 */    38,   39,   40,   41,   42,  126,   44,  128,  164,  130,
 /*  2180 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  2190 */    58,  126,  126,  128,  128,  130,  130,  164,  164,  164,
 /*  2200 */   164,   69,   70,   71,   72,   73,   74,   75,   76,   77,
 /*  2210 */    78,   79,   80,   81,    0,  164,    2,  164,    4,    5,
 /*  2220 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*  2230 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  164,
 /*  2240 */    26,   27,   28,   29,   30,   31,   32,  164,   34,   35,
 /*  2250 */    36,   37,   38,   39,   40,   41,   42,  126,   44,  128,
 /*  2260 */   164,  130,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  2270 */    56,   57,   58,  126,  126,  128,  128,  130,  130,  164,
 /*  2280 */   164,  164,  164,   69,   70,   71,   72,   73,   74,   75,
 /*  2290 */    76,   77,   78,   79,   80,   81,    0,  164,    2,  164,
 /*  2300 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*  2310 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  2320 */    24,  164,   26,   27,   28,   29,   30,   31,   32,  164,
 /*  2330 */    34,   35,   36,   37,   38,   39,   40,   41,   42,  126,
 /*  2340 */    44,  128,  164,  130,   48,   49,   50,   51,   52,   53,
 /*  2350 */    54,   55,   56,   57,   58,  126,  126,  128,  128,  130,
 /*  2360 */   130,  164,  164,  164,  164,   69,   70,   71,   72,   73,
 /*  2370 */    74,   75,   76,   77,   78,   79,   80,   81,    0,  164,
 /*  2380 */     2,  164,    4,    5,    6,    7,    8,    9,   10,   11,
 /*  2390 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  2400 */    22,   23,   24,  164,   26,   27,   28,   29,   30,   31,
 /*  2410 */    32,    5,   34,   35,   36,   37,   38,   39,   40,   41,
 /*  2420 */    42,    5,   44,  164,  164,  164,   48,   49,   50,   51,
 /*  2430 */    52,   53,   54,   55,   56,   57,   58,  164,    5,  164,
 /*  2440 */   164,  164,   36,  164,  164,  164,   30,   69,   70,   71,
 /*  2450 */    72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
 /*  2460 */     0,  164,    2,   30,    4,    5,    6,    7,    8,    9,
 /*  2470 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  2480 */    20,   21,   22,   23,   24,  164,   26,   27,   28,   29,
 /*  2490 */    30,   31,   32,    5,   34,   35,   36,   37,   38,   39,
 /*  2500 */    40,   41,   42,    5,   44,  164,  164,  164,   48,   49,
 /*  2510 */    50,   51,   52,   53,   54,   55,   56,   57,   58,  164,
 /*  2520 */     5,  164,  164,  164,   36,  164,  164,  164,   30,   69,
 /*  2530 */    70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
 /*  2540 */    80,   81,    0,  164,    2,   30,    4,    5,    6,    7,
 /*  2550 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  2560 */    18,   19,   20,   21,   22,   23,   24,  164,   26,   27,
 /*  2570 */    28,   29,   30,   31,   32,    5,   34,   35,   36,   37,
 /*  2580 */    38,   39,   40,   41,   42,    5,   44,  164,  164,  164,
 /*  2590 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  2600 */    58,  164,    5,  164,  164,  164,   36,  164,  164,  164,
 /*  2610 */    30,   69,   70,   71,   72,   73,   74,   75,   76,   77,
 /*  2620 */    78,   79,   80,   81,    0,  164,    2,   30,    4,    5,
 /*  2630 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*  2640 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  164,
 /*  2650 */    26,   27,   28,   29,   30,   31,   32,    5,   34,   35,
 /*  2660 */    36,   37,   38,   39,   40,   41,   42,    5,   44,  164,
 /*  2670 */   164,  164,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  2680 */    56,   57,   58,  164,  164,  164,  164,  164,   36,  164,
 /*  2690 */   164,  164,   30,   69,   70,   71,   72,   73,   74,   75,
 /*  2700 */    76,   77,   78,   79,   80,   81,    4,    5,    6,    7,
 /*  2710 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  2720 */    18,   19,   20,   21,   22,   23,   24,  164,   26,   27,
 /*  2730 */    28,   29,   30,   31,    5,    5,   34,   35,   36,    5,
 /*  2740 */    38,   39,   98,   41,   42,  101,   44,    3,  164,    5,
 /*  2750 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  2760 */    58,  164,  164,  164,   30,   36,   36,  164,   34,  125,
 /*  2770 */    36,   69,   70,   71,   30,  164,   74,   75,   76,   77,
 /*  2780 */    78,   79,   80,   81,    4,    5,    6,    7,    8,    9,
 /*  2790 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  2800 */    20,   21,   22,   23,   24,  164,   26,   27,   28,   29,
 /*  2810 */    30,   31,    5,    5,   34,   35,   36,    5,   38,   39,
 /*  2820 */    98,   41,   42,  101,   44,    3,  164,    5,   48,   49,
 /*  2830 */    50,   51,   52,   53,   54,   55,   56,   57,   58,  164,
 /*  2840 */   164,  164,   30,   36,   36,  164,  164,  125,   36,   69,
 /*  2850 */    70,   71,   30,  164,   74,   75,   76,   77,   78,   79,
 /*  2860 */    80,   81,    4,    5,    6,    7,    8,    9,   10,   11,
 /*  2870 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  2880 */    22,   23,   24,  164,   26,   27,   28,   29,   30,   31,
 /*  2890 */     5,    5,   34,   35,   36,    5,   38,   39,   98,   41,
 /*  2900 */    42,  101,   44,  164,  164,  164,   48,   49,   50,   51,
 /*  2910 */    52,   53,   54,   55,   56,   57,   58,  164,  164,  164,
 /*  2920 */    30,   36,   36,  164,  164,  125,   36,   69,   70,   71,
 /*  2930 */   164,  164,   74,   75,   76,   77,   78,   79,   80,   81,
 /*  2940 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*  2950 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  2960 */    24,  164,   26,   27,   28,   29,   30,   31,  164,  164,
 /*  2970 */    34,   35,   36,    5,   38,   39,  164,   41,   42,  164,
 /*  2980 */    44,  164,  164,  164,   48,   49,   50,   51,   52,   53,
 /*  2990 */    54,   55,   56,   57,   58,  164,  164,  164,   30,  164,
 /*  3000 */   164,  164,  164,  164,   36,   69,   70,   71,  164,  164,
 /*  3010 */    74,   75,   76,   77,   78,   79,   80,   81,    4,    5,
 /*  3020 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*  3030 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  164,
 /*  3040 */    26,   27,   28,   29,   30,   31,  164,  164,   34,   35,
 /*  3050 */    36,    5,   38,   39,  164,   41,   42,  164,   44,  164,
 /*  3060 */   164,  164,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  3070 */    56,   57,   58,  164,  164,  164,   30,  164,  164,  164,
 /*  3080 */   164,  164,   36,   69,   70,   71,  164,  164,   74,   75,
 /*  3090 */    76,   77,   78,   79,   80,   81,    4,    5,    6,    7,
 /*  3100 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  3110 */    18,   19,   20,   21,   22,   23,   24,  164,   26,   27,
 /*  3120 */    28,   29,   30,   31,  164,  164,   34,   35,   36,    5,
 /*  3130 */    38,   39,  164,   41,   42,  164,   44,  164,  164,  164,
 /*  3140 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  3150 */    58,  164,  164,  164,   30,  164,  164,  164,  164,  164,
 /*  3160 */    36,   69,   70,   71,  164,  164,   74,   75,   76,   77,
 /*  3170 */    78,   79,   80,   81,    4,    5,    6,    7,    8,    9,
 /*  3180 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  3190 */    20,   21,   22,   23,   24,  164,   26,   27,   28,   29,
 /*  3200 */    30,   31,  164,  164,   34,   35,   36,    5,   38,   39,
 /*  3210 */   164,   41,   42,  164,   44,  164,  164,  164,   48,   49,
 /*  3220 */    50,   51,   52,   53,   54,   55,   56,   57,   58,  164,
 /*  3230 */   164,  164,   30,  164,  164,  164,  164,  164,   36,   69,
 /*  3240 */    70,   71,  164,  164,   74,   75,   76,   77,   78,   79,
 /*  3250 */    80,   81,    4,    5,    6,    7,    8,    9,   10,   11,
 /*  3260 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  3270 */    22,   23,   24,  164,   26,   27,   28,   29,   30,   31,
 /*  3280 */   164,  164,   34,   35,   36,  164,   38,   39,  164,   41,
 /*  3290 */    42,  164,   44,  164,  164,  164,   48,   49,   50,   51,
 /*  3300 */    52,   53,   54,   55,   56,   57,   58,  164,  164,  164,
 /*  3310 */   164,  164,  164,  164,  164,  164,  164,   69,   70,   71,
 /*  3320 */   164,  164,   74,   75,   76,   77,   78,   79,   80,   81,
 /*  3330 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*  3340 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  3350 */    24,  164,   26,   27,   28,   29,   30,   31,  164,  164,
 /*  3360 */    34,   35,   36,  164,   38,   39,  164,   41,   42,  164,
 /*  3370 */    44,  164,  164,  164,   48,   49,   50,   51,   52,   53,
 /*  3380 */    54,   55,   56,   57,   58,  164,  164,  164,  164,  164,
 /*  3390 */   164,  164,  164,  164,  164,   69,   70,   71,  164,  164,
 /*  3400 */    74,   75,   76,   77,   78,   79,   80,   81,    4,    5,
 /*  3410 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*  3420 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  164,
 /*  3430 */    26,   27,   28,   29,   30,   31,  164,  164,   34,   35,
 /*  3440 */    36,  164,   38,   39,  164,   41,   42,  164,   44,  164,
 /*  3450 */   164,  164,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  3460 */    56,   57,   58,  164,  164,  164,  164,  164,  164,  164,
 /*  3470 */   164,  164,  164,   69,   70,   71,  164,  164,   74,   75,
 /*  3480 */    76,   77,   78,   79,   80,   81,    4,    5,    6,    7,
 /*  3490 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  3500 */    18,   19,   20,   21,   22,   23,   24,  164,   26,   27,
 /*  3510 */    28,   29,   30,   31,  164,  164,   34,   35,   36,  164,
 /*  3520 */    38,   39,  164,   41,   42,  164,   44,  164,  164,  164,
 /*  3530 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  3540 */    58,  164,  164,  164,  164,  164,  164,  164,  164,  164,
 /*  3550 */   164,   69,   70,   71,  164,  164,   74,   75,   76,   77,
 /*  3560 */    78,   79,   80,   81,    4,    5,    6,    7,    8,    9,
 /*  3570 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  3580 */    20,   21,   22,   23,   24,  164,   26,   27,   28,   29,
 /*  3590 */    30,   31,  164,  164,   34,   35,   36,  164,   38,   39,
 /*  3600 */   164,   41,   42,  164,   44,  164,  164,  164,   48,   49,
 /*  3610 */    50,   51,   52,   53,   54,   55,   56,   57,   58,  164,
 /*  3620 */   164,  164,  164,  164,  164,  164,  164,  164,  164,   69,
 /*  3630 */    70,   71,  164,  164,   74,   75,   76,   77,   78,   79,
 /*  3640 */    80,   81,    4,    5,    6,    7,    8,    9,   10,   11,
 /*  3650 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  3660 */    22,   23,   24,  164,   26,   27,   28,   29,   30,   31,
 /*  3670 */   164,  164,   34,   35,   36,  164,   38,   39,  164,   41,
 /*  3680 */    42,  164,   44,  164,  164,  164,   48,   49,   50,   51,
 /*  3690 */    52,   53,   54,   55,   56,   57,   58,  164,  164,  164,
 /*  3700 */   164,  164,  164,  164,  164,  164,  164,   69,   70,   71,
 /*  3710 */   164,  164,   74,   75,   76,   77,   78,   79,   80,   81,
 /*  3720 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*  3730 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  3740 */    24,  164,   26,   27,   28,   29,   30,   31,  164,  164,
 /*  3750 */    34,   35,   36,  164,   38,   39,  164,   41,   42,  164,
 /*  3760 */    44,  164,  164,  164,   48,   49,   50,   51,   52,   53,
 /*  3770 */    54,   55,   56,   57,   58,  164,  164,  164,  164,  164,
 /*  3780 */   164,  164,  164,  164,  164,   69,   70,   71,  164,  164,
 /*  3790 */    74,   75,   76,   77,   78,   79,   80,   81,    4,    5,
 /*  3800 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*  3810 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  164,
 /*  3820 */    26,   27,   28,   29,   30,   31,  164,  164,   34,   35,
 /*  3830 */    36,  164,   38,   39,  164,   41,   42,  164,   44,  164,
 /*  3840 */   164,  164,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  3850 */    56,   57,   58,  164,  164,  164,  164,  164,  164,  164,
 /*  3860 */   164,  164,  164,   69,   70,   71,  164,  164,   74,   75,
 /*  3870 */    76,   77,   78,   79,   80,   81,    4,    5,    6,    7,
 /*  3880 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  3890 */    18,   19,   20,   21,   22,   23,   24,  164,   26,   27,
 /*  3900 */    28,   29,   30,   31,  164,  164,   34,   35,   36,  164,
 /*  3910 */    38,   39,  164,   41,   42,  164,   44,  164,  164,  164,
 /*  3920 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  3930 */    58,  164,  164,  164,  164,  164,  164,  164,  164,  164,
 /*  3940 */   164,   69,   70,   71,  164,  164,   74,   75,   76,   77,
 /*  3950 */    78,   79,   80,   81,    4,    5,    6,    7,    8,    9,
 /*  3960 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  3970 */    20,   21,   22,   23,   24,  164,   26,   27,   28,   29,
 /*  3980 */    30,   31,  164,  164,   34,   35,   36,  164,   38,   39,
 /*  3990 */   164,   41,   42,  164,   44,  164,  164,  164,   48,   49,
 /*  4000 */    50,   51,   52,   53,   54,   55,   56,   57,   58,  164,
 /*  4010 */   164,  164,  164,  164,  164,  164,  164,  164,  164,   69,
 /*  4020 */    70,   71,  164,  164,   74,   75,   76,   77,   78,   79,
 /*  4030 */    80,   81,    4,    5,    6,    7,    8,    9,   10,   11,
 /*  4040 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  4050 */    22,   23,   24,  164,   26,   27,   28,   29,   30,   31,
 /*  4060 */   164,  164,   34,   35,   36,  164,   38,   39,  164,   41,
 /*  4070 */    42,  164,   44,  164,  164,  164,   48,   49,   50,   51,
 /*  4080 */    52,   53,   54,   55,   56,   57,   58,  164,  164,  164,
 /*  4090 */   164,  164,  164,  164,  164,  164,  164,   69,   70,   71,
 /*  4100 */   164,  164,   74,   75,   76,   77,   78,   79,   80,   81,
 /*  4110 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*  4120 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  4130 */    24,  164,   26,   27,   28,   29,   30,   31,  164,  164,
 /*  4140 */    34,   35,   36,  164,   38,   39,  164,   41,   42,  164,
 /*  4150 */    44,  164,  164,  164,   48,   49,   50,   51,   52,   53,
 /*  4160 */    54,   55,   56,   57,   58,  164,  164,  164,  164,  164,
 /*  4170 */   164,  164,  164,  164,  164,   69,   70,   71,  164,  164,
 /*  4180 */    74,   75,   76,   77,   78,   79,   80,   81,    4,    5,
 /*  4190 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*  4200 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  164,
 /*  4210 */    26,   27,   28,   29,   30,   31,  164,  164,   34,   35,
 /*  4220 */    36,  164,   38,   39,  164,   41,   42,  164,   44,  164,
 /*  4230 */   164,  164,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  4240 */    56,   57,   58,  164,  164,  164,  164,  164,  164,  164,
 /*  4250 */   164,  164,  164,   69,   70,   71,  164,  164,   74,   75,
 /*  4260 */    76,   77,   78,   79,   80,   81,    4,    5,    6,    7,
 /*  4270 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  4280 */    18,   19,   20,   21,   22,   23,   24,  164,   26,   27,
 /*  4290 */    28,   29,   30,   31,  164,  164,   34,   35,   36,  164,
 /*  4300 */    38,   39,  164,   41,   42,  164,   44,  164,  164,  164,
 /*  4310 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  4320 */    58,  164,  164,  164,  164,  164,  164,  164,  164,  164,
 /*  4330 */   164,   69,   70,   71,  164,  164,   74,   75,   76,   77,
 /*  4340 */    78,   79,   80,   81,    4,    5,    6,    7,    8,    9,
 /*  4350 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  4360 */    20,   21,   22,   23,   24,  164,   26,   27,   28,   29,
 /*  4370 */    30,   31,  164,  164,   34,   35,   36,  164,   38,   39,
 /*  4380 */   164,   41,   42,  164,   44,  164,  164,  164,   48,   49,
 /*  4390 */    50,   51,   52,   53,   54,   55,   56,   57,   58,  164,
 /*  4400 */   164,  164,  164,  164,  164,  164,  164,  164,  164,   69,
 /*  4410 */    70,   71,  164,  164,   74,   75,   76,   77,   78,   79,
 /*  4420 */    80,   81,    4,    5,    6,    7,    8,    9,   10,   11,
 /*  4430 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  4440 */    22,   23,   24,  164,   26,   27,   28,   29,   30,   31,
 /*  4450 */   164,  164,   34,   35,   36,  164,   38,   39,  164,   41,
 /*  4460 */    42,  164,   44,  164,  164,  164,   48,   49,   50,   51,
 /*  4470 */    52,   53,   54,   55,   56,   57,   58,  164,  164,  164,
 /*  4480 */   164,  164,  164,  164,  164,  164,  164,   69,   70,   71,
 /*  4490 */   164,  164,   74,   75,   76,   77,   78,   79,   80,   81,
 /*  4500 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*  4510 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  4520 */    24,  164,   26,   27,   28,   29,   30,   31,  164,  164,
 /*  4530 */    34,   35,   36,  164,   38,   39,  164,   41,   42,  164,
 /*  4540 */    44,  164,  164,  164,   48,   49,   50,   51,   52,   53,
 /*  4550 */    54,   55,   56,   57,   58,  164,  164,  164,  164,  164,
 /*  4560 */   164,  164,  164,  164,  164,   69,   70,   71,  164,  164,
 /*  4570 */    74,   75,   76,   77,   78,   79,   80,   81,    4,    5,
 /*  4580 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*  4590 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  164,
 /*  4600 */    26,   27,   28,   29,   30,   31,  164,  164,   34,   35,
 /*  4610 */    36,  164,   38,   39,  164,   41,   42,  164,   44,  164,
 /*  4620 */   164,  164,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  4630 */    56,   57,   58,  164,  164,  164,  164,  164,  164,  164,
 /*  4640 */   164,  164,  164,   69,   70,   71,  164,  164,   74,   75,
 /*  4650 */    76,   77,   78,   79,   80,   81,    4,    5,    6,    7,
 /*  4660 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  4670 */    18,   19,   20,   21,   22,   23,   24,  164,   26,   27,
 /*  4680 */    28,   29,   30,   31,  164,  164,   34,   35,   36,  164,
 /*  4690 */    38,   39,  164,   41,   42,  164,   44,  164,  164,  164,
 /*  4700 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  4710 */    58,  164,  164,  164,  164,  164,  164,  164,  164,  164,
 /*  4720 */   164,   69,   70,   71,  164,  164,   74,   75,   76,   77,
 /*  4730 */    78,   79,   80,   81,    4,    5,    6,    7,    8,    9,
 /*  4740 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  4750 */    20,   21,   22,   23,   24,  164,   26,   27,   28,   29,
 /*  4760 */    30,   31,  164,  164,   34,   35,   36,  164,   38,   39,
 /*  4770 */   164,   41,   42,  164,   44,  164,  164,  164,   48,   49,
 /*  4780 */    50,   51,   52,   53,   54,   55,   56,   57,   58,  164,
 /*  4790 */   164,  164,  164,  164,  164,  164,  164,  164,  164,   69,
 /*  4800 */    70,   71,  164,  164,   74,   75,   76,   77,   78,   79,
 /*  4810 */    80,   81,    4,    5,    6,    7,    8,    9,   10,   11,
 /*  4820 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  4830 */    22,   23,   24,  164,   26,   27,   28,   29,   30,   31,
 /*  4840 */   164,  164,   34,   35,   36,  164,   38,   39,  164,   41,
 /*  4850 */    42,  164,   44,  164,  164,  164,   48,   49,   50,   51,
 /*  4860 */    52,   53,   54,   55,   56,   57,   58,  164,  164,  164,
 /*  4870 */   164,  164,  164,  164,  164,  164,  164,   69,   70,   71,
 /*  4880 */   164,  164,   74,   75,   76,   77,   78,   79,   80,   81,
 /*  4890 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*  4900 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  4910 */    24,  164,   26,   27,   28,   29,   30,   31,  164,  164,
 /*  4920 */    34,   35,   36,  164,   38,   39,  164,   41,   42,  164,
 /*  4930 */    44,  164,  164,  164,   48,   49,   50,   51,   52,   53,
 /*  4940 */    54,   55,   56,   57,   58,  164,  164,  164,  164,  164,
 /*  4950 */   164,  164,  164,  164,  164,   69,   70,   71,  164,  164,
 /*  4960 */    74,   75,   76,   77,   78,   79,   80,   81,    4,    5,
 /*  4970 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*  4980 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  164,
 /*  4990 */    26,   27,   28,   29,   30,   31,  164,  164,   34,   35,
 /*  5000 */    36,  164,   38,   39,  164,   41,   42,  164,   44,  164,
 /*  5010 */   164,  164,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  5020 */    56,   57,   58,  164,  164,  164,  164,  164,  164,  164,
 /*  5030 */   164,  164,  164,   69,   70,   71,  164,  164,   74,   75,
 /*  5040 */    76,   77,   78,   79,   80,   81,    4,    5,    6,    7,
 /*  5050 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  5060 */    18,   19,   20,   21,   22,   23,   24,  164,   26,   27,
 /*  5070 */    28,   29,   30,   31,  164,  164,   34,   35,   36,  164,
 /*  5080 */    38,   39,  164,   41,   42,  164,   44,  164,  164,  164,
 /*  5090 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  5100 */    58,  164,  164,  164,  164,  164,  164,  164,  164,  164,
 /*  5110 */   164,   69,   70,   71,  164,  164,   74,   75,   76,   77,
 /*  5120 */    78,   79,   80,   81,    4,    5,    6,    7,    8,    9,
 /*  5130 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  5140 */    20,   21,   22,   23,   24,  164,   26,   27,   28,   29,
 /*  5150 */    30,   31,  164,  164,   34,   35,   36,  164,   38,   39,
 /*  5160 */   164,   41,   42,  164,   44,  164,  164,  164,   48,   49,
 /*  5170 */    50,   51,   52,   53,   54,   55,   56,   57,   58,  164,
 /*  5180 */   164,  164,  164,  164,  164,  164,  164,  164,  164,   69,
 /*  5190 */    70,   71,  164,  164,   74,   75,   76,   77,   78,   79,
 /*  5200 */    80,   81,    4,    5,    6,    7,    8,    9,   10,   11,
 /*  5210 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  5220 */    22,   23,   24,  164,   26,   27,   28,   29,   30,   31,
 /*  5230 */   164,  164,   34,   35,   36,  164,   38,   39,  164,   41,
 /*  5240 */    42,  164,   44,  164,  164,  164,   48,   49,   50,   51,
 /*  5250 */    52,   53,   54,   55,   56,   57,   58,  164,  164,  164,
 /*  5260 */   164,  164,  164,  164,  164,  164,  164,   69,   70,   71,
 /*  5270 */   164,  164,   74,   75,   76,   77,   78,   79,   80,   81,
 /*  5280 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*  5290 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  5300 */    24,  164,   26,   27,   28,   29,   30,   31,  164,  164,
 /*  5310 */    34,   35,   36,  164,   38,   39,  164,   41,   42,  164,
 /*  5320 */    44,  164,  164,  164,   48,   49,   50,   51,   52,   53,
 /*  5330 */    54,   55,   56,   57,   58,  164,  164,  164,  164,  164,
 /*  5340 */   164,  164,  164,  164,  164,   69,   70,   71,  164,  164,
 /*  5350 */    74,   75,   76,   77,   78,   79,   80,   81,    4,    5,
 /*  5360 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*  5370 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  164,
 /*  5380 */    26,   27,   28,   29,   30,   31,  164,  164,   34,   35,
 /*  5390 */    36,  164,   38,   39,  164,   41,   42,  164,   44,  164,
 /*  5400 */   164,  164,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  5410 */    56,   57,   58,  164,  164,  164,  164,  164,  164,  164,
 /*  5420 */   164,  164,  164,   69,   70,   71,  164,  164,   74,   75,
 /*  5430 */    76,   77,   78,   79,   80,   81,    4,    5,    6,    7,
 /*  5440 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  5450 */    18,   19,   20,   21,   22,   23,   24,  164,   26,   27,
 /*  5460 */    28,   29,   30,   31,  164,  164,   34,   35,   36,  164,
 /*  5470 */    38,   39,  164,   41,   42,  164,   44,  164,  164,  164,
 /*  5480 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  5490 */    58,  164,  164,  164,  164,  164,  164,  164,  164,  164,
 /*  5500 */   164,   69,   70,   71,  164,  164,   74,   75,   76,   77,
 /*  5510 */    78,   79,   80,   81,    4,    5,    6,    7,    8,    9,
 /*  5520 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  5530 */    20,   21,   22,   23,   24,  164,   26,   27,   28,   29,
 /*  5540 */    30,   31,  164,  164,   34,   35,   36,  164,   38,   39,
 /*  5550 */   164,   41,   42,  164,   44,  164,  164,  164,   48,   49,
 /*  5560 */    50,   51,   52,   53,   54,   55,   56,   57,   58,  164,
 /*  5570 */   164,  164,  164,  164,  164,  164,  164,  164,  164,   69,
 /*  5580 */    70,   71,  164,  164,   74,   75,   76,   77,   78,   79,
 /*  5590 */    80,   81,    4,    5,    6,    7,    8,    9,   10,   11,
 /*  5600 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  5610 */    22,   23,   24,  164,   26,   27,   28,   29,   30,   31,
 /*  5620 */   164,  164,   34,   35,   36,  164,   38,   39,  164,   41,
 /*  5630 */    42,  164,   44,  164,  164,  164,   48,   49,   50,   51,
 /*  5640 */    52,   53,   54,   55,   56,   57,   58,  164,  164,  164,
 /*  5650 */   164,  164,  164,  164,  164,  164,  164,   69,   70,   71,
 /*  5660 */   164,  164,   74,   75,   76,   77,   78,   79,   80,   81,
 /*  5670 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*  5680 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  5690 */    24,  164,   26,   27,   28,   29,   30,   31,  164,  164,
 /*  5700 */    34,   35,   36,  164,   38,   39,  164,   41,   42,  164,
 /*  5710 */    44,  164,  164,  164,   48,   49,   50,   51,   52,   53,
 /*  5720 */    54,   55,   56,   57,   58,  164,  164,  164,  164,  164,
 /*  5730 */   164,  164,  164,  164,  164,   69,   70,   71,  164,  164,
 /*  5740 */    74,   75,   76,   77,   78,   79,   80,   81,    4,    5,
 /*  5750 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*  5760 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  164,
 /*  5770 */    26,   27,   28,   29,   30,   31,  164,  164,   34,   35,
 /*  5780 */    36,  164,   38,   39,  164,   41,   42,  164,   44,  164,
 /*  5790 */   164,  164,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  5800 */    56,   57,   58,  164,  164,  164,  164,  164,  164,  164,
 /*  5810 */   164,  164,  164,   69,   70,   71,  164,  164,   74,   75,
 /*  5820 */    76,   77,   78,   79,   80,   81,    4,    5,    6,    7,
 /*  5830 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  5840 */    18,   19,   20,   21,   22,   23,   24,  164,   26,   27,
 /*  5850 */    28,   29,   30,   31,  164,  164,   34,   35,   36,  164,
 /*  5860 */    38,   39,  164,   41,   42,  164,   44,  164,  164,  164,
 /*  5870 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  5880 */    58,  164,  164,  164,  164,  164,  164,  164,  164,  164,
 /*  5890 */   164,   69,   70,   71,  164,  164,   74,   75,   76,   77,
 /*  5900 */    78,   79,   80,   81,    4,    5,    6,    7,    8,    9,
 /*  5910 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  5920 */    20,   21,   22,   23,   24,  164,   26,   27,   28,   29,
 /*  5930 */    30,   31,  164,  164,   34,   35,   36,  164,   38,   39,
 /*  5940 */   164,   41,   42,  164,   44,  164,  164,  164,   48,   49,
 /*  5950 */    50,   51,   52,   53,   54,   55,   56,   57,   58,  164,
 /*  5960 */   164,  164,  164,  164,  164,  164,  164,  164,  164,   69,
 /*  5970 */    70,   71,  164,  164,   74,   75,   76,   77,   78,   79,
 /*  5980 */    80,   81,    4,    5,    6,    7,    8,    9,   10,   11,
 /*  5990 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  6000 */    22,   23,   24,  164,   26,   27,   28,   29,   30,   31,
 /*  6010 */   164,  164,   34,   35,   36,  164,   38,   39,  164,   41,
 /*  6020 */    42,  164,   44,  164,  164,  164,   48,   49,   50,   51,
 /*  6030 */    52,   53,   54,   55,   56,   57,   58,  164,  164,  164,
 /*  6040 */   164,  164,  164,  164,  164,  164,  164,   69,   70,   71,
 /*  6050 */   164,  164,   74,   75,   76,   77,   78,   79,   80,   81,
 /*  6060 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*  6070 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  6080 */    24,  164,   26,   27,   28,   29,   30,   31,  164,  164,
 /*  6090 */    34,   35,   36,  164,   38,   39,  164,   41,   42,  164,
 /*  6100 */    44,  164,  164,  164,   48,   49,   50,   51,   52,   53,
 /*  6110 */    54,   55,   56,   57,   58,  164,  164,  164,  164,  164,
 /*  6120 */   164,  164,  164,  164,  164,   69,   70,   71,  164,  164,
 /*  6130 */    74,   75,   76,   77,   78,   79,   80,   81,    4,    5,
 /*  6140 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*  6150 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  164,
 /*  6160 */    26,   27,   28,   29,   30,   31,  164,  164,   34,   35,
 /*  6170 */    36,  164,   38,   39,  164,   41,   42,  164,   44,  164,
 /*  6180 */   164,  164,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  6190 */    56,   57,   58,  164,  164,  164,  164,  164,  164,  164,
 /*  6200 */   164,  164,  164,   69,   70,   71,  164,  164,   74,   75,
 /*  6210 */    76,   77,   78,   79,   80,   81,    4,    5,    6,    7,
 /*  6220 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  6230 */    18,   19,   20,   21,   22,   23,   24,  164,   26,   27,
 /*  6240 */    28,   29,   30,   31,  164,  164,   34,   35,   36,  164,
 /*  6250 */    38,   39,  164,   41,   42,  164,   44,  164,  164,  164,
 /*  6260 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  6270 */    58,  164,  164,  164,  164,  164,  164,  164,  164,  164,
 /*  6280 */   164,   69,   70,   71,  164,  164,   74,   75,   76,   77,
 /*  6290 */    78,   79,   80,   81,    4,    5,    6,    7,    8,    9,
 /*  6300 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  6310 */    20,   21,   22,   23,   24,  164,   26,   27,   28,   29,
 /*  6320 */    30,   31,  164,  164,   34,   35,   36,  164,   38,   39,
 /*  6330 */   164,   41,   42,  164,   44,  164,  164,  164,   48,   49,
 /*  6340 */    50,   51,   52,   53,   54,   55,   56,   57,   58,  164,
 /*  6350 */   164,  164,  164,  164,  164,  164,  164,  164,  164,   69,
 /*  6360 */    70,   71,  164,  164,   74,   75,   76,   77,   78,   79,
 /*  6370 */    80,   81,    4,    5,    6,    7,    8,    9,   10,   11,
 /*  6380 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  6390 */    22,   23,   24,  164,   26,   27,   28,   29,   30,   31,
 /*  6400 */   164,  164,   34,   35,   36,  164,   38,   39,  164,   41,
 /*  6410 */    42,  164,   44,  164,  164,  164,   48,   49,   50,   51,
 /*  6420 */    52,   53,   54,   55,   56,   57,   58,    3,  164,    5,
 /*  6430 */     3,  164,    5,  164,  164,  164,  164,   69,   70,   71,
 /*  6440 */   164,  164,   74,   75,   76,   77,   78,   79,   80,   81,
 /*  6450 */   164,   82,  164,  164,   30,  164,  164,   30,   34,   90,
 /*  6460 */   164,   34,   93,  164,  164,  164,  164,  164,   99,  164,
 /*  6470 */   164,  164,  164,  104,  105,  164,  107,  164,  109,  110,
 /*  6480 */   111,  112,  113,  114,  115,  116,  117,  118,  119,  120,
 /*  6490 */   121,  122,  123,  164,  164,  126,  164,  128,  164,  130,
 /*  6500 */   164,  164,  164,  164,  135,  136,  137,  138,  139,  140,
 /*  6510 */   164,  164,  164,  144,  164,  164,  164,  164,  164,  164,
 /*  6520 */   151,  152,  153,  154,  164,   82,  164,  164,  159,  160,
 /*  6530 */   161,  162,  163,   90,  164,  164,   93,  164,  164,  164,
 /*  6540 */   164,  164,   99,  164,  164,  164,  164,  104,  105,  164,
 /*  6550 */   107,  164,  109,  110,  111,  112,  113,  114,  115,  116,
 /*  6560 */   117,  118,  119,  120,  121,  122,  123,  164,  164,  126,
 /*  6570 */   164,  128,  164,  130,  164,  164,  164,  164,  135,  136,
 /*  6580 */   137,  138,  139,  140,  164,  164,  164,  144,  164,  164,
 /*  6590 */    82,  164,  164,  164,  151,  152,  153,  154,   90,  164,
 /*  6600 */   164,   93,  159,  160,  161,  162,  163,   99,  164,  164,
 /*  6610 */   164,  164,  104,  105,  164,  107,  164,  109,  110,  111,
 /*  6620 */   112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
 /*  6630 */   122,  123,  164,  164,  126,  164,  128,  164,  130,  164,
 /*  6640 */   164,  164,  164,  135,  136,  137,  138,  139,  140,  164,
 /*  6650 */   164,  164,  144,  164,  164,  164,  164,  164,  164,  151,
 /*  6660 */   152,  153,  154,  164,   82,  164,  164,  159,  160,  161,
 /*  6670 */   162,  163,   90,  164,  164,   93,  164,  164,  164,  164,
 /*  6680 */   164,   99,  164,  164,  164,  164,  104,  105,  164,  107,
 /*  6690 */   164,  109,  110,  111,  112,  113,  114,  115,  116,  117,
 /*  6700 */   118,  119,  120,  121,  122,  123,  164,  164,  126,  164,
 /*  6710 */   128,  164,  130,  164,  164,  164,  164,  135,  136,  137,
 /*  6720 */   138,  139,  140,  164,  164,  164,  144,  164,  164,   82,
 /*  6730 */   164,  164,  164,  151,  152,  153,  154,   90,  164,  164,
 /*  6740 */    93,  159,  160,  161,  162,  163,   99,  164,  164,  164,
 /*  6750 */   164,  104,  105,  164,  107,  164,  109,  110,  111,  112,
 /*  6760 */   113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
 /*  6770 */   123,  164,  164,  126,  164,  128,  164,  130,  164,  164,
 /*  6780 */   164,  164,  135,  136,  137,  138,  139,  140,  164,  164,
 /*  6790 */   164,  144,  164,  164,  164,  164,  164,  164,  151,  152,
 /*  6800 */   153,  154,  164,   82,  164,  164,  159,  160,  161,  162,
 /*  6810 */   163,   90,  164,  164,   93,  164,  164,  164,  164,  164,
 /*  6820 */    99,  164,  164,  164,  164,  104,  105,  164,  107,  164,
 /*  6830 */   109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
 /*  6840 */   119,  120,  121,  122,  123,  164,  164,  126,  164,  128,
 /*  6850 */   164,  130,  164,  164,  164,  164,  135,  136,  137,  138,
 /*  6860 */   139,  140,  164,  164,  164,  144,  164,  164,   82,  164,
 /*  6870 */   164,  164,  151,  152,  153,  154,   90,  164,  164,   93,
 /*  6880 */   159,  160,  161,  162,  163,   99,  164,  164,  164,  164,
 /*  6890 */   104,  105,  164,  107,  164,  109,  110,  111,  112,  113,
 /*  6900 */   114,  115,  116,  117,  118,  119,  120,  121,  122,  123,
 /*  6910 */   164,  164,  126,  164,  128,  164,  130,  164,  164,  164,
 /*  6920 */   164,  135,  136,  137,  138,  139,  140,  164,  164,  164,
 /*  6930 */   144,  164,  164,  164,  164,  164,  164,  151,  152,  153,
 /*  6940 */   154,  164,   82,  164,  164,  159,  160,  161,  162,  163,
 /*  6950 */    90,  164,  164,   93,  164,  164,  164,  164,  164,   99,
 /*  6960 */   164,  164,  164,  164,  104,  105,  164,  107,  164,  109,
 /*  6970 */   110,  111,  112,  113,  114,  115,  116,  117,  118,  119,
 /*  6980 */   120,  121,  122,  123,  164,  164,  126,  164,  128,  164,
 /*  6990 */   130,  164,  164,  164,  164,  135,  136,  137,  138,  139,
 /*  7000 */   140,  164,  164,  164,  144,  164,  164,   82,  164,  164,
 /*  7010 */   164,  151,  152,  153,  154,   90,  164,  164,   93,  159,
 /*  7020 */   160,  161,  162,  163,   99,  164,  164,  164,  164,  104,
 /*  7030 */   105,  164,  107,  164,  109,  110,  111,  112,  113,  114,
 /*  7040 */   115,  116,  117,  118,  119,  120,  121,  122,  123,  164,
 /*  7050 */   164,  126,  164,  128,  164,  130,  164,  164,  164,  164,
 /*  7060 */   135,  136,  137,  138,  139,  140,  164,  164,  164,  144,
 /*  7070 */   164,  164,  164,  164,  164,  164,  151,  152,  153,  154,
 /*  7080 */   164,   82,  164,  164,  159,  160,  161,  162,  163,   90,
 /*  7090 */   164,  164,   93,  164,  164,  164,  164,  164,   99,  164,
 /*  7100 */   164,  164,  164,  104,  105,  164,  107,  164,  109,  110,
 /*  7110 */   111,  112,  113,  114,  115,  116,  117,  118,  119,  120,
 /*  7120 */   121,  122,  123,  164,  164,  126,  164,  128,  164,  130,
 /*  7130 */   164,  164,  164,  164,  135,  136,  137,  138,  139,  140,
 /*  7140 */   164,  164,  164,  144,  164,  164,   82,  164,  164,  164,
 /*  7150 */   151,  152,  153,  154,   90,  164,  164,   93,  159,  160,
 /*  7160 */   161,  162,  163,  164,  164,  164,  164,  164,  104,  105,
 /*  7170 */   164,  107,  108,  109,  110,  111,  112,  113,  114,  115,
 /*  7180 */   116,  117,  118,  119,  120,  121,  122,  123,  164,  164,
 /*  7190 */   126,  164,  128,  164,  130,  164,  164,  164,  164,  135,
 /*  7200 */   136,  137,  138,  139,  140,  164,  164,  164,  144,  164,
 /*  7210 */   164,  164,  164,  164,  164,  151,  152,  153,  154,  164,
 /*  7220 */    82,  164,  164,  159,  160,  161,  162,  163,   90,  164,
 /*  7230 */   164,   93,  164,  164,  164,  164,  164,  164,  164,  164,
 /*  7240 */   164,  164,  104,  105,  164,  107,  164,  109,  110,  111,
 /*  7250 */   112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
 /*  7260 */   122,  123,  164,  164,  126,  164,  128,  164,  130,  164,
 /*  7270 */   164,  164,  164,  135,  136,  137,  138,  139,  140,  164,
 /*  7280 */   164,  164,  144,  164,  164,  164,  164,  164,  164,  151,
 /*  7290 */   152,  153,  154,   90,  164,  164,   93,  159,  160,  161,
 /*  7300 */   162,  163,  164,  164,  164,  164,  164,  104,  105,  164,
 /*  7310 */   107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
 /*  7320 */   117,  118,  119,  120,  121,  122,  123,  164,  164,  126,
 /*  7330 */   164,  128,  164,  130,  164,  164,  164,  164,  135,  136,
 /*  7340 */   137,  138,  139,  140,  164,  164,  164,  144,  164,  164,
 /*  7350 */   164,  164,  164,  164,  151,  152,  153,  154,  164,  164,
 /*  7360 */   164,  164,  159,  160,  161,  162,  163,   90,  164,  164,
 /*  7370 */    93,  164,  164,  164,  164,  164,  164,  164,  164,  164,
 /*  7380 */   164,  104,  105,  164,  107,  108,  109,  110,  111,  112,
 /*  7390 */   113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
 /*  7400 */   123,  164,  164,  126,  164,  128,  164,  130,  164,  112,
 /*  7410 */   113,  164,  135,  136,  137,  138,  139,  140,  164,  164,
 /*  7420 */   164,  144,  164,  126,  164,  128,  164,  130,  151,  152,
 /*  7430 */   153,  154,  135,  136,  164,  164,  159,  160,  161,  162,
 /*  7440 */   163,  164,    5,  164,  164,    8,  164,  164,  164,  164,
 /*  7450 */   164,  164,  164,  164,  157,  158,  164,   20,   21,  164,
 /*  7460 */   164,  164,  164,   26,   27,   28,  164,   30,   31,  164,
 /*  7470 */   164,   34,   35,   36,  164,   38,   39,  164,   41,   42,
 /*  7480 */   164,   44,  164,   90,  164,   48,   49,   50,   51,   52,
 /*  7490 */    53,   54,   55,   56,   57,   58,  164,  164,  164,  164,
 /*  7500 */   164,  164,  164,  110,  111,  112,   69,   70,   71,  164,
 /*  7510 */   164,   74,   75,   76,   77,   78,   79,   80,   81,  126,
 /*  7520 */     8,  128,  164,  130,  164,  164,  164,  164,  135,  136,
 /*  7530 */   164,  164,   20,   21,  164,  164,  164,  164,   26,   27,
 /*  7540 */    28,    0,   30,   31,  164,  164,  164,   35,  155,  156,
 /*  7550 */    38,   39,   40,   41,  164,  164,   44,  164,  164,  164,
 /*  7560 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  7570 */    58,  164,  164,   32,  164,  164,   35,  164,   37,   38,
 /*  7580 */    39,   69,   70,   71,   72,   73,   74,   75,   76,   77,
 /*  7590 */    78,   79,   80,   81,    8,  164,  164,   56,  164,  164,
 /*  7600 */   164,  164,  164,  164,  164,  164,   20,   21,  164,  164,
 /*  7610 */   164,  164,   26,   27,   28,  164,   30,   31,  164,  164,
 /*  7620 */   164,   35,  164,  164,   38,   39,   40,   41,  164,  164,
 /*  7630 */    44,  164,  164,  164,   48,   49,   50,   51,   52,   53,
 /*  7640 */    54,   55,   56,   57,   58,  164,  164,  164,    3,  164,
 /*  7650 */     5,  164,  164,  164,  164,   69,   70,   71,   72,   73,
 /*  7660 */    74,   75,   76,   77,   78,   79,   80,   81,    3,    4,
 /*  7670 */     5,    6,    7,  164,    9,   10,   11,   12,   13,   14,
 /*  7680 */    15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
 /*  7690 */   164,  164,   27,   28,   29,   30,  164,  164,  164,  164,
 /*  7700 */   164,   36,   57,   58,   59,   60,   61,   62,   63,   64,
 /*  7710 */    65,   66,   67,   68,  164,  164,  164,  164,  164,  164,
 /*  7720 */   164,  164,   57,   58,   59,   60,   61,   62,   63,   64,
 /*  7730 */    65,   66,   67,   68,    3,    4,    5,    6,    7,  164,
 /*  7740 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*  7750 */    19,   20,   21,   22,   23,   24,  164,  164,   27,   28,
 /*  7760 */    29,   30,  164,  164,  164,  164,  164,   36,  164,  164,
 /*  7770 */   164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
 /*  7780 */   164,  164,  164,  164,  164,  164,  164,  164,   57,   58,
 /*  7790 */    59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
 /*  7800 */     3,    4,    5,    6,    7,  164,    9,   10,   11,   12,
 /*  7810 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*  7820 */    23,   24,  112,  113,   27,   28,   29,   30,  164,  164,
 /*  7830 */   164,  164,  164,   36,  164,  164,  126,  164,  128,  164,
 /*  7840 */   130,  164,  164,  164,  164,  135,  136,  164,  164,  164,
 /*  7850 */   164,  164,  164,  164,   57,   58,   59,   60,   61,   62,
 /*  7860 */    63,   64,   65,   66,   67,   68,    8,  157,  164,  164,
 /*  7870 */   164,  164,  164,  164,  164,  164,  164,  164,   20,   21,
 /*  7880 */   164,  164,  164,  164,   26,   27,   28,    0,   30,   31,
 /*  7890 */   164,  164,  164,   35,  164,  164,   38,   39,   40,   41,
 /*  7900 */   164,  164,   44,  164,  164,  164,   48,   49,   50,   51,
 /*  7910 */    52,   53,   54,   55,   56,   57,   58,  164,  164,   32,
 /*  7920 */   164,  164,   35,  164,   37,   38,   39,   69,   70,   71,
 /*  7930 */    72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
 /*  7940 */     8,  164,  164,   56,  164,  164,  164,  164,  164,  164,
 /*  7950 */   164,  164,   20,   21,  164,  164,  164,  164,   26,   27,
 /*  7960 */    28,    0,   30,   31,  164,  164,  164,   35,  164,  164,
 /*  7970 */    38,   39,   40,   41,  164,  164,   44,  164,  164,  164,
 /*  7980 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  7990 */    58,  164,  164,   32,  164,  164,   35,  164,   37,   38,
 /*  8000 */    39,   69,   70,   71,   72,   73,   74,   75,   76,   77,
 /*  8010 */    78,   79,   80,   81,    8,  164,  164,   56,  164,  164,
 /*  8020 */   164,  164,  164,  164,  164,  164,   20,   21,  164,  164,
 /*  8030 */   164,  164,   26,   27,   28,    0,   30,   31,  164,  164,
 /*  8040 */   164,   35,  164,  164,   38,   39,   40,   41,  164,  164,
 /*  8050 */    44,  164,  164,  164,   48,   49,   50,   51,   52,   53,
 /*  8060 */    54,   55,   56,   57,   58,  164,  164,   32,  164,  164,
 /*  8070 */    35,  164,   37,   38,   39,   69,   70,   71,   72,   73,
 /*  8080 */    74,   75,   76,   77,   78,   79,   80,   81,    8,  164,
 /*  8090 */   164,   56,  164,  164,  164,  164,  164,  164,  164,  164,
 /*  8100 */    20,   21,  164,  164,  164,  164,   26,   27,   28,  164,
 /*  8110 */    30,   31,  164,  164,  164,   35,  164,  164,   38,   39,
 /*  8120 */    40,   41,  164,  164,   44,  164,  164,  164,   48,   49,
 /*  8130 */    50,   51,   52,   53,   54,   55,   56,   57,   58,  164,
 /*  8140 */   164,  164,  164,  164,  164,  164,  164,  164,  164,   69,
 /*  8150 */    70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
 /*  8160 */    80,   81,    5,  164,  164,    8,  164,  164,  164,  164,
 /*  8170 */   164,  164,  164,  164,  164,  164,  164,   20,   21,  164,
 /*  8180 */   164,  164,  164,   26,   27,   28,    0,   30,   31,  164,
 /*  8190 */   164,  164,   35,  164,  164,   38,   39,  164,   41,  164,
 /*  8200 */   164,   44,  164,  164,  164,   48,   49,   50,   51,   52,
 /*  8210 */    53,   54,   55,   56,   57,   58,  164,  164,   32,  164,
 /*  8220 */   164,   35,  164,   37,   38,   39,   69,   70,   71,  164,
 /*  8230 */   164,   74,   75,   76,   77,   78,   79,   80,   81,  164,
 /*  8240 */     8,  164,   56,  164,  164,  164,  164,  164,  164,  164,
 /*  8250 */   164,  164,   20,   21,  164,  164,  164,  164,   26,   27,
 /*  8260 */    28,  164,   30,   31,  164,  164,  164,   35,  164,  164,
 /*  8270 */    38,   39,   40,   41,  164,  164,   44,  164,   90,  164,
 /*  8280 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  8290 */    58,  164,  164,  164,  164,  164,  164,  164,  110,  111,
 /*  8300 */   112,   69,   70,   71,  164,  164,   74,   75,   76,   77,
 /*  8310 */    78,   79,   80,   81,  126,    8,  128,  164,  130,  164,
 /*  8320 */   164,  164,  164,  135,  136,  164,  164,   20,   21,  164,
 /*  8330 */   164,  164,  164,   26,   27,   28,    0,   30,   31,  164,
 /*  8340 */   164,  164,   35,  155,  164,   38,   39,   40,   41,  164,
 /*  8350 */   164,   44,  164,  164,  164,   48,   49,   50,   51,   52,
 /*  8360 */    53,   54,   55,   56,   57,   58,  164,  164,   32,  164,
 /*  8370 */   164,   35,  164,   37,   38,   39,   69,   70,   71,  164,
 /*  8380 */   164,   74,   75,   76,   77,   78,   79,   80,   81,  164,
 /*  8390 */     8,  164,   56,  164,  164,  164,  164,  164,  164,  164,
 /*  8400 */   164,  164,   20,   21,  164,  164,  164,  164,   26,   27,
 /*  8410 */    28,    0,   30,   31,  164,  164,   34,   35,  164,  164,
 /*  8420 */    38,   39,  164,   41,  164,  164,   44,  164,  164,  164,
 /*  8430 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  8440 */    58,  164,  164,   32,  164,  164,   35,  164,   37,   38,
 /*  8450 */    39,   69,   70,   71,  164,  164,   74,   75,   76,   77,
 /*  8460 */    78,   79,   80,   81,  164,    8,  164,   56,  164,  164,
 /*  8470 */   164,  164,  164,  164,  164,  164,  164,   20,   21,  164,
 /*  8480 */   164,  164,  164,   26,   27,   28,    0,   30,   31,  164,
 /*  8490 */   164,   34,   35,  164,  164,   38,   39,  164,   41,  164,
 /*  8500 */   164,   44,  164,  164,  164,   48,   49,   50,   51,   52,
 /*  8510 */    53,   54,   55,   56,   57,   58,  164,  164,   32,  164,
 /*  8520 */   164,   35,  164,   37,   38,   39,   69,   70,   71,  164,
 /*  8530 */   164,   74,   75,   76,   77,   78,   79,   80,   81,  164,
 /*  8540 */     8,  164,   56,  164,  164,  164,  164,  164,  164,  164,
 /*  8550 */   164,  164,   20,   21,  164,  164,  164,  164,   26,   27,
 /*  8560 */    28,    0,   30,   31,  164,  164,  164,   35,  164,  164,
 /*  8570 */    38,   39,   40,   41,  164,  164,   44,  164,  164,  164,
 /*  8580 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  8590 */    58,  164,  164,   32,  164,  164,   35,  164,   37,   38,
 /*  8600 */    39,   69,   70,   71,  164,  164,   74,   75,   76,   77,
 /*  8610 */    78,   79,   80,   81,  164,    8,  164,   56,  164,  164,
 /*  8620 */   164,  164,  164,  164,  164,  164,  164,   20,   21,  164,
 /*  8630 */   164,  164,  164,   26,   27,   28,    0,   30,   31,  164,
 /*  8640 */   164,  164,   35,  164,  164,   38,   39,   40,   41,  164,
 /*  8650 */   164,   44,  164,  164,  164,   48,   49,   50,   51,   52,
 /*  8660 */    53,   54,   55,   56,   57,   58,  164,  164,   32,  164,
 /*  8670 */   164,   35,  164,   37,   38,   39,   69,   70,   71,  164,
 /*  8680 */   164,   74,   75,   76,   77,   78,   79,   80,   81,  164,
 /*  8690 */     8,  164,   56,  164,  164,  164,  164,  164,  164,  164,
 /*  8700 */   164,  164,   20,   21,  164,  164,  164,  164,   26,   27,
 /*  8710 */    28,    0,   30,   31,  164,  164,  164,   35,  164,  164,
 /*  8720 */    38,   39,   40,   41,  164,  164,   44,  164,  164,  164,
 /*  8730 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  8740 */    58,  164,  164,   32,  164,  164,   35,  164,   37,   38,
 /*  8750 */    39,   69,   70,   71,  164,  164,   74,   75,   76,   77,
 /*  8760 */    78,   79,   80,   81,  164,    8,  164,   56,  164,  164,
 /*  8770 */   164,  164,  164,  164,  164,  164,  164,   20,   21,  164,
 /*  8780 */   164,  164,  164,   26,   27,   28,    0,   30,   31,  164,
 /*  8790 */   164,  164,   35,  164,  164,   38,   39,   40,   41,  164,
 /*  8800 */   164,   44,  164,  164,  164,   48,   49,   50,   51,   52,
 /*  8810 */    53,   54,   55,   56,   57,   58,  164,  164,   32,  164,
 /*  8820 */   164,   35,  164,   37,   38,   39,   69,   70,   71,  164,
 /*  8830 */   164,   74,   75,   76,   77,   78,   79,   80,   81,  164,
 /*  8840 */     8,  164,   56,  164,  164,  164,  164,  164,  164,  164,
 /*  8850 */   164,  164,   20,   21,  164,  164,  164,  164,   26,   27,
 /*  8860 */    28,    0,   30,   31,  164,  164,  164,   35,  164,  164,
 /*  8870 */    38,   39,  164,   41,  164,  164,   44,  164,  164,  164,
 /*  8880 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  8890 */    58,  164,  164,   32,  164,  164,   35,  164,   37,   38,
 /*  8900 */    39,   69,   70,   71,  164,  164,   74,   75,   76,   77,
 /*  8910 */    78,   79,   80,   81,  164,    8,  164,   56,  164,  164,
 /*  8920 */   164,  164,  164,  164,  164,  164,  164,   20,   21,  164,
 /*  8930 */   164,  164,  164,   26,   27,   28,    0,   30,   31,  164,
 /*  8940 */   164,  164,   35,  164,  164,   38,   39,  164,   41,  164,
 /*  8950 */   164,   44,  164,  164,  164,   48,   49,   50,   51,   52,
 /*  8960 */    53,   54,   55,   56,   57,   58,  164,  164,   32,  164,
 /*  8970 */   164,   35,  164,   37,   38,   39,   69,   70,   71,  164,
 /*  8980 */   164,   74,   75,   76,   77,   78,   79,   80,   81,  164,
 /*  8990 */     8,  164,   56,  164,  164,  164,  164,  164,  164,  164,
 /*  9000 */   164,  164,   20,   21,  164,  164,  164,  164,   26,   27,
 /*  9010 */    28,    0,   30,   31,  164,  164,  164,   35,  164,  164,
 /*  9020 */    38,   39,  164,   41,  164,  164,   44,  164,  164,  164,
 /*  9030 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  9040 */    58,  164,  164,   32,  164,  164,   35,  164,   37,   38,
 /*  9050 */    39,   69,   70,   71,  164,  164,   74,   75,   76,   77,
 /*  9060 */    78,   79,   80,   81,  164,    8,  164,   56,  164,  164,
 /*  9070 */   164,  164,  164,  164,  164,  164,  164,   20,   21,  164,
 /*  9080 */   164,  164,  164,   26,   27,   28,  164,   30,   31,  164,
 /*  9090 */   164,  164,   35,  164,  164,   38,   39,  164,   41,  164,
 /*  9100 */   164,   44,  164,  164,  164,   48,   49,   50,   51,   52,
 /*  9110 */    53,   54,   55,   56,   57,   58,  164,  164,  164,  164,
 /*  9120 */   164,  164,  164,  164,  164,  164,   69,   70,   71,  164,
 /*  9130 */   164,   74,   75,   76,   77,   78,   79,   80,   81,  164,
 /*  9140 */     8,  164,  164,  164,  164,  164,  164,  164,  164,  164,
 /*  9150 */   164,  164,   20,   21,  164,  164,  164,  164,   26,   27,
 /*  9160 */    28,  164,   30,   31,  164,  164,  164,   35,  164,  164,
 /*  9170 */    38,   39,  164,   41,  164,  164,   44,  164,  164,  164,
 /*  9180 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  9190 */    58,  164,  164,  164,  164,  164,  164,  164,  164,  164,
 /*  9200 */   164,   69,   70,   71,  164,  164,   74,   75,   76,   77,
 /*  9210 */    78,   79,   80,   81,  164,    8,  164,  164,  164,  164,
 /*  9220 */   164,  164,  164,  164,  164,  164,  164,   20,   21,  164,
 /*  9230 */   164,  164,  164,   26,   27,   28,  164,   30,   31,  164,
 /*  9240 */   164,  164,   35,  164,  164,   38,   39,  164,   41,  164,
 /*  9250 */   164,   44,  164,  164,  164,   48,   49,   50,   51,   52,
 /*  9260 */    53,   54,   55,   56,   57,   58,  164,  164,  164,  164,
 /*  9270 */   164,  164,  164,  164,  164,  164,   69,   70,   71,  164,
 /*  9280 */   164,   74,   75,   76,   77,   78,   79,   80,   81,    3,
 /*  9290 */     4,    5,    6,    7,  164,    9,   10,   11,   12,   13,
 /*  9300 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  9310 */    24,  164,  164,   27,   28,   29,  164,  164,    4,    5,
 /*  9320 */     6,    7,   36,    9,   10,   11,   12,   13,   14,   15,
 /*  9330 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  164,
 /*  9340 */   164,   27,   28,   29,   30,  164,    4,    5,    6,    7,
 /*  9350 */    36,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  9360 */    18,   19,   20,   21,   22,   23,   24,  164,  164,   27,
 /*  9370 */    28,   29,   30,  164,    4,    5,    6,    7,   36,    9,
 /*  9380 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  9390 */    20,   21,   22,   23,   24,  164,  164,   27,   28,   29,
 /*  9400 */    30,  164,    4,    5,    6,    7,   36,    9,   10,   11,
 /*  9410 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  9420 */    22,   23,   24,  164,  164,   27,   28,   29,   30,  164,
 /*  9430 */     4,    5,    6,    7,   36,    9,   10,   11,   12,   13,
 /*  9440 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  9450 */    24,  164,  164,   27,   28,   29,   30,  164,    4,    5,
 /*  9460 */     6,    7,   36,    9,   10,   11,   12,   13,   14,   15,
 /*  9470 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  164,
 /*  9480 */   164,   27,   28,   29,   30,  164,    4,    5,    6,    7,
 /*  9490 */    36,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  9500 */    18,   19,   20,   21,   22,   23,   24,  164,  164,   27,
 /*  9510 */    28,   29,   30,  164,    4,    5,    6,    7,   36,    9,
 /*  9520 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  9530 */    20,   21,   22,   23,   24,  164,  164,   27,   28,   29,
 /*  9540 */    30,  164,    4,    5,    6,    7,   36,    9,   10,   11,
 /*  9550 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  9560 */    22,   23,   24,  164,  164,   27,   28,   29,   30,  164,
 /*  9570 */     4,    5,    6,    7,   36,    9,   10,   11,   12,   13,
 /*  9580 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  9590 */    24,  164,  164,   27,   28,   29,   30,  164,    4,    5,
 /*  9600 */     6,    7,   36,    9,   10,   11,   12,   13,   14,   15,
 /*  9610 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  164,
 /*  9620 */   164,   27,   28,   29,   30,  164,    4,    5,    6,    7,
 /*  9630 */    36,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  9640 */    18,   19,   20,   21,   22,   23,   24,  164,  164,   27,
 /*  9650 */    28,   29,   30,  164,    4,    5,    6,    7,   36,    9,
 /*  9660 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  9670 */    20,   21,   22,   23,   24,  164,  164,   27,   28,   29,
 /*  9680 */    30,  164,    4,    5,    6,    7,   36,    9,   10,   11,
 /*  9690 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  9700 */    22,   23,   24,    8,  164,   27,   28,   29,  164,  164,
 /*  9710 */   164,  164,  164,  164,   36,   20,   21,  164,  164,  164,
 /*  9720 */   164,   26,   27,   28,  164,   30,   31,  164,  164,  164,
 /*  9730 */    35,  164,  164,  164,   39,  164,   41,  164,  164,   44,
 /*  9740 */   164,  164,  164,   48,   49,   50,   51,   52,   53,   54,
 /*  9750 */   164,   56,   57,   58,    4,    5,    6,    7,  164,    9,
 /*  9760 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  9770 */    20,   21,   22,   23,   24,   80,   81,   27,   28,   29,
 /*  9780 */     8,  164,  164,  164,  164,  164,   36,  164,  164,  164,
 /*  9790 */   164,  164,   20,   21,  164,  164,  164,  164,   26,   27,
 /*  9800 */    28,  164,   30,   31,  164,  164,  164,   35,  164,  164,
 /*  9810 */   164,   39,  164,   41,  164,  164,   44,  164,  164,  164,
 /*  9820 */    48,   49,   50,   51,   52,   53,   54,  164,   56,   57,
 /*  9830 */    58,    4,  164,    6,    7,  164,    9,   10,   11,   12,
 /*  9840 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*  9850 */    23,   24,   80,   81,   27,   28,   29,    4,  164,    6,
 /*  9860 */     7,   34,    9,   10,   11,   12,   13,   14,   15,   16,
 /*  9870 */    17,   18,   19,   20,   21,   22,   23,   24,  164,  164,
 /*  9880 */    27,   28,   29,  164,  164,  164,  164,  164,  164,  164,
 /*  9890 */   164,  164,  164,  164,  164,   42,  164,  164,  164,  164,
 /*  9900 */     4,  164,    6,    7,  164,    9,   10,   11,   12,   13,
 /*  9910 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  9920 */    24,  164,  164,   27,   28,   29,  164,  164,    4,  164,
 /*  9930 */     6,    7,   36,    9,   10,   11,   12,   13,   14,   15,
 /*  9940 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  164,
 /*  9950 */   164,   27,   28,   29,  164,  164,    4,  164,    6,    7,
 /*  9960 */    36,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  9970 */    18,   19,   20,   21,   22,   23,   24,  164,  164,   27,
 /*  9980 */    28,   29,  164,  164,    4,  164,    6,    7,   36,    9,
 /*  9990 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /* 10000 */    20,   21,   22,   23,   24,  164,  164,   27,   28,   29,
 /* 10010 */   164,  164,    4,  164,    6,    7,   36,    9,   10,   11,
 /* 10020 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /* 10030 */    22,   23,   24,  164,  164,   27,   28,   29,  164,  164,
 /* 10040 */     4,  164,    6,    7,   36,    9,   10,   11,   12,   13,
 /* 10050 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /* 10060 */    24,  164,  164,   27,   28,   29,  164,  164,    4,  164,
 /* 10070 */     6,    7,   36,    9,   10,   11,   12,   13,   14,   15,
 /* 10080 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  164,
 /* 10090 */   164,   27,   28,   29,   30,  164,    4,  164,    6,    7,
 /* 10100 */   164,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /* 10110 */    18,   19,   20,   21,   22,   23,   24,  164,  164,   27,
 /* 10120 */    28,   29,   30,  164,    4,  164,    6,    7,  164,    9,
 /* 10130 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /* 10140 */    20,   21,   22,   23,   24,    8,  164,   27,   28,   29,
 /* 10150 */   164,  164,  164,  164,  164,  164,  164,   20,   21,  164,
 /* 10160 */   164,  164,   42,   26,   27,   28,  164,  164,   31,  164,
 /* 10170 */   164,  164,   35,  164,  164,  164,   39,  164,   41,  164,
 /* 10180 */   164,   44,  164,  164,  164,   48,   49,   50,   51,   52,
 /* 10190 */    53,   54,  164,   56,   57,   58,    4,  164,    6,    7,
 /* 10200 */   164,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /* 10210 */    18,   19,   20,   21,   22,   23,   24,   80,   81,   27,
 /* 10220 */    28,   29,    8,  164,  164,  164,  164,  164,  164,  164,
 /* 10230 */   164,  164,  164,  164,   20,   21,  164,  164,  164,  164,
 /* 10240 */    26,   27,   28,  164,  164,   31,  164,  164,  164,   35,
 /* 10250 */    36,  164,  164,  164,  164,   41,  164,  164,   44,  164,
 /* 10260 */   164,  164,   48,   49,   50,   51,   52,   53,   54,  164,
 /* 10270 */   164,   57,   58,    8,  164,  164,  164,  164,  164,  164,
 /* 10280 */   164,  164,  164,  164,  164,   20,   21,  164,  164,  164,
 /* 10290 */   164,   26,   27,   28,   80,   81,   31,  164,  164,  164,
 /* 10300 */    35,   36,  164,  164,  164,  164,   41,  164,  164,   44,
 /* 10310 */   164,  164,  164,   48,   49,   50,   51,   52,   53,   54,
 /* 10320 */   164,  164,   57,   58,    8,  164,  164,  164,  164,  164,
 /* 10330 */   164,  164,  164,  164,  164,  164,   20,   21,  164,  164,
 /* 10340 */   164,  164,   26,   27,   28,   80,   81,   31,  164,  164,
 /* 10350 */   164,   35,   36,  164,  164,  164,  164,   41,   42,  164,
 /* 10360 */    44,  164,  164,  164,   48,   49,   50,   51,   52,   53,
 /* 10370 */    54,  164,  164,  164,  164,    8,  164,  164,  164,  164,
 /* 10380 */   164,  164,  164,  164,  164,  164,  164,   20,   21,  164,
 /* 10390 */   164,  164,  164,   26,   27,   28,   80,   81,   31,  164,
 /* 10400 */   164,  164,   35,   36,  164,  164,  164,  164,   41,  164,
 /* 10410 */   164,   44,  164,   46,  164,   48,   49,   50,   51,   52,
 /* 10420 */    53,   54,    8,  164,  164,  164,  164,  164,  164,  164,
 /* 10430 */   164,  164,  164,  164,   20,   21,  164,  164,  164,  164,
 /* 10440 */    26,   27,   28,  164,  164,   31,  164,   80,   81,   35,
 /* 10450 */   164,  164,  164,  164,  164,   41,  164,  164,   44,  164,
 /* 10460 */   164,  164,   48,   49,   50,   51,   52,   53,   54,  164,
 /* 10470 */   164,   57,   58,    8,  164,  164,  164,  164,  164,  164,
 /* 10480 */   164,  164,  164,  164,  164,   20,   21,  164,  164,  164,
 /* 10490 */   164,   26,   27,   28,   80,   81,   31,  164,  164,  164,
 /* 10500 */    35,  164,  164,  164,  164,  164,   41,  164,  164,   44,
 /* 10510 */   164,   46,  164,   48,   49,   50,   51,   52,   53,   54,
 /* 10520 */     8,  164,  164,  164,  164,  164,  164,  164,  164,  164,
 /* 10530 */   164,  164,   20,   21,  164,  164,  164,  164,   26,   27,
 /* 10540 */    28,  164,   30,   31,  164,   80,   81,   35,  164,  164,
 /* 10550 */   164,  164,  164,   41,  164,    8,   44,  164,  164,  164,
 /* 10560 */    48,   49,   50,   51,   52,   53,   54,   20,   21,  164,
 /* 10570 */   164,  164,  164,   26,   27,   28,  164,  164,   31,  164,
 /* 10580 */   164,  164,   35,  164,  164,  164,  164,  164,   41,  164,
 /* 10590 */   164,   44,   80,   81,  164,   48,   49,   50,   51,   52,
 /* 10600 */    53,   54,    8,  164,  164,  164,  164,  164,  164,  164,
 /* 10610 */   164,  164,  164,  164,   20,   21,  164,  164,  164,  164,
 /* 10620 */    26,   27,   28,  164,  164,   31,  164,   80,   81,   35,
 /* 10630 */   164,  164,  164,  164,  164,   41,  164,    8,   44,  164,
 /* 10640 */   164,  164,   48,   49,   50,   51,   52,   53,   54,   20,
 /* 10650 */    21,  164,  164,  164,  164,   26,   27,   28,  164,  164,
 /* 10660 */    31,  164,  164,  164,   35,  164,  164,  164,  164,  164,
 /* 10670 */    41,  164,  164,   44,   80,   81,  164,   48,   49,   50,
 /* 10680 */    51,   52,   53,   54,    8,  164,  164,  164,  164,  164,
 /* 10690 */   164,  164,  164,  164,  164,  164,   20,   21,  164,  164,
 /* 10700 */   164,  164,   26,   27,   28,  164,  164,   31,  164,   80,
 /* 10710 */    81,   35,  164,  164,  164,  164,  164,   41,  164,  164,
 /* 10720 */    44,  164,  164,  164,   48,   49,   50,   51,   52,   53,
 /* 10730 */    54,  164,  164,  164,  164,  164,  164,  164,  164,  164,
 /* 10740 */    82,  164,  164,   85,   86,   87,   88,   89,   90,   91,
 /* 10750 */    92,   93,  164,  164,  164,   97,   80,   81,  100,  164,
 /* 10760 */   164,  164,  164,  105,  164,  107,
};
#define YY_SHIFT_USE_DFLT (-3)
#define YY_SHIFT_COUNT (404)
#define YY_SHIFT_MIN   (-2)
#define YY_SHIFT_MAX   (10676)
static const short yy_shift_ofst[] = {
 /*     0 */  9011, 8757, 9207, 9207, 9207, 9207, 9207, 9207, 9207, 9207,
 /*    10 */  9207, 9207, 8080, 8006, 8682, 8607, 8532, 8936, 9772, 10137,
 /*    20 */  10265, 10414, 10367, 10367, 10367, 10367, 10367, 10367, 10512, 1961,
 /*    30 */  10465, 10629, 10629, 10629, 10629, 10676, 10676, 10629, 10676, 10629,
 /*    40 */  10629, 10629, 10629, 10629, 10629, 10629, 1569, 2624, 10316, 10629,
 /*    50 */  10629, 10629, 10629, 10629, 10629, 10629, 10629, 10629, 10629, 10629,
 /*    60 */  10629, 10629, 10629, 10629, 10629, 10629, 10629, 10629, 10629, 10629,
 /*    70 */  10629, 10629, 10629, 10629, 10629, 10629, 10629, 10629, 10629, 10629,
 /*    80 */  10629, 10629, 10629, 10629, 10629, 10629, 10629, 10629, 10629, 10629,
 /*    90 */  10629, 10629, 10629, 10629, 10629, 10629,  932,  932,  932, 1992,
 /*   100 */  1595, 1595, 8457, 8457, 8382, 2886, 2886,  123, 1446, 1446,
 /*   110 */  1446, 1446, 1446, 1446, 1399, 1357, 1349, 2542, 2460, 2378,
 /*   120 */  2296, 2214, 2132, 2050, 1968, 1886, 1804, 1722, 1640, 1558,
 /*   130 */  1476, 1394, 1312, 1230, 1148, 1066,  984,  902,  820,  738,
 /*   140 */   656,  574,  492,  410,  328,  246,  164,   82,    0, 3092,
 /*   150 */  3014, 2936, 2858, 2780, 2702, 6368, 6290, 6212, 6134, 6056,
 /*   160 */  5978, 5900, 5822, 5744, 5666, 5588, 5510, 5432, 5354, 5276,
 /*   170 */  5198, 5120, 5042, 4964, 4886, 4808, 4730, 4652, 4574, 4496,
 /*   180 */  4418, 4340, 4262, 4184, 4106, 4028, 3950, 3872, 3794, 3716,
 /*   190 */  3638, 3560, 3482, 3404, 3326, 3248, 3170, 7437, 7932, 7858,
 /*   200 */  7797, 7731, 7665, 7586, 7512, 8307, 8232, 8157, 9132, 9057,
 /*   210 */  8982, 8907, 8832, 9650, 9622, 9594, 9566, 9538, 9510, 9482,
 /*   220 */  9454, 9426, 9398, 9370, 9342, 9314, 9286, 9750, 9695, 9678,
 /*   230 */  10120, 10092, 10064, 10036, 10008, 9980, 9952, 9924, 9896, 9853,
 /*   240 */  9827, 10214, 10192, 10594, 10547, 7645, 8861, 8786, 8711, 8636,
 /*   250 */  8561, 8486, 8411, 8336, 8186, 8035, 7961, 7887, 7541, 6427,
 /*   260 */  6424, 2734, 2822, 1913, 1910, 1503, 1501, 3202, 1387,  485,
 /*   270 */  3124, 3046, 2968, 2890, 2812, 2744,  851,  769,  687, 2662,
 /*   280 */   408, 2597,  524, 2580, 2885,  438, 2808, 2807, 2730, 2729,
 /*   290 */  2515, 2498, 2433, 2416, 1941,  465,  274,  385,  244,  301,
 /*   300 */   221,  137,   -2,   55, 2652, 2570, 2488, 2406,  102,   41,
 /*   310 */    20, 1343, 1335, 1331, 1306, 1285, 1275, 1266, 1260, 1240,
 /*   320 */  1227, 1219, 1197, 1191, 1182, 1178, 1167, 1179, 1177, 1143,
 /*   330 */  1115, 1118, 1107, 1096, 1076, 1097, 1098, 1055, 1042, 1025,
 /*   340 */  1027, 1012, 1009, 1016,  994,  982,  960,  949,  943,  934,
 /*   350 */   909,  896,  846,  869,  867,  859,  855,  830,  852,  809,
 /*   360 */   796,  785,  760,  777,  748,  754,  770,  727,  695,  697,
 /*   370 */   703,  676,  691,  688,  660,  640,  631,  626,  612,  608,
 /*   380 */   590,  569,  547,  545,  529,  508,  448,  437,  405,  429,
 /*   390 */   365,  353,  332,  320,  286,  277,  265,  240,  180,  201,
 /*   400 */   200,  167,  159,   85,    3,
};
#define YY_REDUCE_USE_DFLT (-84)
#define YY_REDUCE_COUNT (116)
#define YY_REDUCE_MIN   (-83)
#define YY_REDUCE_MAX   (10658)
static const short yy_reduce_ofst[] = {
 /*     0 */    66, 7064, 6999, 6925, 6860, 6786, 6721, 6647, 6582, 6508,
 /*    10 */  6443, 6369, 7138, 7277, 7138, 7203, 7138, 10658, 7393, 8188,
 /*    20 */  7297, 7710,  343,  261,  179,   97,   15,  -67,  511,  406,
 /*    30 */  1164, 1741, 1659, 1577, 1495, 1409, 1327, 1249, 1163, 1085,
 /*    40 */  1003,  921,  839,  757,  675,  593,  488, 1887,  -83, 2230,
 /*    50 */  2229, 2213, 2148, 2147, 2131, 2066, 2065, 2049, 1984, 1983,
 /*    60 */  1967, 1885, 1803, 1738, 1721, 1656, 1639, 1574, 1557, 1492,
 /*    70 */  1475, 1393, 1328, 1311, 1246, 1229, 1147, 1082, 1065, 1000,
 /*    80 */   983,  918,  901,  836,  819,  737,  655,  573,  491,  409,
 /*    90 */   327,  245,  163,   81,   -1,  -83, 2800, 2722, 2644,  -35,
 /*   100 */   392,  228, 1529, 1524, 1522, 1470, 1449, 1427, 1432, 1395,
 /*   110 */  1382, 1374, 1352, 1334, 1295, 1289, 1284,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*    10 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*    20 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*    30 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*    40 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*    50 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*    60 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*    70 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*    80 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*    90 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   100 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   110 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   120 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   130 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   140 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   150 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   160 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   170 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   180 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   190 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   200 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   210 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   220 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   230 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   240 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   250 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   260 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   270 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   280 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   290 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   300 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   310 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   320 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   330 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   340 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   350 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   360 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   370 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   380 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   390 */   610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
 /*   400 */   610,  610,  610,  610,  610,
};

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  ParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

// We always want to have a ParseTrace. ParseTrace is only available on NDEBUG mode, so we explicitly set it.
#ifdef NDEBUG
#undef NDEBUG
#endif



#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static const char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/*
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void ParseTrace(FILE *TraceFILE, const char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "IFX",           "ELSE",          "ASSIGN",      
  "QMARK",         "COMMA",         "LOR",           "LAND",        
  "LNOT",          "EQ",            "LE",            "LT",          
  "GE",            "GT",            "NE",            "BITOR",       
  "BITXOR",        "BITAND",        "LSHIFT",        "RSHIFT",      
  "PLUS",          "MINUS",         "DIVIDE",        "MULTIPLY",    
  "MOD",           "UNARY",         "BITNOT",        "LPAREN",      
  "LSQBRACKET",    "PERIOD",        "SEMICOLON",     "NAME",        
  "IMPORT",        "AS",            "COLON",         "FUNCTION",    
  "RPAREN",        "OBJECT",        "LBRACKET",      "VAR",         
  "RBRACKET",      "NUMBER",        "RSQBRACKET",    "SUBSCRIPT",   
  "KILLS",         "MEMBER",        "STRING",        "FUNCCALL",    
  "L2V",           "MAPSTRING",     "UNIT",          "SWITCH",      
  "LOCATION",      "VARRAY",        "LIST",          "STATIC",      
  "CONST",         "INC",           "DEC",           "IADD",        
  "ISUB",          "IMUL",          "IDIV",          "IMOD",        
  "ILSH",          "IRSH",          "IBND",          "IBOR",        
  "IBXR",          "ONCE",          "IF",            "SWITCHCASE",  
  "CASE",          "DEFAULT",       "WHILE",         "FOR",         
  "FOREACH",       "CONTINUE",      "BREAK",         "RETURN",      
  "CONDITIONNAME",  "ACTIONNAME",    "error",         "program",     
  "chunks",        "chunk",         "import_chunk",  "fdef_chunk",  
  "fdecl_chunk",   "object_chunk",  "vdef_stmt",     "vdefAssign_global_stmt",
  "cdef_global_stmt",  "blockStmt",     "dottedName",    "fdef_rettypes",
  "exprList_nonEmpty",  "fdef_header",   "typedNameList",  "stmt",        
  "object_body",   "typedNameList_nonEmpty",  "method_header",  "method_chunk",
  "bodyStmt",      "lbracket",      "rbracket",      "blockStmtSub",
  "bodyStmtList",  "vdefAssignStatic_stmt",  "vdefAssign_stmt",  "cdef_stmt",   
  "assign_stmt",   "funcexprStmt",  "actionStmt",    "once_stmt",   
  "if_stmt",       "while_stmt",    "for_stmt",      "foreach_stmt",
  "switchcase_stmt",  "continue_stmt",  "break_stmt",    "return_stmt", 
  "numList_nonEmpty",  "typedName",     "expr",          "nameList_nonEmpty",
  "funcexpr",      "exprList",      "lambdaExprStart",  "fArg",        
  "fArgs_nonEmpty",  "fArgs",         "commaSkippable",  "lvalue",      
  "lvalueList_nonEmpty",  "once_start",    "if_start",      "if_header",   
  "if_block",      "elif_start",    "elif_header",   "else_header", 
  "switchcase_header",  "case_start",    "case_clause",   "case_chunk",  
  "case_chunks",   "default_clause",  "default_chunk",  "switchcase_block",
  "while_start",   "while_header",  "for_opener",    "for_init_stmt_nonEmpty",
  "for_init_stmt",  "for_action_stmt_nonEmpty",  "for_action_stmt",  "for_header1", 
  "for_header2",   "for_header",    "foreach_opener",  "foreach_header",
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "program ::= chunks",
 /*   1 */ "chunks ::=",
 /*   2 */ "chunks ::= chunks chunk",
 /*   3 */ "chunks ::= chunks error",
 /*   4 */ "chunk ::= import_chunk SEMICOLON",
 /*   5 */ "chunk ::= fdef_chunk",
 /*   6 */ "chunk ::= fdecl_chunk",
 /*   7 */ "chunk ::= object_chunk",
 /*   8 */ "chunk ::= vdef_stmt SEMICOLON",
 /*   9 */ "chunk ::= vdefAssign_global_stmt SEMICOLON",
 /*  10 */ "chunk ::= cdef_global_stmt SEMICOLON",
 /*  11 */ "chunk ::= blockStmt",
 /*  12 */ "dottedName ::= NAME",
 /*  13 */ "dottedName ::= dottedName PERIOD NAME",
 /*  14 */ "import_chunk ::= IMPORT dottedName AS NAME",
 /*  15 */ "import_chunk ::= IMPORT dottedName",
 /*  16 */ "fdef_rettypes ::=",
 /*  17 */ "fdef_rettypes ::= COLON exprList_nonEmpty",
 /*  18 */ "fdef_header ::= FUNCTION NAME LPAREN typedNameList RPAREN fdef_rettypes",
 /*  19 */ "fdef_chunk ::= fdef_header stmt",
 /*  20 */ "fdecl_chunk ::= FUNCTION NAME LPAREN typedNameList RPAREN SEMICOLON",
 /*  21 */ "object_body ::= OBJECT NAME LBRACKET",
 /*  22 */ "object_body ::= object_body VAR typedNameList_nonEmpty SEMICOLON",
 /*  23 */ "method_header ::= FUNCTION NAME LPAREN typedNameList RPAREN fdef_rettypes",
 /*  24 */ "method_chunk ::= method_header stmt",
 /*  25 */ "object_body ::= object_body method_chunk",
 /*  26 */ "object_chunk ::= object_body RBRACKET SEMICOLON",
 /*  27 */ "stmt ::= error SEMICOLON",
 /*  28 */ "stmt ::= bodyStmt",
 /*  29 */ "lbracket ::= LBRACKET",
 /*  30 */ "rbracket ::= RBRACKET",
 /*  31 */ "blockStmt ::= blockStmtSub rbracket",
 /*  32 */ "blockStmt ::= lbracket error RBRACKET",
 /*  33 */ "blockStmtSub ::= lbracket",
 /*  34 */ "blockStmtSub ::= lbracket bodyStmtList",
 /*  35 */ "bodyStmt ::= blockStmt",
 /*  36 */ "bodyStmt ::= SEMICOLON",
 /*  37 */ "bodyStmt ::= vdef_stmt SEMICOLON",
 /*  38 */ "bodyStmt ::= vdefAssignStatic_stmt SEMICOLON",
 /*  39 */ "bodyStmt ::= vdefAssign_stmt SEMICOLON",
 /*  40 */ "bodyStmt ::= cdef_stmt SEMICOLON",
 /*  41 */ "bodyStmt ::= assign_stmt SEMICOLON",
 /*  42 */ "bodyStmt ::= funcexprStmt SEMICOLON",
 /*  43 */ "bodyStmt ::= actionStmt",
 /*  44 */ "bodyStmt ::= once_stmt",
 /*  45 */ "bodyStmt ::= if_stmt",
 /*  46 */ "bodyStmt ::= while_stmt",
 /*  47 */ "bodyStmt ::= for_stmt",
 /*  48 */ "bodyStmt ::= foreach_stmt",
 /*  49 */ "bodyStmt ::= switchcase_stmt",
 /*  50 */ "bodyStmt ::= continue_stmt SEMICOLON",
 /*  51 */ "bodyStmt ::= break_stmt SEMICOLON",
 /*  52 */ "bodyStmt ::= return_stmt SEMICOLON",
 /*  53 */ "bodyStmtList ::= bodyStmt",
 /*  54 */ "bodyStmtList ::= bodyStmtList bodyStmt",
 /*  55 */ "bodyStmtList ::= bodyStmtList error",
 /*  56 */ "numList_nonEmpty ::= NUMBER",
 /*  57 */ "numList_nonEmpty ::= numList_nonEmpty COMMA NUMBER",
 /*  58 */ "typedName ::= NAME",
 /*  59 */ "typedName ::= NAME COLON expr",
 /*  60 */ "typedNameList_nonEmpty ::= typedName",
 /*  61 */ "typedNameList_nonEmpty ::= typedName COMMA typedNameList_nonEmpty",
 /*  62 */ "typedNameList ::=",
 /*  63 */ "typedNameList ::= typedNameList_nonEmpty",
 /*  64 */ "nameList_nonEmpty ::= NAME",
 /*  65 */ "nameList_nonEmpty ::= nameList_nonEmpty COMMA NAME",
 /*  66 */ "exprList_nonEmpty ::= funcexpr LSQBRACKET LSQBRACKET numList_nonEmpty RSQBRACKET RSQBRACKET",
 /*  67 */ "expr ::= funcexpr LSQBRACKET LSQBRACKET NUMBER RSQBRACKET RSQBRACKET",
 /*  68 */ "exprList_nonEmpty ::= expr",
 /*  69 */ "exprList_nonEmpty ::= exprList_nonEmpty COMMA expr",
 /*  70 */ "exprList ::=",
 /*  71 */ "exprList ::= exprList_nonEmpty",
 /*  72 */ "expr ::= NUMBER",
 /*  73 */ "expr ::= KILLS",
 /*  74 */ "expr ::= NAME",
 /*  75 */ "expr ::= expr PERIOD NAME",
 /*  76 */ "expr ::= expr LSQBRACKET expr RSQBRACKET",
 /*  77 */ "lambdaExprStart ::= FUNCTION LPAREN typedNameList RPAREN fdef_rettypes",
 /*  78 */ "expr ::= lambdaExprStart stmt",
 /*  79 */ "fArg ::= expr",
 /*  80 */ "fArg ::= STRING",
 /*  81 */ "fArg ::= NAME ASSIGN expr",
 /*  82 */ "fArgs_nonEmpty ::= fArg",
 /*  83 */ "fArgs_nonEmpty ::= fArgs_nonEmpty COMMA fArg",
 /*  84 */ "fArgs ::=",
 /*  85 */ "fArgs ::= fArgs_nonEmpty",
 /*  86 */ "funcexprStmt ::= funcexpr",
 /*  87 */ "funcexpr ::= NAME LPAREN fArgs RPAREN",
 /*  88 */ "funcexpr ::= expr LPAREN fArgs RPAREN",
 /*  89 */ "expr ::= funcexpr",
 /*  90 */ "expr ::= LPAREN expr RPAREN",
 /*  91 */ "commaSkippable ::= COMMA",
 /*  92 */ "commaSkippable ::=",
 /*  93 */ "expr ::= LSQBRACKET exprList_nonEmpty commaSkippable RSQBRACKET",
 /*  94 */ "expr ::= L2V LPAREN expr RPAREN",
 /*  95 */ "expr ::= MAPSTRING LPAREN STRING RPAREN",
 /*  96 */ "expr ::= UNIT LPAREN STRING RPAREN",
 /*  97 */ "expr ::= SWITCH LPAREN STRING RPAREN",
 /*  98 */ "expr ::= LOCATION LPAREN STRING RPAREN",
 /*  99 */ "expr ::= VARRAY LPAREN exprList_nonEmpty commaSkippable RPAREN",
 /* 100 */ "expr ::= LIST LPAREN exprList_nonEmpty commaSkippable RPAREN",
 /* 101 */ "expr ::= expr QMARK expr COLON expr",
 /* 102 */ "expr ::= expr PLUS expr",
 /* 103 */ "expr ::= expr MINUS expr",
 /* 104 */ "expr ::= expr MULTIPLY expr",
 /* 105 */ "expr ::= expr DIVIDE expr",
 /* 106 */ "expr ::= expr MOD expr",
 /* 107 */ "expr ::= expr LSHIFT expr",
 /* 108 */ "expr ::= expr RSHIFT expr",
 /* 109 */ "expr ::= expr BITAND expr",
 /* 110 */ "expr ::= expr BITOR expr",
 /* 111 */ "expr ::= expr BITXOR expr",
 /* 112 */ "expr ::= PLUS expr",
 /* 113 */ "expr ::= MINUS expr",
 /* 114 */ "expr ::= BITNOT expr",
 /* 115 */ "expr ::= expr EQ expr",
 /* 116 */ "expr ::= expr NE expr",
 /* 117 */ "expr ::= expr LE expr",
 /* 118 */ "expr ::= expr GE expr",
 /* 119 */ "expr ::= expr LT expr",
 /* 120 */ "expr ::= expr GT expr",
 /* 121 */ "expr ::= expr LAND expr",
 /* 122 */ "expr ::= expr LOR expr",
 /* 123 */ "expr ::= LNOT expr",
 /* 124 */ "vdef_stmt ::= VAR nameList_nonEmpty",
 /* 125 */ "vdefAssign_stmt ::= VAR nameList_nonEmpty ASSIGN exprList_nonEmpty",
 /* 126 */ "vdefAssignStatic_stmt ::= STATIC VAR nameList_nonEmpty ASSIGN exprList_nonEmpty",
 /* 127 */ "vdefAssign_global_stmt ::= VAR nameList_nonEmpty ASSIGN exprList_nonEmpty",
 /* 128 */ "cdef_stmt ::= CONST nameList_nonEmpty ASSIGN exprList_nonEmpty",
 /* 129 */ "cdef_global_stmt ::= CONST nameList_nonEmpty ASSIGN exprList_nonEmpty",
 /* 130 */ "lvalue ::= NAME",
 /* 131 */ "lvalue ::= expr LSQBRACKET expr RSQBRACKET",
 /* 132 */ "lvalue ::= expr PERIOD NAME",
 /* 133 */ "lvalueList_nonEmpty ::= lvalue",
 /* 134 */ "lvalueList_nonEmpty ::= lvalueList_nonEmpty COMMA lvalue",
 /* 135 */ "assign_stmt ::= lvalue ASSIGN expr",
 /* 136 */ "assign_stmt ::= lvalueList_nonEmpty ASSIGN exprList_nonEmpty",
 /* 137 */ "assign_stmt ::= INC lvalue",
 /* 138 */ "assign_stmt ::= lvalue INC",
 /* 139 */ "assign_stmt ::= DEC lvalue",
 /* 140 */ "assign_stmt ::= lvalue DEC",
 /* 141 */ "assign_stmt ::= lvalue IADD expr",
 /* 142 */ "assign_stmt ::= lvalue ISUB expr",
 /* 143 */ "assign_stmt ::= lvalue IMUL expr",
 /* 144 */ "assign_stmt ::= lvalue IDIV expr",
 /* 145 */ "assign_stmt ::= lvalue IMOD expr",
 /* 146 */ "assign_stmt ::= lvalue ILSH expr",
 /* 147 */ "assign_stmt ::= lvalue IRSH expr",
 /* 148 */ "assign_stmt ::= lvalue IBND expr",
 /* 149 */ "assign_stmt ::= lvalue IBOR expr",
 /* 150 */ "assign_stmt ::= lvalue IBXR expr",
 /* 151 */ "once_start ::= ONCE",
 /* 152 */ "once_stmt ::= once_start stmt",
 /* 153 */ "if_start ::= IF",
 /* 154 */ "if_header ::= if_start LPAREN expr",
 /* 155 */ "if_block ::= if_header RPAREN stmt",
 /* 156 */ "elif_start ::= ELSE IF",
 /* 157 */ "elif_header ::= elif_start LPAREN expr",
 /* 158 */ "if_block ::= if_block elif_header RPAREN stmt",
 /* 159 */ "else_header ::= ELSE",
 /* 160 */ "if_stmt ::= if_block",
 /* 161 */ "if_stmt ::= if_block else_header stmt",
 /* 162 */ "switchcase_header ::= SWITCHCASE LPAREN expr",
 /* 163 */ "case_start ::= CASE",
 /* 164 */ "case_clause ::= case_start exprList_nonEmpty COLON",
 /* 165 */ "case_chunk ::= case_clause",
 /* 166 */ "case_chunk ::= case_clause bodyStmtList",
 /* 167 */ "case_chunks ::= case_chunks case_chunk",
 /* 168 */ "case_chunks ::= case_chunk",
 /* 169 */ "default_clause ::= DEFAULT COLON",
 /* 170 */ "default_chunk ::= default_clause",
 /* 171 */ "default_chunk ::= default_clause bodyStmtList",
 /* 172 */ "switchcase_block ::= switchcase_header RPAREN LBRACKET case_chunks default_chunk",
 /* 173 */ "switchcase_block ::= switchcase_header RPAREN LBRACKET case_chunks",
 /* 174 */ "switchcase_stmt ::= switchcase_block RBRACKET",
 /* 175 */ "while_start ::= WHILE",
 /* 176 */ "while_header ::= while_start LPAREN expr",
 /* 177 */ "while_stmt ::= while_header RPAREN stmt",
 /* 178 */ "for_opener ::= FOR LPAREN",
 /* 179 */ "for_init_stmt_nonEmpty ::= vdef_stmt",
 /* 180 */ "for_init_stmt_nonEmpty ::= vdefAssign_stmt",
 /* 181 */ "for_init_stmt_nonEmpty ::= cdef_stmt",
 /* 182 */ "for_init_stmt_nonEmpty ::= assign_stmt",
 /* 183 */ "for_init_stmt_nonEmpty ::= for_init_stmt_nonEmpty COMMA for_init_stmt_nonEmpty",
 /* 184 */ "for_init_stmt ::= for_init_stmt_nonEmpty",
 /* 185 */ "for_init_stmt ::=",
 /* 186 */ "for_action_stmt_nonEmpty ::= funcexprStmt",
 /* 187 */ "for_action_stmt_nonEmpty ::= assign_stmt",
 /* 188 */ "for_action_stmt_nonEmpty ::= for_action_stmt_nonEmpty COMMA for_action_stmt_nonEmpty",
 /* 189 */ "for_action_stmt ::=",
 /* 190 */ "for_action_stmt ::= for_action_stmt_nonEmpty",
 /* 191 */ "for_header1 ::= for_opener for_init_stmt SEMICOLON",
 /* 192 */ "for_header2 ::= for_header1 expr SEMICOLON",
 /* 193 */ "for_header ::= for_header2 for_action_stmt",
 /* 194 */ "for_stmt ::= for_header RPAREN stmt",
 /* 195 */ "foreach_opener ::= FOREACH LPAREN",
 /* 196 */ "foreach_header ::= foreach_opener nameList_nonEmpty COLON exprList_nonEmpty",
 /* 197 */ "foreach_stmt ::= foreach_header RPAREN stmt",
 /* 198 */ "continue_stmt ::= CONTINUE",
 /* 199 */ "break_stmt ::= BREAK",
 /* 200 */ "return_stmt ::= RETURN exprList",
 /* 201 */ "expr ::= CONDITIONNAME LPAREN fArgs RPAREN",
 /* 202 */ "expr ::= KILLS LPAREN fArgs RPAREN",
 /* 203 */ "actionStmt ::= ACTIONNAME LPAREN fArgs RPAREN SEMICOLON",
 /* 204 */ "expr ::= ACTIONNAME LPAREN fArgs RPAREN",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to Parse and ParseFree.
*/
void *ParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  ParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
      /* TERMINAL Destructor */
    case 1: /* IFX */
    case 2: /* ELSE */
    case 3: /* ASSIGN */
    case 4: /* QMARK */
    case 5: /* COMMA */
    case 6: /* LOR */
    case 7: /* LAND */
    case 8: /* LNOT */
    case 9: /* EQ */
    case 10: /* LE */
    case 11: /* LT */
    case 12: /* GE */
    case 13: /* GT */
    case 14: /* NE */
    case 15: /* BITOR */
    case 16: /* BITXOR */
    case 17: /* BITAND */
    case 18: /* LSHIFT */
    case 19: /* RSHIFT */
    case 20: /* PLUS */
    case 21: /* MINUS */
    case 22: /* DIVIDE */
    case 23: /* MULTIPLY */
    case 24: /* MOD */
    case 25: /* UNARY */
    case 26: /* BITNOT */
    case 27: /* LPAREN */
    case 28: /* LSQBRACKET */
    case 29: /* PERIOD */
    case 30: /* SEMICOLON */
    case 31: /* NAME */
    case 32: /* IMPORT */
    case 33: /* AS */
    case 34: /* COLON */
    case 35: /* FUNCTION */
    case 36: /* RPAREN */
    case 37: /* OBJECT */
    case 38: /* LBRACKET */
    case 39: /* VAR */
    case 40: /* RBRACKET */
    case 41: /* NUMBER */
    case 42: /* RSQBRACKET */
    case 43: /* SUBSCRIPT */
    case 44: /* KILLS */
    case 45: /* MEMBER */
    case 46: /* STRING */
    case 47: /* FUNCCALL */
    case 48: /* L2V */
    case 49: /* MAPSTRING */
    case 50: /* UNIT */
    case 51: /* SWITCH */
    case 52: /* LOCATION */
    case 53: /* VARRAY */
    case 54: /* LIST */
    case 55: /* STATIC */
    case 56: /* CONST */
    case 57: /* INC */
    case 58: /* DEC */
    case 59: /* IADD */
    case 60: /* ISUB */
    case 61: /* IMUL */
    case 62: /* IDIV */
    case 63: /* IMOD */
    case 64: /* ILSH */
    case 65: /* IRSH */
    case 66: /* IBND */
    case 67: /* IBOR */
    case 68: /* IBXR */
    case 69: /* ONCE */
    case 70: /* IF */
    case 71: /* SWITCHCASE */
    case 72: /* CASE */
    case 73: /* DEFAULT */
    case 74: /* WHILE */
    case 75: /* FOR */
    case 76: /* FOREACH */
    case 77: /* CONTINUE */
    case 78: /* BREAK */
    case 79: /* RETURN */
    case 80: /* CONDITIONNAME */
    case 81: /* ACTIONNAME */
{
 delete (yypminor->yy0); 
}
      break;
      /* Default NON-TERMINAL Destructor */
    case 83: /* program */
    case 84: /* chunks */
    case 85: /* chunk */
    case 86: /* import_chunk */
    case 87: /* fdef_chunk */
    case 88: /* fdecl_chunk */
    case 89: /* object_chunk */
    case 90: /* vdef_stmt */
    case 91: /* vdefAssign_global_stmt */
    case 92: /* cdef_global_stmt */
    case 93: /* blockStmt */
    case 94: /* dottedName */
    case 95: /* fdef_rettypes */
    case 96: /* exprList_nonEmpty */
    case 97: /* fdef_header */
    case 98: /* typedNameList */
    case 99: /* stmt */
    case 100: /* object_body */
    case 101: /* typedNameList_nonEmpty */
    case 102: /* method_header */
    case 103: /* method_chunk */
    case 104: /* bodyStmt */
    case 105: /* lbracket */
    case 106: /* rbracket */
    case 107: /* blockStmtSub */
    case 108: /* bodyStmtList */
    case 109: /* vdefAssignStatic_stmt */
    case 110: /* vdefAssign_stmt */
    case 111: /* cdef_stmt */
    case 112: /* assign_stmt */
    case 113: /* funcexprStmt */
    case 114: /* actionStmt */
    case 115: /* once_stmt */
    case 116: /* if_stmt */
    case 117: /* while_stmt */
    case 118: /* for_stmt */
    case 119: /* foreach_stmt */
    case 120: /* switchcase_stmt */
    case 121: /* continue_stmt */
    case 122: /* break_stmt */
    case 123: /* return_stmt */
    case 124: /* numList_nonEmpty */
    case 125: /* typedName */
    case 126: /* expr */
    case 127: /* nameList_nonEmpty */
    case 128: /* funcexpr */
    case 129: /* exprList */
    case 130: /* lambdaExprStart */
    case 131: /* fArg */
    case 132: /* fArgs_nonEmpty */
    case 133: /* fArgs */
    case 134: /* commaSkippable */
    case 135: /* lvalue */
    case 136: /* lvalueList_nonEmpty */
    case 137: /* once_start */
    case 138: /* if_start */
    case 139: /* if_header */
    case 140: /* if_block */
    case 141: /* elif_start */
    case 142: /* elif_header */
    case 143: /* else_header */
    case 144: /* switchcase_header */
    case 145: /* case_start */
    case 146: /* case_clause */
    case 147: /* case_chunk */
    case 148: /* case_chunks */
    case 149: /* default_clause */
    case 150: /* default_chunk */
    case 151: /* switchcase_block */
    case 152: /* while_start */
    case 153: /* while_header */
    case 154: /* for_opener */
    case 155: /* for_init_stmt_nonEmpty */
    case 156: /* for_init_stmt */
    case 157: /* for_action_stmt_nonEmpty */
    case 158: /* for_action_stmt */
    case 159: /* for_header1 */
    case 160: /* for_header2 */
    case 161: /* for_header */
    case 162: /* foreach_opener */
    case 163: /* foreach_header */
{
 delete (yypminor->yy0); 
}
      break;
    case 82: /* error */
{

}
      break;
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from ParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void ParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int ParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_COUNT
   || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( 
#if YY_SHIFT_MIN+YYWILDCARD<0
          j>=0 &&
#endif
#if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT
          j<YY_ACTTAB_COUNT &&
#endif
          yy_lookahead[j]==YYWILDCARD
        ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   ParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   ParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 83, 1 },
  { 84, 0 },
  { 84, 2 },
  { 84, 2 },
  { 85, 2 },
  { 85, 1 },
  { 85, 1 },
  { 85, 1 },
  { 85, 2 },
  { 85, 2 },
  { 85, 2 },
  { 85, 1 },
  { 94, 1 },
  { 94, 3 },
  { 86, 4 },
  { 86, 2 },
  { 95, 0 },
  { 95, 2 },
  { 97, 6 },
  { 87, 2 },
  { 88, 6 },
  { 100, 3 },
  { 100, 4 },
  { 102, 6 },
  { 103, 2 },
  { 100, 2 },
  { 89, 3 },
  { 99, 2 },
  { 99, 1 },
  { 105, 1 },
  { 106, 1 },
  { 93, 2 },
  { 93, 3 },
  { 107, 1 },
  { 107, 2 },
  { 104, 1 },
  { 104, 1 },
  { 104, 2 },
  { 104, 2 },
  { 104, 2 },
  { 104, 2 },
  { 104, 2 },
  { 104, 2 },
  { 104, 1 },
  { 104, 1 },
  { 104, 1 },
  { 104, 1 },
  { 104, 1 },
  { 104, 1 },
  { 104, 1 },
  { 104, 2 },
  { 104, 2 },
  { 104, 2 },
  { 108, 1 },
  { 108, 2 },
  { 108, 2 },
  { 124, 1 },
  { 124, 3 },
  { 125, 1 },
  { 125, 3 },
  { 101, 1 },
  { 101, 3 },
  { 98, 0 },
  { 98, 1 },
  { 127, 1 },
  { 127, 3 },
  { 96, 6 },
  { 126, 6 },
  { 96, 1 },
  { 96, 3 },
  { 129, 0 },
  { 129, 1 },
  { 126, 1 },
  { 126, 1 },
  { 126, 1 },
  { 126, 3 },
  { 126, 4 },
  { 130, 5 },
  { 126, 2 },
  { 131, 1 },
  { 131, 1 },
  { 131, 3 },
  { 132, 1 },
  { 132, 3 },
  { 133, 0 },
  { 133, 1 },
  { 113, 1 },
  { 128, 4 },
  { 128, 4 },
  { 126, 1 },
  { 126, 3 },
  { 134, 1 },
  { 134, 0 },
  { 126, 4 },
  { 126, 4 },
  { 126, 4 },
  { 126, 4 },
  { 126, 4 },
  { 126, 4 },
  { 126, 5 },
  { 126, 5 },
  { 126, 5 },
  { 126, 3 },
  { 126, 3 },
  { 126, 3 },
  { 126, 3 },
  { 126, 3 },
  { 126, 3 },
  { 126, 3 },
  { 126, 3 },
  { 126, 3 },
  { 126, 3 },
  { 126, 2 },
  { 126, 2 },
  { 126, 2 },
  { 126, 3 },
  { 126, 3 },
  { 126, 3 },
  { 126, 3 },
  { 126, 3 },
  { 126, 3 },
  { 126, 3 },
  { 126, 3 },
  { 126, 2 },
  { 90, 2 },
  { 110, 4 },
  { 109, 5 },
  { 91, 4 },
  { 111, 4 },
  { 92, 4 },
  { 135, 1 },
  { 135, 4 },
  { 135, 3 },
  { 136, 1 },
  { 136, 3 },
  { 112, 3 },
  { 112, 3 },
  { 112, 2 },
  { 112, 2 },
  { 112, 2 },
  { 112, 2 },
  { 112, 3 },
  { 112, 3 },
  { 112, 3 },
  { 112, 3 },
  { 112, 3 },
  { 112, 3 },
  { 112, 3 },
  { 112, 3 },
  { 112, 3 },
  { 112, 3 },
  { 137, 1 },
  { 115, 2 },
  { 138, 1 },
  { 139, 3 },
  { 140, 3 },
  { 141, 2 },
  { 142, 3 },
  { 140, 4 },
  { 143, 1 },
  { 116, 1 },
  { 116, 3 },
  { 144, 3 },
  { 145, 1 },
  { 146, 3 },
  { 147, 1 },
  { 147, 2 },
  { 148, 2 },
  { 148, 1 },
  { 149, 2 },
  { 150, 1 },
  { 150, 2 },
  { 151, 5 },
  { 151, 4 },
  { 120, 2 },
  { 152, 1 },
  { 153, 3 },
  { 117, 3 },
  { 154, 2 },
  { 155, 1 },
  { 155, 1 },
  { 155, 1 },
  { 155, 1 },
  { 155, 3 },
  { 156, 1 },
  { 156, 0 },
  { 157, 1 },
  { 157, 1 },
  { 157, 3 },
  { 158, 0 },
  { 158, 1 },
  { 159, 3 },
  { 160, 3 },
  { 161, 2 },
  { 118, 3 },
  { 162, 2 },
  { 163, 4 },
  { 119, 3 },
  { 121, 1 },
  { 122, 1 },
  { 123, 2 },
  { 126, 4 },
  { 126, 4 },
  { 114, 5 },
  { 126, 4 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  ParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 0: /* program ::= chunks */
{
  yy_destructor(yypParser,84,&yymsp[0].minor);
}
        break;
      case 2: /* chunks ::= chunks chunk */
{
  yy_destructor(yypParser,84,&yymsp[-1].minor);
  yy_destructor(yypParser,85,&yymsp[0].minor);
}
        break;
      case 3: /* chunks ::= chunks error */
{
    throw_error(13494, "Chunk-level error");
  yy_destructor(yypParser,84,&yymsp[-1].minor);
  yy_destructor(yypParser,82,&yymsp[0].minor);
}
        break;
      case 4: /* chunk ::= import_chunk SEMICOLON */
{
  yy_destructor(yypParser,86,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 5: /* chunk ::= fdef_chunk */
{
  yy_destructor(yypParser,87,&yymsp[0].minor);
}
        break;
      case 6: /* chunk ::= fdecl_chunk */
{
  yy_destructor(yypParser,88,&yymsp[0].minor);
}
        break;
      case 7: /* chunk ::= object_chunk */
{
  yy_destructor(yypParser,89,&yymsp[0].minor);
}
        break;
      case 8: /* chunk ::= vdef_stmt SEMICOLON */
      case 37: /* bodyStmt ::= vdef_stmt SEMICOLON */ yytestcase(yyruleno==37);
{
  yy_destructor(yypParser,90,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 9: /* chunk ::= vdefAssign_global_stmt SEMICOLON */
{
  yy_destructor(yypParser,91,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 10: /* chunk ::= cdef_global_stmt SEMICOLON */
{
  yy_destructor(yypParser,92,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 11: /* chunk ::= blockStmt */
{
    throw_error(48993, "Misplaced block statement");
  yy_destructor(yypParser,93,&yymsp[0].minor);
}
        break;
      case 12: /* dottedName ::= NAME */
      case 56: /* numList_nonEmpty ::= NUMBER */ yytestcase(yyruleno==56);
      case 63: /* typedNameList ::= typedNameList_nonEmpty */ yytestcase(yyruleno==63);
      case 64: /* nameList_nonEmpty ::= NAME */ yytestcase(yyruleno==64);
      case 68: /* exprList_nonEmpty ::= expr */ yytestcase(yyruleno==68);
      case 71: /* exprList ::= exprList_nonEmpty */ yytestcase(yyruleno==71);
      case 72: /* expr ::= NUMBER */ yytestcase(yyruleno==72);
      case 79: /* fArg ::= expr */ yytestcase(yyruleno==79);
      case 80: /* fArg ::= STRING */ yytestcase(yyruleno==80);
      case 82: /* fArgs_nonEmpty ::= fArg */ yytestcase(yyruleno==82);
      case 85: /* fArgs ::= fArgs_nonEmpty */ yytestcase(yyruleno==85);
      case 89: /* expr ::= funcexpr */ yytestcase(yyruleno==89);
      case 133: /* lvalueList_nonEmpty ::= lvalue */ yytestcase(yyruleno==133);
{ yygotominor.yy0 = yymsp[0].minor.yy0; }
        break;
      case 13: /* dottedName ::= dottedName PERIOD NAME */
{
    yymsp[0].minor.yy0->data = yymsp[-2].minor.yy0->data + "." + yymsp[0].minor.yy0->data;
    delete yymsp[-2].minor.yy0;
    yygotominor.yy0 = yymsp[0].minor.yy0;
  yy_destructor(yypParser,29,&yymsp[-1].minor);
}
        break;
      case 14: /* import_chunk ::= IMPORT dottedName AS NAME */
{
    std::string impPath, impModname;
    impPathProcess(yymsp[-2].minor.yy0->data, impPath, impModname);

    if(!ps->closure.defModule(yymsp[0].minor.yy0->data)) {
        throw_error(6754, "Importing already-declared module " + yymsp[0].minor.yy0->data, yymsp[0].minor.yy0->line);
    }

    if(!impPath.empty()) ps->gen << "from " << impPath << " ";
    ps->gen << "import " << impModname << " as " << yymsp[0].minor.yy0->data << std::endl;
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,32,&yymsp[-3].minor);
  yy_destructor(yypParser,33,&yymsp[-1].minor);
}
        break;
      case 15: /* import_chunk ::= IMPORT dottedName */
{
    std::string impPath, impModname;
    impPathProcess(yymsp[0].minor.yy0->data, impPath, impModname);

    if(!ps->closure.defModule(impModname)) {
        throw_error(6754, "Importing already-declared module " + impModname, yymsp[0].minor.yy0->line);
    }

    if(!impPath.empty()) ps->gen << "from " << impPath << " ";
    ps->gen << "import " << impModname << std::endl;
    delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,32,&yymsp[-1].minor);
}
        break;
      case 16: /* fdef_rettypes ::= */
      case 62: /* typedNameList ::= */ yytestcase(yyruleno==62);
{ yygotominor.yy0 = nullptr; }
        break;
      case 17: /* fdef_rettypes ::= COLON exprList_nonEmpty */
{ yygotominor.yy0 = yymsp[0].minor.yy0;   yy_destructor(yypParser,34,&yymsp[-1].minor);
}
        break;
      case 18: /* fdef_header ::= FUNCTION NAME LPAREN typedNameList RPAREN fdef_rettypes */
{
    // Preprocess yymsp[-4].minor.yy0
    funcNamePreprocess(yymsp[-4].minor.yy0->data);
    if(!ps->closure.defFunction(yymsp[-4].minor.yy0->data)) {
        throw_error(4495, "Duplicate function " + yymsp[-4].minor.yy0->data, yymsp[-4].minor.yy0->line);
    }

    ps->closure.pushScope();
    currentFunction = yymsp[-4].minor.yy0->data;

    // Register variables.
    // yymsp[-2].minor.yy0->data is a comma-seperated list of (yymsp[-4].minor.yy0, type). To pair names and types,
    // we store varname in odd loops and define variables on even loops.
    std::string argname;
    std::vector<std::string> argnames, types;
    bool isTypedFunction = !!yymsp[0].minor.yy0;

    subTokenListIter(yymsp[-2].minor.yy0, [&](const Token* typedNameToken) {
        auto argnameToken = typedNameToken->subToken[0];
        auto typeToken = typedNameToken->subToken[1];
        std::string argname = argnameToken->data;

        if(typeToken == nullptr) {
            if(!ps->closure.defVariable(argname)) {
                throw_error(196, ("Redeclaration of variable \'" + argname + "\'"), yymsp[-2].minor.yy0->line);
            }
            argnames.push_back(argname);
            types.push_back("None");
        }
        else {
            isTypedFunction = true;
            if(!ps->closure.defConstant(argname)) {
                throw_error(7714, ("Redeclaration of typed constant \'" + argname + "\'"), yymsp[-2].minor.yy0->line);
            }
            argnames.push_back(argname);
            types.push_back(typeToken->data);
        }
    });

    // Add decorator header
    if (!isTypedFunction) {
        if(MAP_DEBUG) ps->gen << "@EUDTracedFunc" << std::endl;
        else ps->gen << "@EUDFunc" << std::endl;
    }
    else {
        if(MAP_DEBUG) ps->gen << "@EUDTracedTypedFunc([";
        else ps->gen << "@EUDTypedFunc([";
        writeStringList(ps->gen, types);
        if(!yymsp[0].minor.yy0) ps->gen << "])" << std::endl;
        else ps->gen << "], [" << yymsp[0].minor.yy0->data << "])" << std::endl;
    }

    // Write argument names
    ps->gen << "def " << yymsp[-4].minor.yy0->data << "(";
    writeStringList(ps->gen, argnames);
    ps->gen << "):" << std::endl;

    ps->gen.indent();

    tmpIndex = 1;
    delete yymsp[-4].minor.yy0;
    delete yymsp[-2].minor.yy0;
    delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,35,&yymsp[-5].minor);
  yy_destructor(yypParser,27,&yymsp[-3].minor);
  yy_destructor(yypParser,36,&yymsp[-1].minor);
}
        break;
      case 19: /* fdef_chunk ::= fdef_header stmt */
{
    ps->gen.unindent(true);
    ps->closure.popScope();
    currentFunction = "";
  yy_destructor(yypParser,97,&yymsp[-1].minor);
  yy_destructor(yypParser,99,&yymsp[0].minor);
}
        break;
      case 20: /* fdecl_chunk ::= FUNCTION NAME LPAREN typedNameList RPAREN SEMICOLON */
{
    // Preprocess yymsp[-4].minor.yy0
    funcNamePreprocess(yymsp[-4].minor.yy0->data);
    if(!ps->closure.declareFunction(yymsp[-4].minor.yy0->data)) {
        throw_error(72461, "Declaring function with non-function yymsp[-4].minor.yy0 " + yymsp[-4].minor.yy0->data, yymsp[-4].minor.yy0->line);
    }
  yy_destructor(yypParser,35,&yymsp[-5].minor);
  yy_destructor(yypParser,27,&yymsp[-3].minor);
  yy_destructor(yypParser,98,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 21: /* object_body ::= OBJECT NAME LBRACKET */
{
    ps->gen << "class " << yymsp[-1].minor.yy0->data << "(EUDStruct):\n";
    ps->gen.indent();

    if(!ps->closure.defConstant(yymsp[-1].minor.yy0->data)) {
        throw_error(8228, "Declaring object with non-function yymsp[-1].minor.yy0 " + yymsp[-1].minor.yy0->data, yymsp[-1].minor.yy0->line);
    }
    ps->closure.pushScope();

    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->subToken[0] = yymsp[-1].minor.yy0;
    yygotominor.yy0->subToken[1] = nullptr;
  yy_destructor(yypParser,37,&yymsp[-2].minor);
  yy_destructor(yypParser,38,&yymsp[0].minor);
}
        break;
      case 22: /* object_body ::= object_body VAR typedNameList_nonEmpty SEMICOLON */
{
    yygotominor.yy0 = yymsp[-3].minor.yy0;

    // Append to subTokenList
    Token* t = genEmpty();
    t->subToken[0] = yymsp[-1].minor.yy0;
    t->subToken[1] = nullptr;
    subTokenListGetTail(yygotominor.yy0)->subToken[1] = t;
    yygotominor.yy0->line = currentTokenizingLine;
  yy_destructor(yypParser,39,&yymsp[-2].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 23: /* method_header ::= FUNCTION NAME LPAREN typedNameList RPAREN fdef_rettypes */
{
    // Method can't be called directly, so we shouldn't have to register it to closure.
    // duplicate method names should be checked at python-compile time.

    ps->closure.pushScope();

    // Register variables.
    std::string _this = "this";  // This may be modified...?
    if(!ps->closure.defConstant(_this)) {
        throw_error(656, ("Redeclaration of variable \'this\'"), yymsp[-2].minor.yy0->line);
    }

    std::string argname;
    std::vector<std::string> argnames, types;
    bool isTypedFunction = !!yymsp[0].minor.yy0;
    subTokenListIter(yymsp[-2].minor.yy0, [&](const Token* typedNameToken) {
        auto argnameToken = typedNameToken->subToken[0];
        auto typeToken = typedNameToken->subToken[1];
        std::string argname = argnameToken->data;

        if(typeToken == nullptr) {
            if(!ps->closure.defVariable(argname)) {
                throw_error(2656, ("Redeclaration of variable \'" + argname + "\'"), yymsp[-2].minor.yy0->line);
            }
            argnames.push_back(argname);
            types.push_back("None");
        }
        else {
            isTypedFunction = true;
            if(!ps->closure.defConstant(argname)) {
                throw_error(9788, ("Redeclaration of typed constant \'" + argname + "\'"), yymsp[-2].minor.yy0->line);
            }
            argnames.push_back(argname);
            types.push_back(typeToken->data);
        }
    });

    // Add decorator header
    if (!isTypedFunction) {
        if(MAP_DEBUG) ps->gen << "@EUDTracedMethod\n";
        else ps->gen << "@EUDMethod\n";
    }
    else {
        if(MAP_DEBUG) ps->gen << "@EUDTracedTypedMethod([";
        else ps->gen << "@EUDTypedMethod([";
        writeStringList(ps->gen, types);
        if(!yymsp[0].minor.yy0) ps->gen << "])" << std::endl;
        else ps->gen << "], [" << yymsp[0].minor.yy0->data << "])" << std::endl;
    }

    // Add default argument 'self'
    ps->gen << "def " << yymsp[-4].minor.yy0->data << "(" << _this;
    if (argnames.empty()) ps->gen << "):" << std::endl;
    else {
        ps->gen << ", ";
        writeStringList(ps->gen, argnames);
        ps->gen << "):" << std::endl;
    }
    ps->gen.indent();

    currentFunction = yymsp[-4].minor.yy0->data;

    tmpIndex = 1;
    delete yymsp[-2].minor.yy0;
    delete yymsp[0].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[-4].minor.yy0);
  yy_destructor(yypParser,35,&yymsp[-5].minor);
  yy_destructor(yypParser,27,&yymsp[-3].minor);
  yy_destructor(yypParser,36,&yymsp[-1].minor);
}
        break;
      case 24: /* method_chunk ::= method_header stmt */
{
    ps->gen.unindent(true);
    ps->closure.popScope();
    currentFunction = "";
    yygotominor.yy0 = yymsp[-1].minor.yy0;
  yy_destructor(yypParser,99,&yymsp[0].minor);
}
        break;
      case 25: /* object_body ::= object_body method_chunk */
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
    yygotominor.yy0->line = currentTokenizingLine;
  yy_destructor(yypParser,103,&yymsp[0].minor);
}
        break;
      case 26: /* object_chunk ::= object_body RBRACKET SEMICOLON */
{
    ps->gen << "_fields_ = [\n";
    subTokenListIter(yymsp[-2].minor.yy0->subToken[1], [&](const Token* tok) {
        subTokenListIter(tok, [&](const Token* nameType) {
            ps->gen.indent();
            if(nameType->subToken[1]) {
                ps->gen << "('" << nameType->subToken[0]->data << "', " << nameType->subToken[1]->data << "),\n";
            }
            else {
                ps->gen << "'" << nameType->subToken[0]->data << "',\n";
            }
            ps->gen.unindent(false);
        });
    });
    ps->gen << "]\n";
    ps->closure.popScope();
    ps->gen.unindent(true);
    delete yymsp[-2].minor.yy0;
  yy_destructor(yypParser,40,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 27: /* stmt ::= error SEMICOLON */
{ throw_error(6974, "Error while parsing statement", yymsp[0].minor.yy0->line); delete yymsp[0].minor.yy0;   yy_destructor(yypParser,82,&yymsp[-1].minor);
}
        break;
      case 28: /* stmt ::= bodyStmt */
      case 53: /* bodyStmtList ::= bodyStmt */ yytestcase(yyruleno==53);
{
  yy_destructor(yypParser,104,&yymsp[0].minor);
}
        break;
      case 29: /* lbracket ::= LBRACKET */
{ ps->closure.pushScope();   yy_destructor(yypParser,38,&yymsp[0].minor);
}
        break;
      case 30: /* rbracket ::= RBRACKET */
{ ps->closure.popScope();   yy_destructor(yypParser,40,&yymsp[0].minor);
}
        break;
      case 31: /* blockStmt ::= blockStmtSub rbracket */
{
  yy_destructor(yypParser,107,&yymsp[-1].minor);
  yy_destructor(yypParser,106,&yymsp[0].minor);
}
        break;
      case 32: /* blockStmt ::= lbracket error RBRACKET */
{
    throw_error(6298, "Block not terminated properly.", yymsp[0].minor.yy0->line);
    ps->closure.popScope();
    delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,105,&yymsp[-2].minor);
  yy_destructor(yypParser,82,&yymsp[-1].minor);
}
        break;
      case 33: /* blockStmtSub ::= lbracket */
{
  yy_destructor(yypParser,105,&yymsp[0].minor);
}
        break;
      case 34: /* blockStmtSub ::= lbracket bodyStmtList */
{
  yy_destructor(yypParser,105,&yymsp[-1].minor);
  yy_destructor(yypParser,108,&yymsp[0].minor);
}
        break;
      case 35: /* bodyStmt ::= blockStmt */
{
  yy_destructor(yypParser,93,&yymsp[0].minor);
}
        break;
      case 36: /* bodyStmt ::= SEMICOLON */
{
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 38: /* bodyStmt ::= vdefAssignStatic_stmt SEMICOLON */
{
  yy_destructor(yypParser,109,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 39: /* bodyStmt ::= vdefAssign_stmt SEMICOLON */
{
  yy_destructor(yypParser,110,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 40: /* bodyStmt ::= cdef_stmt SEMICOLON */
{
  yy_destructor(yypParser,111,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 41: /* bodyStmt ::= assign_stmt SEMICOLON */
{
  yy_destructor(yypParser,112,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 42: /* bodyStmt ::= funcexprStmt SEMICOLON */
{
  yy_destructor(yypParser,113,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 43: /* bodyStmt ::= actionStmt */
{
  yy_destructor(yypParser,114,&yymsp[0].minor);
}
        break;
      case 44: /* bodyStmt ::= once_stmt */
{
  yy_destructor(yypParser,115,&yymsp[0].minor);
}
        break;
      case 45: /* bodyStmt ::= if_stmt */
{
  yy_destructor(yypParser,116,&yymsp[0].minor);
}
        break;
      case 46: /* bodyStmt ::= while_stmt */
{
  yy_destructor(yypParser,117,&yymsp[0].minor);
}
        break;
      case 47: /* bodyStmt ::= for_stmt */
{
  yy_destructor(yypParser,118,&yymsp[0].minor);
}
        break;
      case 48: /* bodyStmt ::= foreach_stmt */
{
  yy_destructor(yypParser,119,&yymsp[0].minor);
}
        break;
      case 49: /* bodyStmt ::= switchcase_stmt */
{
  yy_destructor(yypParser,120,&yymsp[0].minor);
}
        break;
      case 50: /* bodyStmt ::= continue_stmt SEMICOLON */
{
  yy_destructor(yypParser,121,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 51: /* bodyStmt ::= break_stmt SEMICOLON */
{
  yy_destructor(yypParser,122,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 52: /* bodyStmt ::= return_stmt SEMICOLON */
{
  yy_destructor(yypParser,123,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 54: /* bodyStmtList ::= bodyStmtList bodyStmt */
{
  yy_destructor(yypParser,108,&yymsp[-1].minor);
  yy_destructor(yypParser,104,&yymsp[0].minor);
}
        break;
      case 55: /* bodyStmtList ::= bodyStmtList error */
{
    throw_error(8510, "Incomplete statement. Check if the previous line have ended properly.");
  yy_destructor(yypParser,108,&yymsp[-1].minor);
  yy_destructor(yypParser,82,&yymsp[0].minor);
}
        break;
      case 57: /* numList_nonEmpty ::= numList_nonEmpty COMMA NUMBER */
      case 65: /* nameList_nonEmpty ::= nameList_nonEmpty COMMA NAME */ yytestcase(yyruleno==65);
      case 134: /* lvalueList_nonEmpty ::= lvalueList_nonEmpty COMMA lvalue */ yytestcase(yyruleno==134);
{ yygotominor.yy0 = commaConcat(yymsp[-2].minor.yy0, yymsp[0].minor.yy0);   yy_destructor(yypParser,5,&yymsp[-1].minor);
}
        break;
      case 58: /* typedName ::= NAME */
{
    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->subToken[0] = yymsp[0].minor.yy0;
    yygotominor.yy0->subToken[1] = nullptr;  // Type is null.
}
        break;
      case 59: /* typedName ::= NAME COLON expr */
{
    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->subToken[0] = yymsp[-2].minor.yy0;
    yygotominor.yy0->subToken[1] = yymsp[0].minor.yy0;
  yy_destructor(yypParser,34,&yymsp[-1].minor);
}
        break;
      case 60: /* typedNameList_nonEmpty ::= typedName */
{
    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->subToken[0] = yymsp[0].minor.yy0;
    yygotominor.yy0->subToken[1] = nullptr;
}
        break;
      case 61: /* typedNameList_nonEmpty ::= typedName COMMA typedNameList_nonEmpty */
{
    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->subToken[0] = yymsp[-2].minor.yy0;
    yygotominor.yy0->subToken[1] = yymsp[0].minor.yy0;
  yy_destructor(yypParser,5,&yymsp[-1].minor);
}
        break;
      case 66: /* exprList_nonEmpty ::= funcexpr LSQBRACKET LSQBRACKET numList_nonEmpty RSQBRACKET RSQBRACKET */
{
    yymsp[-2].minor.yy0->data = "_SRET(" + yymsp[-5].minor.yy0->data + ", [" + yymsp[-2].minor.yy0->data + "])";
    delete yymsp[-5].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[-2].minor.yy0);
  yy_destructor(yypParser,28,&yymsp[-4].minor);
  yy_destructor(yypParser,28,&yymsp[-3].minor);
  yy_destructor(yypParser,42,&yymsp[-1].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
        break;
      case 67: /* expr ::= funcexpr LSQBRACKET LSQBRACKET NUMBER RSQBRACKET RSQBRACKET */
{
    yymsp[-2].minor.yy0->data = yymsp[-5].minor.yy0->data + "[" + yymsp[-2].minor.yy0->data + "]";
    delete yymsp[-5].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[-2].minor.yy0);
  yy_destructor(yypParser,28,&yymsp[-4].minor);
  yy_destructor(yypParser,28,&yymsp[-3].minor);
  yy_destructor(yypParser,42,&yymsp[-1].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
        break;
      case 69: /* exprList_nonEmpty ::= exprList_nonEmpty COMMA expr */
{ yygotominor.yy0 = new Token((yymsp[-2].minor.yy0->data) + ", " + (yymsp[0].minor.yy0->data), yymsp[0].minor.yy0->line); delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;   yy_destructor(yypParser,5,&yymsp[-1].minor);
}
        break;
      case 70: /* exprList ::= */
      case 84: /* fArgs ::= */ yytestcase(yyruleno==84);
{ yygotominor.yy0 = genEmpty(); }
        break;
      case 73: /* expr ::= KILLS */
{
    yymsp[0].minor.yy0->data = "4";
    yygotominor.yy0 = yymsp[0].minor.yy0;
}
        break;
      case 74: /* expr ::= NAME */
{
    checkIsRValue(yymsp[0].minor.yy0->data, yymsp[0].minor.yy0->line);
    yygotominor.yy0 = yymsp[0].minor.yy0;
}
        break;
      case 75: /* expr ::= expr PERIOD NAME */
{
    yymsp[-2].minor.yy0->data = yymsp[-2].minor.yy0->data + "." + yymsp[0].minor.yy0->data;
    delete yymsp[0].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[-2].minor.yy0);
  yy_destructor(yypParser,29,&yymsp[-1].minor);
}
        break;
      case 76: /* expr ::= expr LSQBRACKET expr RSQBRACKET */
{
    yymsp[-3].minor.yy0->data = yymsp[-3].minor.yy0->data + "[" + yymsp[-1].minor.yy0->data + "]";
    delete yymsp[-1].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[-3].minor.yy0);
  yy_destructor(yypParser,28,&yymsp[-2].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
        break;
      case 77: /* lambdaExprStart ::= FUNCTION LPAREN typedNameList RPAREN fdef_rettypes */
{
    std::string funcname = "_lambda" + std::to_string(++lambdaIndex);
    ps->closure.pushScope();

    // Register variables.
    // we store varname in odd loops and define variables on even loops.
    std::string argname;
    std::vector<std::string> argnames, types;
    bool isTypedFunction = false;

    subTokenListIter(yymsp[-2].minor.yy0, [&](const Token* typedNameToken) {
        auto argnameToken = typedNameToken->subToken[0];
        auto typeToken = typedNameToken->subToken[1];
        std::string argname = argnameToken->data;

        if(typeToken == nullptr) {
            if(!ps->closure.defVariable(argname)) {
                throw_error(196, ("Redeclaration of variable \'" + argname + "\'"), yymsp[-2].minor.yy0->line);
            }
            argnames.push_back(argname);
            types.push_back("None");
        }
        else {
            isTypedFunction = true;
            if(!ps->closure.defConstant(argname)) {
                throw_error(7714, ("Redeclaration of typed constant \'" + argname + "\'"), yymsp[-2].minor.yy0->line);
            }
            argnames.push_back(argname);
            types.push_back(typeToken->data);
        }
    });

    // Add decorator header
    if (!isTypedFunction) {
        if(MAP_DEBUG) ps->gen << "@EUDTracedFunc" << std::endl;
        else ps->gen << "@EUDFunc" << std::endl;
    }
    else {
        if(MAP_DEBUG) ps->gen << "@EUDTracedTypedFunc([";
        else ps->gen << "@EUDTypedFunc([";
        writeStringList(ps->gen, types);
        if(!yymsp[0].minor.yy0) ps->gen << "])" << std::endl;
        else ps->gen << "], [" << yymsp[0].minor.yy0->data << "])" << std::endl;
    }

    // Write argument names
    ps->gen << "def " << funcname << "(";
    writeStringList(ps->gen, argnames);
    ps->gen << "):" << std::endl;

    ps->gen.indent();
    tmpIndex = 1;

    delete yymsp[-2].minor.yy0;

    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->data = funcname;
  yy_destructor(yypParser,35,&yymsp[-4].minor);
  yy_destructor(yypParser,27,&yymsp[-3].minor);
  yy_destructor(yypParser,36,&yymsp[-1].minor);
}
        break;
      case 78: /* expr ::= lambdaExprStart stmt */
{
    ps->gen.unindent(true);
    ps->closure.popScope();
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
  yy_destructor(yypParser,99,&yymsp[0].minor);
}
        break;
      case 81: /* fArg ::= NAME ASSIGN expr */
{  // Keyword argument
    yymsp[0].minor.yy0->data = yymsp[-2].minor.yy0->data + "=" + yymsp[0].minor.yy0->data;
    yymsp[0].minor.yy0->type = TOKEN_TEMP;
    yygotominor.yy0 = yymsp[0].minor.yy0;
    delete yymsp[-2].minor.yy0;
  yy_destructor(yypParser,3,&yymsp[-1].minor);
}
        break;
      case 83: /* fArgs_nonEmpty ::= fArgs_nonEmpty COMMA fArg */
{
    yymsp[-2].minor.yy0->data = yymsp[-2].minor.yy0->data + ", " + yymsp[0].minor.yy0->data;
    yymsp[-2].minor.yy0->type = TOKEN_TEMP;
    yygotominor.yy0 = yymsp[-2].minor.yy0;
    delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,5,&yymsp[-1].minor);
}
        break;
      case 86: /* funcexprStmt ::= funcexpr */
{
    writeTraceInfo(ps->gen, yymsp[0].minor.yy0);
    ps->gen << yymsp[0].minor.yy0->data << std::endl;
    delete yymsp[0].minor.yy0;
}
        break;
      case 87: /* funcexpr ::= NAME LPAREN fArgs RPAREN */
{
    // Preprocess yymsp[-3].minor.yy0
    checkIsFunction(yymsp[-3].minor.yy0->data, yymsp[-3].minor.yy0->line);
    yymsp[-3].minor.yy0->data += "(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-3].minor.yy0);
    delete yymsp[-1].minor.yy0;
  yy_destructor(yypParser,27,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[0].minor);
}
        break;
      case 88: /* funcexpr ::= expr LPAREN fArgs RPAREN */
{
    // If calling function imported from another module, add f_ prefix to function yymsp[-3].minor.yy0.
    static std::regex prefixedFuncNameRegex("^[a-z][_a-zA-Z0-9]*");
    std::string& nameStr = yymsp[-3].minor.yy0->data;
    if(std::count(nameStr.begin(), nameStr.end(), '.') == 1) {
        size_t p = nameStr.find('.');
        std::string moduleName = nameStr.substr(0, p);
        std::string funcName = nameStr.substr(p + 1);
        if (closure->isModule(moduleName) && std::regex_match(funcName, prefixedFuncNameRegex)) {
            funcNamePreprocess(funcName);
            yymsp[-3].minor.yy0->data = moduleName + '.' + funcName;
        }
    }

    // Preprocess yymsp[-3].minor.yy0
    yymsp[-3].minor.yy0->data += "(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-3].minor.yy0);
    delete yymsp[-1].minor.yy0;
  yy_destructor(yypParser,27,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[0].minor);
}
        break;
      case 90: /* expr ::= LPAREN expr RPAREN */
{
    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->data = "(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0->type = TOKEN_EXPR;
    yygotominor.yy0->subToken[0] = yymsp[-1].minor.yy0;
  yy_destructor(yypParser,27,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[0].minor);
}
        break;
      case 91: /* commaSkippable ::= COMMA */
{
  yy_destructor(yypParser,5,&yymsp[0].minor);
}
        break;
      case 93: /* expr ::= LSQBRACKET exprList_nonEmpty commaSkippable RSQBRACKET */
{
    yymsp[-2].minor.yy0->data = "_ARR(FlattenList([" + yymsp[-2].minor.yy0->data + "]))";
    yygotominor.yy0 = mkTokenTemp(yymsp[-2].minor.yy0);
  yy_destructor(yypParser,28,&yymsp[-3].minor);
  yy_destructor(yypParser,134,&yymsp[-1].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
        break;
      case 94: /* expr ::= L2V LPAREN expr RPAREN */
{
    yymsp[-1].minor.yy0->data = "_L2V(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
  yy_destructor(yypParser,48,&yymsp[-3].minor);
  yy_destructor(yypParser,27,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[0].minor);
}
        break;
      case 95: /* expr ::= MAPSTRING LPAREN STRING RPAREN */
{
    yymsp[-1].minor.yy0->data = "GetStringIndex(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
  yy_destructor(yypParser,49,&yymsp[-3].minor);
  yy_destructor(yypParser,27,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[0].minor);
}
        break;
      case 96: /* expr ::= UNIT LPAREN STRING RPAREN */
{
    yymsp[-1].minor.yy0->data = "EncodeUnit(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
  yy_destructor(yypParser,50,&yymsp[-3].minor);
  yy_destructor(yypParser,27,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[0].minor);
}
        break;
      case 97: /* expr ::= SWITCH LPAREN STRING RPAREN */
{
    yymsp[-1].minor.yy0->data = "EncodeSwitch(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
  yy_destructor(yypParser,51,&yymsp[-3].minor);
  yy_destructor(yypParser,27,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[0].minor);
}
        break;
      case 98: /* expr ::= LOCATION LPAREN STRING RPAREN */
{
    yymsp[-1].minor.yy0->data = "GetLocationIndex(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
  yy_destructor(yypParser,52,&yymsp[-3].minor);
  yy_destructor(yypParser,27,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[0].minor);
}
        break;
      case 99: /* expr ::= VARRAY LPAREN exprList_nonEmpty commaSkippable RPAREN */
{
    yymsp[-2].minor.yy0->data = "_VARR(FlattenList([" + yymsp[-2].minor.yy0->data + "]))";
    yygotominor.yy0 = mkTokenTemp(yymsp[-2].minor.yy0);
  yy_destructor(yypParser,53,&yymsp[-4].minor);
  yy_destructor(yypParser,27,&yymsp[-3].minor);
  yy_destructor(yypParser,134,&yymsp[-1].minor);
  yy_destructor(yypParser,36,&yymsp[0].minor);
}
        break;
      case 100: /* expr ::= LIST LPAREN exprList_nonEmpty commaSkippable RPAREN */
{
    yymsp[-2].minor.yy0->data = "FlattenList([" + yymsp[-2].minor.yy0->data + "])";
    yygotominor.yy0 = mkTokenTemp(yymsp[-2].minor.yy0);
  yy_destructor(yypParser,54,&yymsp[-4].minor);
  yy_destructor(yypParser,27,&yymsp[-3].minor);
  yy_destructor(yypParser,134,&yymsp[-1].minor);
  yy_destructor(yypParser,36,&yymsp[0].minor);
}
        break;
      case 101: /* expr ::= expr QMARK expr COLON expr */
{
    std::stringstream ss;
    ss << "EUDTernary";
    applyNegativeOptimization(ss, yymsp[-4].minor.yy0);
    ss << "(" << yymsp[-2].minor.yy0->data << ")(" << yymsp[0].minor.yy0->data << ")";
    yymsp[0].minor.yy0->data = ss.str();
    delete yymsp[-4].minor.yy0;
    delete yymsp[-2].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[0].minor.yy0);
  yy_destructor(yypParser,4,&yymsp[-3].minor);
  yy_destructor(yypParser,34,&yymsp[-1].minor);
}
        break;
      case 102: /* expr ::= expr PLUS expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "+",  yymsp[0].minor.yy0);   yy_destructor(yypParser,20,&yymsp[-1].minor);
}
        break;
      case 103: /* expr ::= expr MINUS expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "-",  yymsp[0].minor.yy0);   yy_destructor(yypParser,21,&yymsp[-1].minor);
}
        break;
      case 104: /* expr ::= expr MULTIPLY expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "*",  yymsp[0].minor.yy0);   yy_destructor(yypParser,23,&yymsp[-1].minor);
}
        break;
      case 105: /* expr ::= expr DIVIDE expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "//", yymsp[0].minor.yy0);   yy_destructor(yypParser,22,&yymsp[-1].minor);
}
        break;
      case 106: /* expr ::= expr MOD expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "%",  yymsp[0].minor.yy0);   yy_destructor(yypParser,24,&yymsp[-1].minor);
}
        break;
      case 107: /* expr ::= expr LSHIFT expr */
{
    yymsp[0].minor.yy0->data = "_LSH(" + yymsp[-2].minor.yy0->data + "," + yymsp[0].minor.yy0->data + ")";
    delete yymsp[-2].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[0].minor.yy0);
  yy_destructor(yypParser,18,&yymsp[-1].minor);
}
        break;
      case 108: /* expr ::= expr RSHIFT expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, ">>", yymsp[0].minor.yy0);   yy_destructor(yypParser,19,&yymsp[-1].minor);
}
        break;
      case 109: /* expr ::= expr BITAND expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "&",  yymsp[0].minor.yy0);   yy_destructor(yypParser,17,&yymsp[-1].minor);
}
        break;
      case 110: /* expr ::= expr BITOR expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "|",  yymsp[0].minor.yy0);   yy_destructor(yypParser,15,&yymsp[-1].minor);
}
        break;
      case 111: /* expr ::= expr BITXOR expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "^",  yymsp[0].minor.yy0);   yy_destructor(yypParser,16,&yymsp[-1].minor);
}
        break;
      case 112: /* expr ::= PLUS expr */
{ yymsp[0].minor.yy0->data = "+" + yymsp[0].minor.yy0->data; yygotominor.yy0 = mkTokenTemp(yymsp[0].minor.yy0);   yy_destructor(yypParser,20,&yymsp[-1].minor);
}
        break;
      case 113: /* expr ::= MINUS expr */
{ yymsp[0].minor.yy0->data = "-" + yymsp[0].minor.yy0->data; yygotominor.yy0 = mkTokenTemp(yymsp[0].minor.yy0);   yy_destructor(yypParser,21,&yymsp[-1].minor);
}
        break;
      case 114: /* expr ::= BITNOT expr */
{ yymsp[0].minor.yy0->data = "~" + yymsp[0].minor.yy0->data; yygotominor.yy0 = mkTokenTemp(yymsp[0].minor.yy0);   yy_destructor(yypParser,26,&yymsp[-1].minor);
}
        break;
      case 115: /* expr ::= expr EQ expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "==", yymsp[0].minor.yy0);   yy_destructor(yypParser,9,&yymsp[-1].minor);
}
        break;
      case 116: /* expr ::= expr NE expr */
{ yygotominor.yy0 = negate(binopConcat(yymsp[-2].minor.yy0, "==", yymsp[0].minor.yy0));   yy_destructor(yypParser,14,&yymsp[-1].minor);
}
        break;
      case 117: /* expr ::= expr LE expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "<=", yymsp[0].minor.yy0);   yy_destructor(yypParser,10,&yymsp[-1].minor);
}
        break;
      case 118: /* expr ::= expr GE expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, ">=", yymsp[0].minor.yy0);   yy_destructor(yypParser,12,&yymsp[-1].minor);
}
        break;
      case 119: /* expr ::= expr LT expr */
{ yygotominor.yy0 = negate(binopConcat(yymsp[-2].minor.yy0, ">=", yymsp[0].minor.yy0));   yy_destructor(yypParser,11,&yymsp[-1].minor);
}
        break;
      case 120: /* expr ::= expr GT expr */
{ yygotominor.yy0 = negate(binopConcat(yymsp[-2].minor.yy0, "<=", yymsp[0].minor.yy0));   yy_destructor(yypParser,13,&yymsp[-1].minor);
}
        break;
      case 121: /* expr ::= expr LAND expr */
{
    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->line = yymsp[0].minor.yy0->line;

    // Generate data!
    yygotominor.yy0->type = TOKEN_LAND;
    yygotominor.yy0->subToken[0] = yymsp[-2].minor.yy0;
    yygotominor.yy0->subToken[1] = yymsp[0].minor.yy0;

    std::stringstream ss;
    ss << "EUDSCAnd()";
    shortCircuitCondListGetter(ss, yygotominor.yy0, TOKEN_LAND);
    ss << "()";
    yygotominor.yy0->data = ss.str();
  yy_destructor(yypParser,7,&yymsp[-1].minor);
}
        break;
      case 122: /* expr ::= expr LOR expr */
{
    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->line = yymsp[0].minor.yy0->line;

    // Generate data!
    yygotominor.yy0->type = TOKEN_LOR;
    yygotominor.yy0->subToken[0] = yymsp[-2].minor.yy0;
    yygotominor.yy0->subToken[1] = yymsp[0].minor.yy0;

    std::stringstream ss;
    ss << "EUDSCOr()";
    shortCircuitCondListGetter(ss, yygotominor.yy0, TOKEN_LOR);
    ss << "()";
    yygotominor.yy0->data = ss.str();
  yy_destructor(yypParser,6,&yymsp[-1].minor);
}
        break;
      case 123: /* expr ::= LNOT expr */
{ yygotominor.yy0 = negate(yymsp[0].minor.yy0);   yy_destructor(yypParser,8,&yymsp[-1].minor);
}
        break;
      case 124: /* vdef_stmt ::= VAR nameList_nonEmpty */
{
    std::string& s = yymsp[0].minor.yy0->data;
    int varCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register variables.
    commaListIter(s, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(196, ("Redeclaration of variable \'" + varname + "\'"), yymsp[0].minor.yy0->line);
        }
    });

    if(varCount == 1) {
        ps->gen << s << " = EUDVariable()" << std::endl;
    }
    else {
        ps->gen << s << " = EUDCreateVariables(" << varCount << ")" << std::endl;
    }

    delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,39,&yymsp[-1].minor);
}
        break;
      case 125: /* vdefAssign_stmt ::= VAR nameList_nonEmpty ASSIGN exprList_nonEmpty */
{
    writeTraceInfo(ps->gen, yymsp[-3].minor.yy0);
    delete yymsp[-3].minor.yy0;

    std::string& s = yymsp[-2].minor.yy0->data;
    int varCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register variables.
    commaListIter(s, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(7998, ("Redeclaration of variable \'" + varname + "\'"), yymsp[-2].minor.yy0->line);
        }
    });

    if(varCount == 1) {
        ps->gen << s << " = EUDVariable()" << std::endl;
        ps->gen << s << " << (" << yymsp[0].minor.yy0->data << ")" << std::endl;
    }
    else {
        ps->gen << s << " = _MVAR([" << yymsp[0].minor.yy0->data << "])" << std::endl;
    }

    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,3,&yymsp[-1].minor);
}
        break;
      case 126: /* vdefAssignStatic_stmt ::= STATIC VAR nameList_nonEmpty ASSIGN exprList_nonEmpty */
{
    std::string& s = yymsp[-2].minor.yy0->data;
    int varCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register variables.
    commaListIter(s, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(7998, ("Redeclaration of variable \'" + varname + "\'"), yymsp[-2].minor.yy0->line);
        }
    });

    if(varCount == 1) {
        ps->gen << s << " = EUDVariable(" << yymsp[0].minor.yy0->data << ")" << std::endl;
    }
    else {
        ps->gen << s << " = (EUDVariable(x) for x in (" << yymsp[0].minor.yy0->data << "))" << std::endl;
    }

    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,55,&yymsp[-4].minor);
  yy_destructor(yypParser,39,&yymsp[-3].minor);
  yy_destructor(yypParser,3,&yymsp[-1].minor);
}
        break;
      case 127: /* vdefAssign_global_stmt ::= VAR nameList_nonEmpty ASSIGN exprList_nonEmpty */
{
    std::string& s = yymsp[-2].minor.yy0->data;
    int varCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register variables.
    commaListIter(s, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(7998, ("Redeclaration of variable \'" + varname + "\'"), yymsp[-2].minor.yy0->line);
        }
    });

    ps->gen << s << " = EUDCreateVariables(" << varCount << ")" << std::endl;
    ps->gen << "_IGVA([" << s << "], lambda: [" << yymsp[0].minor.yy0->data << "])" << std::endl;

    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,39,&yymsp[-3].minor);
  yy_destructor(yypParser,3,&yymsp[-1].minor);
}
        break;
      case 128: /* cdef_stmt ::= CONST nameList_nonEmpty ASSIGN exprList_nonEmpty */
{
    writeTraceInfo(ps->gen, yymsp[-3].minor.yy0);
    delete yymsp[-3].minor.yy0;

    std::string& s = yymsp[-2].minor.yy0->data;
    int nameCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register constants.
    commaListIter(s, [&](std::string& constname) {
        if(!ps->closure.defConstant(constname)) {
            throw_error(7719, ("Redeclaration of constant \'" + constname + "\'"), yymsp[-2].minor.yy0->line);
        }
    });
    if(nameCount == 1) {
        ps->gen << s << " = " << yymsp[0].minor.yy0->data << std::endl;
    }
    else {
        ps->gen << s << " = List2Assignable([" << yymsp[0].minor.yy0->data << "])" << std::endl;
    }
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,3,&yymsp[-1].minor);
}
        break;
      case 129: /* cdef_global_stmt ::= CONST nameList_nonEmpty ASSIGN exprList_nonEmpty */
{
    std::string& s = yymsp[-2].minor.yy0->data;
    int nameCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register constants.
    commaListIter(s, [&](std::string& constname) {
        if(!ps->closure.defConstant(constname)) {
            throw_error(7719, ("Redeclaration of constant \'" + constname + "\'"), yymsp[-2].minor.yy0->line);
        }
    });
    if(nameCount == 1) {
        ps->gen << s << " = _CGFW(lambda: [" << yymsp[0].minor.yy0->data << "], 1)[0]" << std::endl;
    }
    else {
        ps->gen << s << " = List2Assignable(_CGFW(lambda: [" << yymsp[0].minor.yy0->data << "], " << nameCount << "))" << std::endl;
    }
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,56,&yymsp[-3].minor);
  yy_destructor(yypParser,3,&yymsp[-1].minor);
}
        break;
      case 130: /* lvalue ::= NAME */
{
    checkIsVariable(yymsp[0].minor.yy0->data, yymsp[0].minor.yy0->line);
    yygotominor.yy0 = yymsp[0].minor.yy0;
}
        break;
      case 131: /* lvalue ::= expr LSQBRACKET expr RSQBRACKET */
{
    yymsp[-1].minor.yy0->data = "_ARRW(" + yymsp[-3].minor.yy0->data + ", " + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
    delete yymsp[-3].minor.yy0;
  yy_destructor(yypParser,28,&yymsp[-2].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
        break;
      case 132: /* lvalue ::= expr PERIOD NAME */
{
    yymsp[0].minor.yy0->data = "_ATTW(" + yymsp[-2].minor.yy0->data + ", '" + yymsp[0].minor.yy0->data + "')";
    yygotominor.yy0 = mkTokenTemp(yymsp[0].minor.yy0);
    delete yymsp[-2].minor.yy0;
  yy_destructor(yypParser,29,&yymsp[-1].minor);
}
        break;
      case 135: /* assign_stmt ::= lvalue ASSIGN expr */
{
    writeTraceInfo(ps->gen, yymsp[-2].minor.yy0);
    ps->gen << yymsp[-2].minor.yy0->data << " << (" << yymsp[0].minor.yy0->data << ")" << std::endl;
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,3,&yymsp[-1].minor);
}
        break;
      case 136: /* assign_stmt ::= lvalueList_nonEmpty ASSIGN exprList_nonEmpty */
{
    writeTraceInfo(ps->gen, yymsp[-2].minor.yy0);
    ps->gen << "_SV([" << yymsp[-2].minor.yy0->data << "], [" << yymsp[0].minor.yy0->data << "])" << std::endl;
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,3,&yymsp[-1].minor);
}
        break;
      case 137: /* assign_stmt ::= INC lvalue */
{ writeTraceInfo(ps->gen, yymsp[0].minor.yy0); ps->gen << yymsp[0].minor.yy0->data << ".__iadd__(1)" << std::endl; delete yymsp[0].minor.yy0;   yy_destructor(yypParser,57,&yymsp[-1].minor);
}
        break;
      case 138: /* assign_stmt ::= lvalue INC */
{ writeTraceInfo(ps->gen, yymsp[-1].minor.yy0); ps->gen << yymsp[-1].minor.yy0->data << ".__iadd__(1)" << std::endl; delete yymsp[-1].minor.yy0;   yy_destructor(yypParser,57,&yymsp[0].minor);
}
        break;
      case 139: /* assign_stmt ::= DEC lvalue */
{ writeTraceInfo(ps->gen, yymsp[0].minor.yy0); ps->gen << yymsp[0].minor.yy0->data << ".__isub__(1)" << std::endl; delete yymsp[0].minor.yy0;   yy_destructor(yypParser,58,&yymsp[-1].minor);
}
        break;
      case 140: /* assign_stmt ::= lvalue DEC */
{ writeTraceInfo(ps->gen, yymsp[-1].minor.yy0); ps->gen << yymsp[-1].minor.yy0->data << ".__isub__(1)" << std::endl; delete yymsp[-1].minor.yy0;   yy_destructor(yypParser,58,&yymsp[0].minor);
}
        break;
      case 141: /* assign_stmt ::= lvalue IADD expr */
{ writeTraceInfo(ps->gen, yymsp[-2].minor.yy0); ps->gen << yymsp[-2].minor.yy0->data << ".__iadd__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;   yy_destructor(yypParser,59,&yymsp[-1].minor);
}
        break;
      case 142: /* assign_stmt ::= lvalue ISUB expr */
{ writeTraceInfo(ps->gen, yymsp[-2].minor.yy0); ps->gen << yymsp[-2].minor.yy0->data << ".__isub__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;   yy_destructor(yypParser,60,&yymsp[-1].minor);
}
        break;
      case 143: /* assign_stmt ::= lvalue IMUL expr */
{ writeTraceInfo(ps->gen, yymsp[-2].minor.yy0); ps->gen << yymsp[-2].minor.yy0->data << ".__imul__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;   yy_destructor(yypParser,61,&yymsp[-1].minor);
}
        break;
      case 144: /* assign_stmt ::= lvalue IDIV expr */
{ writeTraceInfo(ps->gen, yymsp[-2].minor.yy0); ps->gen << yymsp[-2].minor.yy0->data << ".__ifloordiv__("  << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;   yy_destructor(yypParser,62,&yymsp[-1].minor);
}
        break;
      case 145: /* assign_stmt ::= lvalue IMOD expr */
{ writeTraceInfo(ps->gen, yymsp[-2].minor.yy0); ps->gen << yymsp[-2].minor.yy0->data << ".__imod__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;   yy_destructor(yypParser,63,&yymsp[-1].minor);
}
        break;
      case 146: /* assign_stmt ::= lvalue ILSH expr */
{ writeTraceInfo(ps->gen, yymsp[-2].minor.yy0); ps->gen << yymsp[-2].minor.yy0->data << ".__ilshift__("    << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;   yy_destructor(yypParser,64,&yymsp[-1].minor);
}
        break;
      case 147: /* assign_stmt ::= lvalue IRSH expr */
{ writeTraceInfo(ps->gen, yymsp[-2].minor.yy0); ps->gen << yymsp[-2].minor.yy0->data << ".__irshift__("    << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;   yy_destructor(yypParser,65,&yymsp[-1].minor);
}
        break;
      case 148: /* assign_stmt ::= lvalue IBND expr */
{ writeTraceInfo(ps->gen, yymsp[-2].minor.yy0); ps->gen << yymsp[-2].minor.yy0->data << ".__iand__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;   yy_destructor(yypParser,66,&yymsp[-1].minor);
}
        break;
      case 149: /* assign_stmt ::= lvalue IBOR expr */
{ writeTraceInfo(ps->gen, yymsp[-2].minor.yy0); ps->gen << yymsp[-2].minor.yy0->data << ".__ior__("        << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;   yy_destructor(yypParser,67,&yymsp[-1].minor);
}
        break;
      case 150: /* assign_stmt ::= lvalue IBXR expr */
{ writeTraceInfo(ps->gen, yymsp[-2].minor.yy0); ps->gen << yymsp[-2].minor.yy0->data << ".__ixor__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;   yy_destructor(yypParser,68,&yymsp[-1].minor);
}
        break;
      case 151: /* once_start ::= ONCE */
{
    ps->gen << "if EUDExecuteOnce()():" << std::endl;
    ps->gen.indent();
  yy_destructor(yypParser,69,&yymsp[0].minor);
}
        break;
      case 152: /* once_stmt ::= once_start stmt */
{
    ps->gen.unindent(false);
    ps->gen << "EUDEndExecuteOnce()" << std::endl;
  yy_destructor(yypParser,137,&yymsp[-1].minor);
  yy_destructor(yypParser,99,&yymsp[0].minor);
}
        break;
      case 153: /* if_start ::= IF */
{
    yygotominor.yy0 = genTemp(yymsp[0].minor.yy0);
    ps->gen << yygotominor.yy0->data << " = EUDIf()" << std::endl;
    delete yymsp[0].minor.yy0;
}
        break;
      case 154: /* if_header ::= if_start LPAREN expr */
      case 157: /* elif_header ::= elif_start LPAREN expr */ yytestcase(yyruleno==157);
{  // RPAREN is at if_block. see (2)
    writeTraceInfo(ps->gen, yymsp[0].minor.yy0);
    writeCsOpener(*pGen, yymsp[-2].minor.yy0, yymsp[0].minor.yy0);
    ps->gen.indent();
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,27,&yymsp[-1].minor);
}
        break;
      case 155: /* if_block ::= if_header RPAREN stmt */
{
  yy_destructor(yypParser,139,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[-1].minor);
  yy_destructor(yypParser,99,&yymsp[0].minor);
}
        break;
      case 156: /* elif_start ::= ELSE IF */
{
    yygotominor.yy0 = genTemp(yymsp[0].minor.yy0);
    ps->gen.unindent(false);
    ps->gen << yygotominor.yy0->data << " = EUDElseIf()" << std::endl;
    delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,2,&yymsp[-1].minor);
}
        break;
      case 158: /* if_block ::= if_block elif_header RPAREN stmt */
{
  yy_destructor(yypParser,140,&yymsp[-3].minor);
  yy_destructor(yypParser,142,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[-1].minor);
  yy_destructor(yypParser,99,&yymsp[0].minor);
}
        break;
      case 159: /* else_header ::= ELSE */
{
    ps->gen.unindent(false);
    ps->gen << "if EUDElse()():" << std::endl;
    ps->gen.indent();
  yy_destructor(yypParser,2,&yymsp[0].minor);
}
        break;
      case 160: /* if_stmt ::= if_block */
{
    ps->gen.unindent(false);
    ps->gen << "EUDEndIf()" << std::endl;
  yy_destructor(yypParser,140,&yymsp[0].minor);
}
        break;
      case 161: /* if_stmt ::= if_block else_header stmt */
{
    ps->gen.unindent(false);
    ps->gen << "EUDEndIf()" << std::endl;
  yy_destructor(yypParser,140,&yymsp[-2].minor);
  yy_destructor(yypParser,143,&yymsp[-1].minor);
  yy_destructor(yypParser,99,&yymsp[0].minor);
}
        break;
      case 162: /* switchcase_header ::= SWITCHCASE LPAREN expr */
{ // RPAREN is at switchcase_stmt. see (2)
    writeTraceInfo(ps->gen, yymsp[0].minor.yy0);
    ps->gen << "EUDSwitch(" << yymsp[0].minor.yy0->data << ")" << std::endl;
  yy_destructor(yypParser,71,&yymsp[-2].minor);
  yy_destructor(yypParser,27,&yymsp[-1].minor);
}
        break;
      case 163: /* case_start ::= CASE */
{
    yygotominor.yy0 = genTemp(yymsp[0].minor.yy0);
    ps->gen << yygotominor.yy0->data << " = EUDSwitchCase()" << std::endl;
    delete yymsp[0].minor.yy0;
}
        break;
      case 164: /* case_clause ::= case_start exprList_nonEmpty COLON */
{
    writeTraceInfo(ps->gen, yymsp[-1].minor.yy0);
    writeCsOpener(*pGen, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0);
    ps->gen.indent();
    delete yymsp[-2].minor.yy0; delete yymsp[-1].minor.yy0;
  yy_destructor(yypParser,34,&yymsp[0].minor);
}
        break;
      case 165: /* case_chunk ::= case_clause */
{
    ps->gen << "pass" << std::endl;
    ps->gen.unindent(false);
  yy_destructor(yypParser,146,&yymsp[0].minor);
}
        break;
      case 166: /* case_chunk ::= case_clause bodyStmtList */
{
    ps->gen.unindent(false);
  yy_destructor(yypParser,146,&yymsp[-1].minor);
  yy_destructor(yypParser,108,&yymsp[0].minor);
}
        break;
      case 167: /* case_chunks ::= case_chunks case_chunk */
{
  yy_destructor(yypParser,148,&yymsp[-1].minor);
  yy_destructor(yypParser,147,&yymsp[0].minor);
}
        break;
      case 168: /* case_chunks ::= case_chunk */
{
  yy_destructor(yypParser,147,&yymsp[0].minor);
}
        break;
      case 169: /* default_clause ::= DEFAULT COLON */
{
    writeTraceInfo(ps->gen, yymsp[-1].minor.yy0);
    delete yymsp[-1].minor.yy0;

    ps->gen << "if EUDSwitchDefault()():" << std::endl;
    ps->gen.indent();
  yy_destructor(yypParser,34,&yymsp[0].minor);
}
        break;
      case 170: /* default_chunk ::= default_clause */
{
    ps->gen << "pass" << std::endl;
    ps->gen.unindent(false);
  yy_destructor(yypParser,149,&yymsp[0].minor);
}
        break;
      case 171: /* default_chunk ::= default_clause bodyStmtList */
{
    ps->gen.unindent(false);
  yy_destructor(yypParser,149,&yymsp[-1].minor);
  yy_destructor(yypParser,108,&yymsp[0].minor);
}
        break;
      case 172: /* switchcase_block ::= switchcase_header RPAREN LBRACKET case_chunks default_chunk */
{
  yy_destructor(yypParser,144,&yymsp[-4].minor);
  yy_destructor(yypParser,36,&yymsp[-3].minor);
  yy_destructor(yypParser,38,&yymsp[-2].minor);
  yy_destructor(yypParser,148,&yymsp[-1].minor);
  yy_destructor(yypParser,150,&yymsp[0].minor);
}
        break;
      case 173: /* switchcase_block ::= switchcase_header RPAREN LBRACKET case_chunks */
{
  yy_destructor(yypParser,144,&yymsp[-3].minor);
  yy_destructor(yypParser,36,&yymsp[-2].minor);
  yy_destructor(yypParser,38,&yymsp[-1].minor);
  yy_destructor(yypParser,148,&yymsp[0].minor);
}
        break;
      case 174: /* switchcase_stmt ::= switchcase_block RBRACKET */
{
    ps->gen << "EUDEndSwitch()" << std::endl;
  yy_destructor(yypParser,151,&yymsp[-1].minor);
  yy_destructor(yypParser,40,&yymsp[0].minor);
}
        break;
      case 175: /* while_start ::= WHILE */
{
    yygotominor.yy0 = genTemp(yymsp[0].minor.yy0);
    ps->gen << yygotominor.yy0->data << " = EUDWhile()" << std::endl;
    delete yymsp[0].minor.yy0;
}
        break;
      case 176: /* while_header ::= while_start LPAREN expr */
{  // RPAREN is at while_stmt. see (2)
    writeTraceInfo(ps->gen, yymsp[0].minor.yy0);
    writeCsOpener(*pGen, yymsp[-2].minor.yy0, yymsp[0].minor.yy0);
    ps->gen.indent();
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,27,&yymsp[-1].minor);
}
        break;
      case 177: /* while_stmt ::= while_header RPAREN stmt */
{
    ps->gen.unindent(false);
    ps->gen << "EUDEndWhile()" << std::endl;
  yy_destructor(yypParser,153,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[-1].minor);
  yy_destructor(yypParser,99,&yymsp[0].minor);
}
        break;
      case 178: /* for_opener ::= FOR LPAREN */
{
    ps->closure.pushScope();
    delete yymsp[-1].minor.yy0;
  yy_destructor(yypParser,27,&yymsp[0].minor);
}
        break;
      case 179: /* for_init_stmt_nonEmpty ::= vdef_stmt */
{
  yy_destructor(yypParser,90,&yymsp[0].minor);
}
        break;
      case 180: /* for_init_stmt_nonEmpty ::= vdefAssign_stmt */
{
  yy_destructor(yypParser,110,&yymsp[0].minor);
}
        break;
      case 181: /* for_init_stmt_nonEmpty ::= cdef_stmt */
{
  yy_destructor(yypParser,111,&yymsp[0].minor);
}
        break;
      case 182: /* for_init_stmt_nonEmpty ::= assign_stmt */
      case 187: /* for_action_stmt_nonEmpty ::= assign_stmt */ yytestcase(yyruleno==187);
{
  yy_destructor(yypParser,112,&yymsp[0].minor);
}
        break;
      case 183: /* for_init_stmt_nonEmpty ::= for_init_stmt_nonEmpty COMMA for_init_stmt_nonEmpty */
{
  yy_destructor(yypParser,155,&yymsp[-2].minor);
  yy_destructor(yypParser,5,&yymsp[-1].minor);
  yy_destructor(yypParser,155,&yymsp[0].minor);
}
        break;
      case 184: /* for_init_stmt ::= for_init_stmt_nonEmpty */
{
  yy_destructor(yypParser,155,&yymsp[0].minor);
}
        break;
      case 186: /* for_action_stmt_nonEmpty ::= funcexprStmt */
{
  yy_destructor(yypParser,113,&yymsp[0].minor);
}
        break;
      case 188: /* for_action_stmt_nonEmpty ::= for_action_stmt_nonEmpty COMMA for_action_stmt_nonEmpty */
{
  yy_destructor(yypParser,157,&yymsp[-2].minor);
  yy_destructor(yypParser,5,&yymsp[-1].minor);
  yy_destructor(yypParser,157,&yymsp[0].minor);
}
        break;
      case 190: /* for_action_stmt ::= for_action_stmt_nonEmpty */
{
  yy_destructor(yypParser,157,&yymsp[0].minor);
}
        break;
      case 191: /* for_header1 ::= for_opener for_init_stmt SEMICOLON */
{
    // opening for expr
    yygotominor.yy0 = genTemp(yymsp[0].minor.yy0);
    ps->gen << yygotominor.yy0->data << " = EUDWhile()" << std::endl;
    delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,154,&yymsp[-2].minor);
  yy_destructor(yypParser,156,&yymsp[-1].minor);
}
        break;
      case 192: /* for_header2 ::= for_header1 expr SEMICOLON */
{
    writeTraceInfo(ps->gen, yymsp[-1].minor.yy0);

    writeCsOpener(*pGen, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0);
    ps->gen.indent();
    delete yymsp[-2].minor.yy0;

    // Opening for assign_statement
    yygotominor.yy0 = genTemp(yymsp[-1].minor.yy0);
    delete yymsp[-1].minor.yy0;
    ps->gen << "def " << yygotominor.yy0->data <<"():" << std::endl;
    ps->gen.indent();
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 193: /* for_header ::= for_header2 for_action_stmt */
{  // RPAREN is at for_stmt. see (2)
    yygotominor.yy0 = yymsp[-1].minor.yy0;
    ps->gen.unindent(false);
  yy_destructor(yypParser,158,&yymsp[0].minor);
}
        break;
      case 194: /* for_stmt ::= for_header RPAREN stmt */
{
    ps->gen << "EUDSetContinuePoint()" << std::endl;
    ps->gen << yymsp[-2].minor.yy0->data << "()" << std::endl;
    ps->gen.unindent(false);
    ps->gen << "EUDEndWhile()" << std::endl;
    ps->closure.popScope();
    delete yymsp[-2].minor.yy0;
  yy_destructor(yypParser,36,&yymsp[-1].minor);
  yy_destructor(yypParser,99,&yymsp[0].minor);
}
        break;
      case 195: /* foreach_opener ::= FOREACH LPAREN */
{
    ps->closure.pushScope();
  yy_destructor(yypParser,76,&yymsp[-1].minor);
  yy_destructor(yypParser,27,&yymsp[0].minor);
}
        break;
      case 196: /* foreach_header ::= foreach_opener nameList_nonEmpty COLON exprList_nonEmpty */
{  // RPAREN is at foreach_stmt. see (2)
    commaListIter(yymsp[-2].minor.yy0->data, [&](std::string& s) {
        ps->closure.defVariable(s);
    });
    ps->gen << "for " << yymsp[-2].minor.yy0->data << " in " << yymsp[0].minor.yy0->data << ":" << std::endl;
    ps->gen.indent();
    delete yymsp[-2].minor.yy0;
    delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,162,&yymsp[-3].minor);
  yy_destructor(yypParser,34,&yymsp[-1].minor);
}
        break;
      case 197: /* foreach_stmt ::= foreach_header RPAREN stmt */
{
    ps->gen.unindent(true);
    ps->closure.popScope();
  yy_destructor(yypParser,163,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[-1].minor);
  yy_destructor(yypParser,99,&yymsp[0].minor);
}
        break;
      case 198: /* continue_stmt ::= CONTINUE */
{
    writeTraceInfo(ps->gen, yymsp[0].minor.yy0);
    delete yymsp[0].minor.yy0;

    ps->gen << "EUDContinue()" << std::endl;
}
        break;
      case 199: /* break_stmt ::= BREAK */
{
    writeTraceInfo(ps->gen, yymsp[0].minor.yy0);
    delete yymsp[0].minor.yy0;

    ps->gen << "EUDBreak()" << std::endl;
}
        break;
      case 200: /* return_stmt ::= RETURN exprList */
{
    writeTraceInfo(ps->gen, yymsp[-1].minor.yy0);
    delete yymsp[-1].minor.yy0;

    ps->gen << "EUDReturn(" << yymsp[0].minor.yy0->data << ")" << std::endl;
    delete yymsp[0].minor.yy0;
}
        break;
      case 201: /* expr ::= CONDITIONNAME LPAREN fArgs RPAREN */
      case 202: /* expr ::= KILLS LPAREN fArgs RPAREN */ yytestcase(yyruleno==202);
      case 204: /* expr ::= ACTIONNAME LPAREN fArgs RPAREN */ yytestcase(yyruleno==204);
{
    yymsp[-3].minor.yy0->data = yymsp[-3].minor.yy0->data + "(" + yymsp[-1].minor.yy0->data + ")";
    delete yymsp[-1].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[-3].minor.yy0);
  yy_destructor(yypParser,27,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[0].minor);
}
        break;
      case 203: /* actionStmt ::= ACTIONNAME LPAREN fArgs RPAREN SEMICOLON */
{
    writeTraceInfo(ps->gen, yymsp[-4].minor.yy0);
    ps->gen << "DoActions(" << yymsp[-4].minor.yy0->data << "(" << yymsp[-2].minor.yy0->data << "))" << std::endl;
    delete yymsp[-4].minor.yy0; delete yymsp[-2].minor.yy0;
  yy_destructor(yypParser,27,&yymsp[-3].minor);
  yy_destructor(yypParser,36,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      default:
      /* (1) chunks ::= */ yytestcase(yyruleno==1);
      /* (92) commaSkippable ::= */ yytestcase(yyruleno==92);
      /* (185) for_init_stmt ::= */ yytestcase(yyruleno==185);
      /* (189) for_action_stmt ::= */ yytestcase(yyruleno==189);
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */

    throw_error(-1, "Unrecoverable error");
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  ParseARG_FETCH;
#define TOKEN (yyminor.yy0)

    throw_error(-2, "General syntax error");
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "ParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void Parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  ParseTOKENTYPE yyminor       /* The value for the token */
  ParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  ParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}


PyGenerator* pGen;
ClosureManager* closure;


std::string ParseString(const std::string& fname, const std::string& code, bool addComment)
{
    // Module name from fname
    // last \/ ~ first .
    auto lpos = fname.find_last_of("\\/");
    if(lpos == std::string::npos) lpos = 0;
    else lpos++;
    auto rpos = fname.find_first_of(".", lpos);
    if(rpos == std::string::npos) rpos = fname.size();
    currentModule = fname.substr(lpos, rpos - lpos);
    currentFile = fname;

#ifndef NDEBUG
    if(PARSER_DEBUG) ParseTrace(stdout, "--");
#endif

    // Main code
    Tokenizer tok(code);
    void* pParser = ParseAlloc (malloc);
    ParserStruct ps;
    Token* token;
    currentTokenizingLine = 0;
    pGen = &ps.gen;
    closure = &ps.closure;
    lambdaIndex = 0;

    if(PARSER_DEBUG) std::cout << "Parsing string [[[\n" << code.c_str() << "\n]]]\n";
    tmpIndex = 1;
    resetParserErrorNum();
    while ((token = tok.getToken()) != nullptr) {
        if (currentTokenizingLine != tok.getCurrentLine()) {
            currentTokenizingLine = tok.getCurrentLine();
            if(addComment) ps.gen << "# (Line " << currentTokenizingLine << ") " << trim(tok.getCurrentLineString()) << std::endl;
            if(PARSER_DEBUG) printf("# reading line %s\n", tok.getCurrentLineString().c_str());
        }
        int newTokType = getConvertedType(token->type);
        if (newTokType != -1) {
            Parse (pParser, newTokType, token, &ps);
        }
        else {
            throw_error(8104, "Invalid token");
        }
    }
    Parse (pParser, 0, nullptr, &ps);
    ParseFree(pParser, free );

    std::string ret = iwCollapse(ps.gen.str());
    if(getParseErrorNum() > 0) {
        ret += "\nraise RuntimeError('Compile error')\n";
    }

#ifndef NDEBUG
    if(PARSER_DEBUG) ParseTrace(NULL, "--");
#endif

    return ret;
}
